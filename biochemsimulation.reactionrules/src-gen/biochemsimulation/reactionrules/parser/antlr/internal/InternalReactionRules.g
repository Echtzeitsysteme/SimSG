/*
 * generated by Xtext 2.12.0
 */
grammar InternalReactionRules;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package biochemsimulation.reactionrules.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package biochemsimulation.reactionrules.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import biochemsimulation.reactionrules.services.ReactionRulesGrammarAccess;

}

@parser::members {

 	private ReactionRulesGrammarAccess grammarAccess;

    public InternalReactionRulesParser(TokenStream input, ReactionRulesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ReactionRuleModel";
   	}

   	@Override
   	protected ReactionRulesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleReactionRuleModel
entryRuleReactionRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionRuleModelRule()); }
	iv_ruleReactionRuleModel=ruleReactionRuleModel
	{ $current=$iv_ruleReactionRuleModel.current; }
	EOF;

// Rule ReactionRuleModel
ruleReactionRuleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionRuleModelAccess().getModelModelParserRuleCall_0_0());
				}
				lv_model_0_0=ruleModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRuleModelRule());
					}
					set(
						$current,
						"model",
						lv_model_0_0,
						"biochemsimulation.reactionrules.ReactionRules.Model");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionRuleModelAccess().getReationContainerReactionContainerParserRuleCall_1_0());
				}
				lv_reationContainer_1_0=ruleReactionContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRuleModelRule());
					}
					set(
						$current,
						"reationContainer",
						lv_reationContainer_1_0,
						"biochemsimulation.reactionrules.ReactionRules.ReactionContainer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionRuleModelAccess().getReactionPropertiesReactionPropertyParserRuleCall_2_0());
				}
				lv_reactionProperties_2_0=ruleReactionProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRuleModelRule());
					}
					add(
						$current,
						"reactionProperties",
						lv_reactionProperties_2_0,
						"biochemsimulation.reactionrules.ReactionRules.ReactionProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleModelUri
entryRuleModelUri returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelUriRule()); }
	iv_ruleModelUri=ruleModelUri
	{ $current=$iv_ruleModelUri.current; }
	EOF;

// Rule ModelUri
ruleModelUri returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='URI'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelUriAccess().getURIKeyword_0());
		}
		(
			(
				lv_uri_1_0=RULE_STRING
				{
					newLeafNode(lv_uri_1_0, grammarAccess.getModelUriAccess().getUriSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelUriRule());
					}
					setWithLastConsumed(
						$current,
						"uri",
						lv_uri_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleModelPath
entryRuleModelPath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelPathRule()); }
	iv_ruleModelPath=ruleModelPath
	{ $current=$iv_ruleModelPath.current; }
	EOF;

// Rule ModelPath
ruleModelPath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PATH'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelPathAccess().getPATHKeyword_0());
		}
		(
			(
				lv_path_1_0=RULE_STRING
				{
					newLeafNode(lv_path_1_0, grammarAccess.getModelPathAccess().getPathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelPathRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleModelLocation
entryRuleModelLocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelLocationRule()); }
	iv_ruleModelLocation=ruleModelLocation
	{ $current=$iv_ruleModelLocation.current; }
	EOF;

// Rule ModelLocation
ruleModelLocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModelLocationAccess().getModelUriParserRuleCall_0());
		}
		this_ModelUri_0=ruleModelUri
		{
			$current = $this_ModelUri_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModelLocationAccess().getModelPathParserRuleCall_1());
		}
		this_ModelPath_1=ruleModelPath
		{
			$current = $this_ModelPath_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ModelID'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelIDKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getLocationModelLocationParserRuleCall_2_0());
				}
				lv_location_2_0=ruleModelLocation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"location",
						lv_location_2_0,
						"biochemsimulation.reactionrules.ReactionRules.ModelLocation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleReactionContainer
entryRuleReactionContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionContainerRule()); }
	iv_ruleReactionContainer=ruleReactionContainer
	{ $current=$iv_ruleReactionContainer.current; }
	EOF;

// Rule ReactionContainer
ruleReactionContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReactionContainerAccess().getReactionContainerAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionContainerAccess().getAgentInstancesAgentInstanceParserRuleCall_1_0());
				}
				lv_agentInstances_1_0=ruleAgentInstance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionContainerRule());
					}
					add(
						$current,
						"agentInstances",
						lv_agentInstances_1_0,
						"biochemsimulation.reactionrules.ReactionRules.AgentInstance");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAgentInstanceSiteState
entryRuleAgentInstanceSiteState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentInstanceSiteStateRule()); }
	iv_ruleAgentInstanceSiteState=ruleAgentInstanceSiteState
	{ $current=$iv_ruleAgentInstanceSiteState.current; }
	EOF;

// Rule AgentInstanceSiteState
ruleAgentInstanceSiteState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentInstanceSiteStateRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAgentInstanceSiteStateAccess().getSiteSiteCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentInstanceSiteStateAccess().getSiteStateSiteStateParserRuleCall_1_0());
				}
				lv_siteState_1_0=ruleSiteState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentInstanceSiteStateRule());
					}
					set(
						$current,
						"siteState",
						lv_siteState_1_0,
						"biochemsimulation.reactionrules.ReactionRules.SiteState");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAgentInstanceLinkState
entryRuleAgentInstanceLinkState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentInstanceLinkStateRule()); }
	iv_ruleAgentInstanceLinkState=ruleAgentInstanceLinkState
	{ $current=$iv_ruleAgentInstanceLinkState.current; }
	EOF;

// Rule AgentInstanceLinkState
ruleAgentInstanceLinkState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentInstanceLinkStateRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAgentInstanceLinkStateAccess().getSiteSiteCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentInstanceLinkStateAccess().getLinkStateLinkStateParserRuleCall_1_0());
				}
				lv_linkState_1_0=ruleLinkState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentInstanceLinkStateRule());
					}
					set(
						$current,
						"linkState",
						lv_linkState_1_0,
						"biochemsimulation.reactionrules.ReactionRules.LinkState");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAgentInstance
entryRuleAgentInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentInstanceRule()); }
	iv_ruleAgentInstance=ruleAgentInstance
	{ $current=$iv_ruleAgentInstance.current; }
	EOF;

// Rule AgentInstance
ruleAgentInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AgentInstance'
		{
			newLeafNode(otherlv_0, grammarAccess.getAgentInstanceAccess().getAgentInstanceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAgentInstanceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentInstanceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentInstanceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAgentInstanceAccess().getAgentAgentCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentInstanceAccess().getSiteStatesAgentInstanceSiteStateParserRuleCall_3_0());
				}
				lv_siteStates_3_0=ruleAgentInstanceSiteState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentInstanceRule());
					}
					add(
						$current,
						"siteStates",
						lv_siteStates_3_0,
						"biochemsimulation.reactionrules.ReactionRules.AgentInstanceSiteState");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentInstanceAccess().getLinkStatesAgentInstanceLinkStateParserRuleCall_4_0());
				}
				lv_linkStates_4_0=ruleAgentInstanceLinkState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentInstanceRule());
					}
					add(
						$current,
						"linkStates",
						lv_linkStates_4_0,
						"biochemsimulation.reactionrules.ReactionRules.AgentInstanceLinkState");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReactionProperty
entryRuleReactionProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionPropertyRule()); }
	iv_ruleReactionProperty=ruleReactionProperty
	{ $current=$iv_ruleReactionProperty.current; }
	EOF;

// Rule ReactionProperty
ruleReactionProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getAgentParserRuleCall_0());
		}
		this_Agent_0=ruleAgent
		{
			$current = $this_Agent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getVariableParserRuleCall_1());
		}
		this_Variable_1=ruleVariable
		{
			$current = $this_Variable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getObservationParserRuleCall_2());
		}
		this_Observation_2=ruleObservation
		{
			$current = $this_Observation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getInitialParserRuleCall_3());
		}
		this_Initial_3=ruleInitial
		{
			$current = $this_Initial_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getRuleParserRuleCall_4());
		}
		this_Rule_4=ruleRule
		{
			$current = $this_Rule_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getFloatAccess().getINTTerminalRuleCall_1());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getFloatAccess().getINTTerminalRuleCall_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleScientificFloat
entryRuleScientificFloat returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getScientificFloatRule()); }
	iv_ruleScientificFloat=ruleScientificFloat
	{ $current=$iv_ruleScientificFloat.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule ScientificFloat
ruleScientificFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getScientificFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getScientificFloatAccess().getINTTerminalRuleCall_1());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getScientificFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getScientificFloatAccess().getINTTerminalRuleCall_3());
		}
		this_EXPONENT_4=RULE_EXPONENT
		{
			$current.merge(this_EXPONENT_4);
		}
		{
			newLeafNode(this_EXPONENT_4, grammarAccess.getScientificFloatAccess().getEXPONENTTerminalRuleCall_4());
		}
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getScientificFloatAccess().getHyphenMinusKeyword_5());
			}
		)?
		this_INT_6=RULE_INT
		{
			$current.merge(this_INT_6);
		}
		{
			newLeafNode(this_INT_6, grammarAccess.getScientificFloatAccess().getINTTerminalRuleCall_6());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleUnsignedInteger
entryRuleUnsignedInteger returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getUnsignedIntegerRule()); }
	iv_ruleUnsignedInteger=ruleUnsignedInteger
	{ $current=$iv_ruleUnsignedInteger.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule UnsignedInteger
ruleUnsignedInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getUnsignedIntegerAccess().getINTTerminalRuleCall());
	}
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSignedInteger
entryRuleSignedInteger returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getSignedIntegerRule()); }
	iv_ruleSignedInteger=ruleSignedInteger
	{ $current=$iv_ruleSignedInteger.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule SignedInteger
ruleSignedInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignedIntegerAccess().getHyphenMinusKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getSignedIntegerAccess().getINTTerminalRuleCall_1());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleArithmeticType
entryRuleArithmeticType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticTypeRule()); }
	iv_ruleArithmeticType=ruleArithmeticType
	{ $current=$iv_ruleArithmeticType.current.getText(); }
	EOF;

// Rule ArithmeticType
ruleArithmeticType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getFloatParserRuleCall_0());
		}
		this_Float_0=ruleFloat
		{
			$current.merge(this_Float_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getUnsignedIntegerParserRuleCall_1());
		}
		this_UnsignedInteger_1=ruleUnsignedInteger
		{
			$current.merge(this_UnsignedInteger_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getSignedIntegerParserRuleCall_2());
		}
		this_SignedInteger_2=ruleSignedInteger
		{
			$current.merge(this_SignedInteger_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticTypeAccess().getScientificFloatParserRuleCall_3());
		}
		this_ScientificFloat_3=ruleScientificFloat
		{
			$current.merge(this_ScientificFloat_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArithmeticValue
entryRuleArithmeticValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticValueRule()); }
	iv_ruleArithmeticValue=ruleArithmeticValue
	{ $current=$iv_ruleArithmeticValue.current; }
	EOF;

// Rule ArithmeticValue
ruleArithmeticValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getArithmeticValueAccess().getValueArithmeticTypeParserRuleCall_0());
			}
			lv_value_0_0=ruleArithmeticType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getArithmeticValueRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"biochemsimulation.reactionrules.ReactionRules.ArithmeticType");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStateRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleStates
entryRuleStates returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatesRule()); }
	iv_ruleStates=ruleStates
	{ $current=$iv_ruleStates.current; }
	EOF;

// Rule States
ruleStates returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStatesAccess().getStatesAction_0(),
					$current);
			}
		)
		(
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatesAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatesAccess().getStateStateParserRuleCall_1_1_0());
					}
					lv_state_2_0=ruleState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatesRule());
						}
						add(
							$current,
							"state",
							lv_state_2_0,
							"biochemsimulation.reactionrules.ReactionRules.State");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getStatesAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStatesAccess().getStateStateParserRuleCall_1_2_1_0());
						}
						lv_state_4_0=ruleState
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatesRule());
							}
							add(
								$current,
								"state",
								lv_state_4_0,
								"biochemsimulation.reactionrules.ReactionRules.State");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5='}'
			{
				newLeafNode(otherlv_5, grammarAccess.getStatesAccess().getRightCurlyBracketKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleSite
entryRuleSite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSiteRule()); }
	iv_ruleSite=ruleSite
	{ $current=$iv_ruleSite.current; }
	EOF;

// Rule Site
ruleSite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSiteAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSiteRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSiteAccess().getStatesStatesParserRuleCall_1_0());
				}
				lv_states_1_0=ruleStates
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSiteRule());
					}
					set(
						$current,
						"states",
						lv_states_1_0,
						"biochemsimulation.reactionrules.ReactionRules.States");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSites
entryRuleSites returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSitesRule()); }
	iv_ruleSites=ruleSites
	{ $current=$iv_ruleSites.current; }
	EOF;

// Rule Sites
ruleSites returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSitesAccess().getSitesAction_0(),
					$current);
			}
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getSitesAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSitesAccess().getSitesSiteParserRuleCall_1_1_0());
					}
					lv_sites_2_0=ruleSite
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSitesRule());
						}
						add(
							$current,
							"sites",
							lv_sites_2_0,
							"biochemsimulation.reactionrules.ReactionRules.Site");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSitesAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSitesAccess().getSitesSiteParserRuleCall_1_2_1_0());
						}
						lv_sites_4_0=ruleSite
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSitesRule());
							}
							add(
								$current,
								"sites",
								lv_sites_4_0,
								"biochemsimulation.reactionrules.ReactionRules.Site");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getSitesAccess().getRightParenthesisKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleAgent
entryRuleAgent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentRule()); }
	iv_ruleAgent=ruleAgent
	{ $current=$iv_ruleAgent.current; }
	EOF;

// Rule Agent
ruleAgent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='agent'
		{
			newLeafNode(otherlv_0, grammarAccess.getAgentAccess().getAgentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentAccess().getSitesSitesParserRuleCall_2_0());
				}
				lv_sites_2_0=ruleSites
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentRule());
					}
					set(
						$current,
						"sites",
						lv_sites_2_0,
						"biochemsimulation.reactionrules.ReactionRules.Sites");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePatternVariable
entryRulePatternVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternVariableRule()); }
	iv_rulePatternVariable=rulePatternVariable
	{ $current=$iv_rulePatternVariable.current; }
	EOF;

// Rule PatternVariable
rulePatternVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternVariableAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPatternVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getPatternVariableAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternVariableAccess().getPatternPatternParserRuleCall_3_0());
				}
				lv_pattern_3_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternVariableRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_3_0,
						"biochemsimulation.reactionrules.ReactionRules.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArithmeticVariable
entryRuleArithmeticVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticVariableRule()); }
	iv_ruleArithmeticVariable=ruleArithmeticVariable
	{ $current=$iv_ruleArithmeticVariable.current; }
	EOF;

// Rule ArithmeticVariable
ruleArithmeticVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getArithmeticVariableAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getArithmeticVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArithmeticVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getArithmeticVariableAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticVariableAccess().getValueArithmeticValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleArithmeticValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticVariableRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"biochemsimulation.reactionrules.ReactionRules.ArithmeticValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAccess().getPatternVariableParserRuleCall_0());
		}
		this_PatternVariable_0=rulePatternVariable
		{
			$current = $this_PatternVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableAccess().getArithmeticVariableParserRuleCall_1());
		}
		this_ArithmeticVariable_1=ruleArithmeticVariable
		{
			$current = $this_ArithmeticVariable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSemiLink
entryRuleSemiLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSemiLinkRule()); }
	iv_ruleSemiLink=ruleSemiLink
	{ $current=$iv_ruleSemiLink.current; }
	EOF;

// Rule SemiLink
ruleSemiLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSemiLinkAccess().getSemiLinkAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_SEMI_LINK
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSemiLinkAccess().getNameSEMI_LINKTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSemiLinkRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"biochemsimulation.reactionrules.ReactionRules.SEMI_LINK");
				}
			)
		)
	)
;

// Entry rule entryRuleFreeLink
entryRuleFreeLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFreeLinkRule()); }
	iv_ruleFreeLink=ruleFreeLink
	{ $current=$iv_ruleFreeLink.current; }
	EOF;

// Rule FreeLink
ruleFreeLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFreeLinkAccess().getFreeLinkAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_FREE_LINK
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFreeLinkAccess().getNameFREE_LINKTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFreeLinkRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"biochemsimulation.reactionrules.ReactionRules.FREE_LINK");
				}
			)
		)
	)
;

// Entry rule entryRuleWhatEver
entryRuleWhatEver returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhatEverRule()); }
	iv_ruleWhatEver=ruleWhatEver
	{ $current=$iv_ruleWhatEver.current; }
	EOF;

// Rule WhatEver
ruleWhatEver returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhatEverAccess().getWhatEverAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_WHATEVER_LINK
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWhatEverAccess().getNameWHATEVER_LINKTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWhatEverRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"biochemsimulation.reactionrules.ReactionRules.WHATEVER_LINK");
				}
			)
		)
	)
;

// Entry rule entryRuleLimitLink
entryRuleLimitLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLimitLinkRule()); }
	iv_ruleLimitLink=ruleLimitLink
	{ $current=$iv_ruleLimitLink.current; }
	EOF;

// Rule LimitLink
ruleLimitLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLimitLinkAccess().getLimitLinkAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLimitLinkAccess().getStateUnsignedIntegerParserRuleCall_1_0());
				}
				lv_state_1_0=ruleUnsignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLimitLinkRule());
					}
					set(
						$current,
						"state",
						lv_state_1_0,
						"biochemsimulation.reactionrules.ReactionRules.UnsignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExactLinkAgent
entryRuleExactLinkAgent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactLinkAgentRule()); }
	iv_ruleExactLinkAgent=ruleExactLinkAgent
	{ $current=$iv_ruleExactLinkAgent.current; }
	EOF;

// Rule ExactLinkAgent
ruleExactLinkAgent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExactLinkAgentAccess().getExactLinkAgentAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExactLinkAgentRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getExactLinkAgentAccess().getAgentAgentCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleExactLinkSite
entryRuleExactLinkSite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactLinkSiteRule()); }
	iv_ruleExactLinkSite=ruleExactLinkSite
	{ $current=$iv_ruleExactLinkSite.current; }
	EOF;

// Rule ExactLinkSite
ruleExactLinkSite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExactLinkSiteAccess().getExactLinkSiteAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExactLinkSiteRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getExactLinkSiteAccess().getSiteSiteCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleExactLink
entryRuleExactLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactLinkRule()); }
	iv_ruleExactLink=ruleExactLink
	{ $current=$iv_ruleExactLink.current; }
	EOF;

// Rule ExactLink
ruleExactLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExactLinkAccess().getExactLinkAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExactLinkAccess().getLinkAgentExactLinkAgentParserRuleCall_1_0());
				}
				lv_linkAgent_1_0=ruleExactLinkAgent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExactLinkRule());
					}
					set(
						$current,
						"linkAgent",
						lv_linkAgent_1_0,
						"biochemsimulation.reactionrules.ReactionRules.ExactLinkAgent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getExactLinkAccess().getFullStopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExactLinkAccess().getLinkSiteExactLinkSiteParserRuleCall_3_0());
				}
				lv_linkSite_3_0=ruleExactLinkSite
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExactLinkRule());
					}
					set(
						$current,
						"linkSite",
						lv_linkSite_3_0,
						"biochemsimulation.reactionrules.ReactionRules.ExactLinkSite");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSiteState
entryRuleSiteState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSiteStateRule()); }
	iv_ruleSiteState=ruleSiteState
	{ $current=$iv_ruleSiteState.current; }
	EOF;

// Rule SiteState
ruleSiteState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSiteStateAccess().getSiteStateAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSiteStateRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSiteStateAccess().getStateStateCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleLinkState
entryRuleLinkState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinkStateRule()); }
	iv_ruleLinkState=ruleLinkState
	{ $current=$iv_ruleLinkState.current; }
	EOF;

// Rule LinkState
ruleLinkState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLinkStateAccess().getLinkStateAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLinkStateAccess().getLinkStateSemiLinkParserRuleCall_1_0_0());
					}
					lv_linkState_1_1=ruleSemiLink
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinkStateRule());
						}
						set(
							$current,
							"linkState",
							lv_linkState_1_1,
							"biochemsimulation.reactionrules.ReactionRules.SemiLink");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLinkStateAccess().getLinkStateFreeLinkParserRuleCall_1_0_1());
					}
					lv_linkState_1_2=ruleFreeLink
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinkStateRule());
						}
						set(
							$current,
							"linkState",
							lv_linkState_1_2,
							"biochemsimulation.reactionrules.ReactionRules.FreeLink");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLinkStateAccess().getLinkStateExactLinkParserRuleCall_1_0_2());
					}
					lv_linkState_1_3=ruleExactLink
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinkStateRule());
						}
						set(
							$current,
							"linkState",
							lv_linkState_1_3,
							"biochemsimulation.reactionrules.ReactionRules.ExactLink");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLinkStateAccess().getLinkStateLimitLinkParserRuleCall_1_0_3());
					}
					lv_linkState_1_4=ruleLimitLink
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinkStateRule());
						}
						set(
							$current,
							"linkState",
							lv_linkState_1_4,
							"biochemsimulation.reactionrules.ReactionRules.LimitLink");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLinkStateAccess().getLinkStateWhatEverParserRuleCall_1_0_4());
					}
					lv_linkState_1_5=ruleWhatEver
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinkStateRule());
						}
						set(
							$current,
							"linkState",
							lv_linkState_1_5,
							"biochemsimulation.reactionrules.ReactionRules.WhatEver");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSitePattern
entryRuleSitePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSitePatternRule()); }
	iv_ruleSitePattern=ruleSitePattern
	{ $current=$iv_ruleSitePattern.current; }
	EOF;

// Rule SitePattern
ruleSitePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSitePatternAccess().getSitePatternAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSitePatternRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSitePatternAccess().getSiteSiteCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getSitePatternAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSitePatternAccess().getStateSiteStateParserRuleCall_2_1_0());
					}
					lv_state_3_0=ruleSiteState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSitePatternRule());
						}
						set(
							$current,
							"state",
							lv_state_3_0,
							"biochemsimulation.reactionrules.ReactionRules.SiteState");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getSitePatternAccess().getRightCurlyBracketKeyword_2_2());
			}
		)?
		(
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getSitePatternAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSitePatternAccess().getLinkStateLinkStateParserRuleCall_3_1_0());
					}
					lv_linkState_6_0=ruleLinkState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSitePatternRule());
						}
						set(
							$current,
							"linkState",
							lv_linkState_6_0,
							"biochemsimulation.reactionrules.ReactionRules.LinkState");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getSitePatternAccess().getRightSquareBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleSitePatterns
entryRuleSitePatterns returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSitePatternsRule()); }
	iv_ruleSitePatterns=ruleSitePatterns
	{ $current=$iv_ruleSitePatterns.current; }
	EOF;

// Rule SitePatterns
ruleSitePatterns returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSitePatternsAccess().getSitePatternsAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSitePatternsAccess().getSitePatternsSitePatternParserRuleCall_1_0_0());
					}
					lv_sitePatterns_1_0=ruleSitePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSitePatternsRule());
						}
						add(
							$current,
							"sitePatterns",
							lv_sitePatterns_1_0,
							"biochemsimulation.reactionrules.ReactionRules.SitePattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getSitePatternsAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSitePatternsAccess().getSitePatternsSitePatternParserRuleCall_1_1_1_0());
						}
						lv_sitePatterns_3_0=ruleSitePattern
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSitePatternsRule());
							}
							add(
								$current,
								"sitePatterns",
								lv_sitePatterns_3_0,
								"biochemsimulation.reactionrules.ReactionRules.SitePattern");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleAgentPattern
entryRuleAgentPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentPatternRule()); }
	iv_ruleAgentPattern=ruleAgentPattern
	{ $current=$iv_ruleAgentPattern.current; }
	EOF;

// Rule AgentPattern
ruleAgentPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAgentPatternAccess().getAgentPatternAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentPatternRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAgentPatternAccess().getAgentAgentCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAgentPatternAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentPatternAccess().getSitePatternsSitePatternsParserRuleCall_3_0());
				}
				lv_sitePatterns_3_0=ruleSitePatterns
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentPatternRule());
					}
					set(
						$current,
						"sitePatterns",
						lv_sitePatterns_3_0,
						"biochemsimulation.reactionrules.ReactionRules.SitePatterns");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAgentPatternAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPatternAccess().getPatternAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getAgentPatternsAgentPatternParserRuleCall_2_0_0());
					}
					lv_agentPatterns_2_0=ruleAgentPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						add(
							$current,
							"agentPatterns",
							lv_agentPatterns_2_0,
							"biochemsimulation.reactionrules.ReactionRules.AgentPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getPatternAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPatternAccess().getAgentPatternsAgentPatternParserRuleCall_2_1_1_0());
						}
						lv_agentPatterns_4_0=ruleAgentPattern
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPatternRule());
							}
							add(
								$current,
								"agentPatterns",
								lv_agentPatterns_4_0,
								"biochemsimulation.reactionrules.ReactionRules.AgentPattern");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleObservation
entryRuleObservation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObservationRule()); }
	iv_ruleObservation=ruleObservation
	{ $current=$iv_ruleObservation.current; }
	EOF;

// Rule Observation
ruleObservation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='obs'
		{
			newLeafNode(otherlv_0, grammarAccess.getObservationAccess().getObsKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObservationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObservationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObservationAccess().getObservationPatternPatternAssignmentParserRuleCall_2_0());
				}
				lv_observationPattern_2_0=rulePatternAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObservationRule());
					}
					set(
						$current,
						"observationPattern",
						lv_observationPattern_2_0,
						"biochemsimulation.reactionrules.ReactionRules.PatternAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitial
entryRuleInitial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialRule()); }
	iv_ruleInitial=ruleInitial
	{ $current=$iv_ruleInitial.current; }
	EOF;

// Rule Initial
ruleInitial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='init'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialAccess().getInitKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInitialAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getCountUnsignedIntegerParserRuleCall_2_0());
				}
				lv_count_2_0=ruleUnsignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					set(
						$current,
						"count",
						lv_count_2_0,
						"biochemsimulation.reactionrules.ReactionRules.UnsignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getInitialPatternPatternAssignmentParserRuleCall_3_0());
				}
				lv_initialPattern_3_0=rulePatternAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					set(
						$current,
						"initialPattern",
						lv_initialPattern_3_0,
						"biochemsimulation.reactionrules.ReactionRules.PatternAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssignFromPattern
entryRuleAssignFromPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignFromPatternRule()); }
	iv_ruleAssignFromPattern=ruleAssignFromPattern
	{ $current=$iv_ruleAssignFromPattern.current; }
	EOF;

// Rule AssignFromPattern
ruleAssignFromPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAssignFromPatternAccess().getPatternPatternParserRuleCall_0());
			}
			lv_pattern_0_0=rulePattern
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAssignFromPatternRule());
				}
				set(
					$current,
					"pattern",
					lv_pattern_0_0,
					"biochemsimulation.reactionrules.ReactionRules.Pattern");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAssignFromVariable
entryRuleAssignFromVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignFromVariableRule()); }
	iv_ruleAssignFromVariable=ruleAssignFromVariable
	{ $current=$iv_ruleAssignFromVariable.current; }
	EOF;

// Rule AssignFromVariable
ruleAssignFromVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAssignFromVariableRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getAssignFromVariableAccess().getPatternVarPatternVariableCrossReference_0());
			}
		)
	)
;

// Entry rule entryRulePatternAssignment
entryRulePatternAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternAssignmentRule()); }
	iv_rulePatternAssignment=rulePatternAssignment
	{ $current=$iv_rulePatternAssignment.current; }
	EOF;

// Rule PatternAssignment
rulePatternAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPatternAssignmentAccess().getAssignFromPatternParserRuleCall_0());
		}
		this_AssignFromPattern_0=ruleAssignFromPattern
		{
			$current = $this_AssignFromPattern_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPatternAssignmentAccess().getAssignFromVariableParserRuleCall_1());
		}
		this_AssignFromVariable_1=ruleAssignFromVariable
		{
			$current = $this_AssignFromVariable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRuleVariables
entryRuleRuleVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleVariablesRule()); }
	iv_ruleRuleVariables=ruleRuleVariables
	{ $current=$iv_ruleRuleVariables.current; }
	EOF;

// Rule RuleVariables
ruleRuleVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleVariablesRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getRuleVariablesAccess().getVariablesArithmeticVariableCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getRuleVariablesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleVariablesRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getRuleVariablesAccess().getVariablesArithmeticVariableCrossReference_1_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnidirectionalRule
entryRuleUnidirectionalRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnidirectionalRuleRule()); }
	iv_ruleUnidirectionalRule=ruleUnidirectionalRule
	{ $current=$iv_ruleUnidirectionalRule.current; }
	EOF;

// Rule UnidirectionalRule
ruleUnidirectionalRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnidirectionalRuleAccess().getLhsPatternAssignmentParserRuleCall_0_0());
				}
				lv_lhs_0_0=rulePatternAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnidirectionalRuleRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"biochemsimulation.reactionrules.ReactionRules.PatternAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_operator_1_0=RULE_UNI
				{
					newLeafNode(lv_operator_1_0, grammarAccess.getUnidirectionalRuleAccess().getOperatorUNITerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnidirectionalRuleRule());
					}
					setWithLastConsumed(
						$current,
						"operator",
						lv_operator_1_0,
						"biochemsimulation.reactionrules.ReactionRules.UNI");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnidirectionalRuleAccess().getRhsPatternAssignmentParserRuleCall_2_0());
				}
				lv_rhs_2_0=rulePatternAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnidirectionalRuleRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_2_0,
						"biochemsimulation.reactionrules.ReactionRules.PatternAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_AT_3=RULE_AT
		{
			newLeafNode(this_AT_3, grammarAccess.getUnidirectionalRuleAccess().getATTerminalRuleCall_3());
		}
		otherlv_4='['
		{
			newLeafNode(otherlv_4, grammarAccess.getUnidirectionalRuleAccess().getLeftSquareBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnidirectionalRuleAccess().getVariablesRuleVariablesParserRuleCall_5_0());
				}
				lv_variables_5_0=ruleRuleVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnidirectionalRuleRule());
					}
					set(
						$current,
						"variables",
						lv_variables_5_0,
						"biochemsimulation.reactionrules.ReactionRules.RuleVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getUnidirectionalRuleAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleBidirectionalRule
entryRuleBidirectionalRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBidirectionalRuleRule()); }
	iv_ruleBidirectionalRule=ruleBidirectionalRule
	{ $current=$iv_ruleBidirectionalRule.current; }
	EOF;

// Rule BidirectionalRule
ruleBidirectionalRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBidirectionalRuleAccess().getLhsPatternAssignmentParserRuleCall_0_0());
				}
				lv_lhs_0_0=rulePatternAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBidirectionalRuleRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"biochemsimulation.reactionrules.ReactionRules.PatternAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_operator_1_0=RULE_BI
				{
					newLeafNode(lv_operator_1_0, grammarAccess.getBidirectionalRuleAccess().getOperatorBITerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBidirectionalRuleRule());
					}
					setWithLastConsumed(
						$current,
						"operator",
						lv_operator_1_0,
						"biochemsimulation.reactionrules.ReactionRules.BI");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBidirectionalRuleAccess().getRhsPatternAssignmentParserRuleCall_2_0());
				}
				lv_rhs_2_0=rulePatternAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBidirectionalRuleRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_2_0,
						"biochemsimulation.reactionrules.ReactionRules.PatternAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_AT_3=RULE_AT
		{
			newLeafNode(this_AT_3, grammarAccess.getBidirectionalRuleAccess().getATTerminalRuleCall_3());
		}
		otherlv_4='['
		{
			newLeafNode(otherlv_4, grammarAccess.getBidirectionalRuleAccess().getLeftSquareBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBidirectionalRuleAccess().getVariablesRuleVariablesParserRuleCall_5_0());
				}
				lv_variables_5_0=ruleRuleVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBidirectionalRuleRule());
					}
					set(
						$current,
						"variables",
						lv_variables_5_0,
						"biochemsimulation.reactionrules.ReactionRules.RuleVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getBidirectionalRuleAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleRuleBody
entryRuleRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleBodyRule()); }
	iv_ruleRuleBody=ruleRuleBody
	{ $current=$iv_ruleRuleBody.current; }
	EOF;

// Rule RuleBody
ruleRuleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleBodyAccess().getUnidirectionalRuleParserRuleCall_0());
		}
		this_UnidirectionalRule_0=ruleUnidirectionalRule
		{
			$current = $this_UnidirectionalRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleBodyAccess().getBidirectionalRuleParserRuleCall_1());
		}
		this_BidirectionalRule_1=ruleBidirectionalRule
		{
			$current = $this_BidirectionalRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getRuleRuleBodyParserRuleCall_2_0());
				}
				lv_rule_2_0=ruleRuleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"rule",
						lv_rule_2_0,
						"biochemsimulation.reactionrules.ReactionRules.RuleBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_AT : '@';

RULE_BI : '<->';

RULE_UNI : '->';

RULE_SEMI_LINK : 'semi';

RULE_FREE_LINK : 'free';

RULE_WHATEVER_LINK : '?';

RULE_EXPONENT : 'E';

RULE_INT : '0'..'9' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
