/*
 * generated by Xtext 2.12.0
 */
grammar InternalReactionRules;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package biochemsimulation.reactionrules.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package biochemsimulation.reactionrules.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import biochemsimulation.reactionrules.services.ReactionRulesGrammarAccess;

}

@parser::members {

 	private ReactionRulesGrammarAccess grammarAccess;

    public InternalReactionRulesParser(TokenStream input, ReactionRulesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ReactionRuleModel";
   	}

   	@Override
   	protected ReactionRulesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleReactionRuleModel
entryRuleReactionRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionRuleModelRule()); }
	iv_ruleReactionRuleModel=ruleReactionRuleModel
	{ $current=$iv_ruleReactionRuleModel.current; }
	EOF;

// Rule ReactionRuleModel
ruleReactionRuleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getReactionRuleModelAccess().getReactionPropertiesReactionPropertyParserRuleCall_0());
			}
			lv_reactionProperties_0_0=ruleReactionProperty
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getReactionRuleModelRule());
				}
				add(
					$current,
					"reactionProperties",
					lv_reactionProperties_0_0,
					"biochemsimulation.reactionrules.ReactionRules.ReactionProperty");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleReactionProperty
entryRuleReactionProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionPropertyRule()); }
	iv_ruleReactionProperty=ruleReactionProperty
	{ $current=$iv_ruleReactionProperty.current; }
	EOF;

// Rule ReactionProperty
ruleReactionProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getAgentParserRuleCall_0());
		}
		this_Agent_0=ruleAgent
		{
			$current = $this_Agent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getVariableParserRuleCall_1());
		}
		this_Variable_1=ruleVariable
		{
			$current = $this_Variable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getObservationParserRuleCall_2());
		}
		this_Observation_2=ruleObservation
		{
			$current = $this_Observation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getInitialParserRuleCall_3());
		}
		this_Initial_3=ruleInitial
		{
			$current = $this_Initial_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReactionPropertyAccess().getRuleParserRuleCall_4());
		}
		this_Rule_4=ruleRule
		{
			$current = $this_Rule_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current.getText(); }
	EOF;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleBigInteger
entryRuleBigInteger returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBigIntegerRule()); }
	iv_ruleBigInteger=ruleBigInteger
	{ $current=$iv_ruleBigInteger.current.getText(); }
	EOF;

// Rule BigInteger
ruleBigInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getBigIntegerAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStateRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleStates
entryRuleStates returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatesRule()); }
	iv_ruleStates=ruleStates
	{ $current=$iv_ruleStates.current; }
	EOF;

// Rule States
ruleStates returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStatesAccess().getStatesAction_0(),
					$current);
			}
		)
		(
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatesAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatesAccess().getStateStateParserRuleCall_1_1_0());
					}
					lv_state_2_0=ruleState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatesRule());
						}
						add(
							$current,
							"state",
							lv_state_2_0,
							"biochemsimulation.reactionrules.ReactionRules.State");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getStatesAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStatesAccess().getStateStateParserRuleCall_1_2_1_0());
						}
						lv_state_4_0=ruleState
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatesRule());
							}
							add(
								$current,
								"state",
								lv_state_4_0,
								"biochemsimulation.reactionrules.ReactionRules.State");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5='}'
			{
				newLeafNode(otherlv_5, grammarAccess.getStatesAccess().getRightCurlyBracketKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleSite
entryRuleSite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSiteRule()); }
	iv_ruleSite=ruleSite
	{ $current=$iv_ruleSite.current; }
	EOF;

// Rule Site
ruleSite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSiteAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSiteRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSiteAccess().getStatesStatesParserRuleCall_1_0());
				}
				lv_states_1_0=ruleStates
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSiteRule());
					}
					set(
						$current,
						"states",
						lv_states_1_0,
						"biochemsimulation.reactionrules.ReactionRules.States");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSites
entryRuleSites returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSitesRule()); }
	iv_ruleSites=ruleSites
	{ $current=$iv_ruleSites.current; }
	EOF;

// Rule Sites
ruleSites returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSitesAccess().getSitesAction_0(),
					$current);
			}
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getSitesAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSitesAccess().getSitesSiteParserRuleCall_1_1_0());
					}
					lv_sites_2_0=ruleSite
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSitesRule());
						}
						add(
							$current,
							"sites",
							lv_sites_2_0,
							"biochemsimulation.reactionrules.ReactionRules.Site");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSitesAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSitesAccess().getSitesSiteParserRuleCall_1_2_1_0());
						}
						lv_sites_4_0=ruleSite
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSitesRule());
							}
							add(
								$current,
								"sites",
								lv_sites_4_0,
								"biochemsimulation.reactionrules.ReactionRules.Site");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getSitesAccess().getRightParenthesisKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleAgent
entryRuleAgent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentRule()); }
	iv_ruleAgent=ruleAgent
	{ $current=$iv_ruleAgent.current; }
	EOF;

// Rule Agent
ruleAgent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Agent'
		{
			newLeafNode(otherlv_0, grammarAccess.getAgentAccess().getAgentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAgentAccess().getSitesSitesParserRuleCall_2_0());
				}
				lv_sites_2_0=ruleSites
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAgentRule());
					}
					set(
						$current,
						"sites",
						lv_sites_2_0,
						"biochemsimulation.reactionrules.ReactionRules.Sites");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Variable'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVariableKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getValueFloatParserRuleCall_3_0());
				}
				lv_value_3_0=ruleFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"biochemsimulation.reactionrules.ReactionRules.Float");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLinkState
entryRuleLinkState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinkStateRule()); }
	iv_ruleLinkState=ruleLinkState
	{ $current=$iv_ruleLinkState.current; }
	EOF;

// Rule LinkState
ruleLinkState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLinkStateAccess().getSemiLinkParserRuleCall_0());
		}
		this_SemiLink_0=ruleSemiLink
		{
			$current = $this_SemiLink_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLinkStateAccess().getFreeLinkParserRuleCall_1());
		}
		this_FreeLink_1=ruleFreeLink
		{
			$current = $this_FreeLink_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLinkStateAccess().getExactLinkParserRuleCall_2());
		}
		this_ExactLink_2=ruleExactLink
		{
			$current = $this_ExactLink_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLinkStateAccess().getLimitLinkParserRuleCall_3());
		}
		this_LimitLink_3=ruleLimitLink
		{
			$current = $this_LimitLink_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSemiLink
entryRuleSemiLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSemiLinkRule()); }
	iv_ruleSemiLink=ruleSemiLink
	{ $current=$iv_ruleSemiLink.current; }
	EOF;

// Rule SemiLink
ruleSemiLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSemiLinkAccess().getSemiLinkAction_0(),
					$current);
			}
		)
		otherlv_1='Semi-Link'
		{
			newLeafNode(otherlv_1, grammarAccess.getSemiLinkAccess().getSemiLinkKeyword_1());
		}
	)
;

// Entry rule entryRuleFreeLink
entryRuleFreeLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFreeLinkRule()); }
	iv_ruleFreeLink=ruleFreeLink
	{ $current=$iv_ruleFreeLink.current; }
	EOF;

// Rule FreeLink
ruleFreeLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFreeLinkAccess().getFreeLinkAction_0(),
					$current);
			}
		)
		otherlv_1='Free'
		{
			newLeafNode(otherlv_1, grammarAccess.getFreeLinkAccess().getFreeKeyword_1());
		}
	)
;

// Entry rule entryRuleLimitLink
entryRuleLimitLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLimitLinkRule()); }
	iv_ruleLimitLink=ruleLimitLink
	{ $current=$iv_ruleLimitLink.current; }
	EOF;

// Rule LimitLink
ruleLimitLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLimitLinkAccess().getLimitLinkAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLimitLinkAccess().getStateBigIntegerParserRuleCall_1_0());
				}
				lv_state_1_0=ruleBigInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLimitLinkRule());
					}
					set(
						$current,
						"state",
						lv_state_1_0,
						"biochemsimulation.reactionrules.ReactionRules.BigInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExactLink
entryRuleExactLink returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactLinkRule()); }
	iv_ruleExactLink=ruleExactLink
	{ $current=$iv_ruleExactLink.current; }
	EOF;

// Rule ExactLink
ruleExactLink returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExactLinkAccess().getExactLinkAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExactLinkRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getExactLinkAccess().getSiteSiteCrossReference_1_0());
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getExactLinkAccess().getFullStopKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExactLinkRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getExactLinkAccess().getAgentAgentCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleSitePattern
entryRuleSitePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSitePatternRule()); }
	iv_ruleSitePattern=ruleSitePattern
	{ $current=$iv_ruleSitePattern.current; }
	EOF;

// Rule SitePattern
ruleSitePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSitePatternAccess().getSitePatternAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSitePatternRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSitePatternAccess().getSiteSiteCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getSitePatternAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSitePatternRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getSitePatternAccess().getStateStateCrossReference_2_1_0());
					}
				)
			)
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getSitePatternAccess().getRightCurlyBracketKeyword_2_2());
			}
		)?
		(
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getSitePatternAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSitePatternAccess().getLinkStateLinkStateParserRuleCall_3_1_0());
					}
					lv_linkState_6_0=ruleLinkState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSitePatternRule());
						}
						set(
							$current,
							"linkState",
							lv_linkState_6_0,
							"biochemsimulation.reactionrules.ReactionRules.LinkState");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getSitePatternAccess().getRightSquareBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleAgentPattern
entryRuleAgentPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAgentPatternRule()); }
	iv_ruleAgentPattern=ruleAgentPattern
	{ $current=$iv_ruleAgentPattern.current; }
	EOF;

// Rule AgentPattern
ruleAgentPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAgentPatternAccess().getAgentPatternAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAgentPatternRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAgentPatternAccess().getAgentAgentCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAgentPatternAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAgentPatternAccess().getSitePatternsSitePatternParserRuleCall_3_0_0());
					}
					lv_sitePatterns_3_0=ruleSitePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAgentPatternRule());
						}
						add(
							$current,
							"sitePatterns",
							lv_sitePatterns_3_0,
							"biochemsimulation.reactionrules.ReactionRules.SitePattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAgentPatternAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAgentPatternAccess().getSitePatternsSitePatternParserRuleCall_3_1_1_0());
						}
						lv_sitePatterns_5_0=ruleSitePattern
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAgentPatternRule());
							}
							add(
								$current,
								"sitePatterns",
								lv_sitePatterns_5_0,
								"biochemsimulation.reactionrules.ReactionRules.SitePattern");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAgentPatternAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPatternAccess().getPatternAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getAgentPatternsAgentPatternParserRuleCall_1_0_0());
					}
					lv_agentPatterns_1_0=ruleAgentPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						add(
							$current,
							"agentPatterns",
							lv_agentPatterns_1_0,
							"biochemsimulation.reactionrules.ReactionRules.AgentPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getPatternAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPatternAccess().getAgentPatternsAgentPatternParserRuleCall_1_1_1_0());
						}
						lv_agentPatterns_3_0=ruleAgentPattern
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPatternRule());
							}
							add(
								$current,
								"agentPatterns",
								lv_agentPatterns_3_0,
								"biochemsimulation.reactionrules.ReactionRules.AgentPattern");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleObservation
entryRuleObservation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObservationRule()); }
	iv_ruleObservation=ruleObservation
	{ $current=$iv_ruleObservation.current; }
	EOF;

// Rule Observation
ruleObservation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Observation'
		{
			newLeafNode(otherlv_0, grammarAccess.getObservationAccess().getObservationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObservationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObservationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObservationAccess().getObservationPatternPatternParserRuleCall_2_0());
				}
				lv_observationPattern_2_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObservationRule());
					}
					set(
						$current,
						"observationPattern",
						lv_observationPattern_2_0,
						"biochemsimulation.reactionrules.ReactionRules.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitial
entryRuleInitial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialRule()); }
	iv_ruleInitial=ruleInitial
	{ $current=$iv_ruleInitial.current; }
	EOF;

// Rule Initial
ruleInitial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Initial'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialAccess().getInitialKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInitialAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getCountBigIntegerParserRuleCall_2_0());
				}
				lv_count_2_0=ruleBigInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					set(
						$current,
						"count",
						lv_count_2_0,
						"biochemsimulation.reactionrules.ReactionRules.BigInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getInitialPatternPatternParserRuleCall_3_0());
				}
				lv_initialPattern_3_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					set(
						$current,
						"initialPattern",
						lv_initialPattern_3_0,
						"biochemsimulation.reactionrules.ReactionRules.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getLhsPatternParserRuleCall_2_0());
				}
				lv_lhs_2_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_2_0,
						"biochemsimulation.reactionrules.ReactionRules.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='uni'
			{
				newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getUniKeyword_3_0());
			}
			    |
			otherlv_4='bi'
			{
				newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getBiKeyword_3_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getRhsPatternParserRuleCall_4_0());
				}
				lv_rhs_5_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_5_0,
						"biochemsimulation.reactionrules.ReactionRules.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='at'
		{
			newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getAtKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getVariablesVariableCrossReference_6_0());
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getRuleAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getRuleAccess().getVariablesVariableCrossReference_7_1_0());
					}
				)
			)
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
