/**
 * generated by Xtext 2.12.0
 */
package biochemsimulation.reactionrules.reactionRules.impl;

import biochemsimulation.reactionrules.reactionRules.ExactLink;
import biochemsimulation.reactionrules.reactionRules.ExactLinkAgent;
import biochemsimulation.reactionrules.reactionRules.ExactLinkSite;
import biochemsimulation.reactionrules.reactionRules.ReactionRulesPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exact Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link biochemsimulation.reactionrules.reactionRules.impl.ExactLinkImpl#getLinkAgent <em>Link Agent</em>}</li>
 *   <li>{@link biochemsimulation.reactionrules.reactionRules.impl.ExactLinkImpl#getLinkSite <em>Link Site</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExactLinkImpl extends LinkStateImpl implements ExactLink
{
  /**
   * The cached value of the '{@link #getLinkAgent() <em>Link Agent</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkAgent()
   * @generated
   * @ordered
   */
  protected ExactLinkAgent linkAgent;

  /**
   * The cached value of the '{@link #getLinkSite() <em>Link Site</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkSite()
   * @generated
   * @ordered
   */
  protected ExactLinkSite linkSite;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExactLinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReactionRulesPackage.Literals.EXACT_LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExactLinkAgent getLinkAgent()
  {
    return linkAgent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLinkAgent(ExactLinkAgent newLinkAgent, NotificationChain msgs)
  {
    ExactLinkAgent oldLinkAgent = linkAgent;
    linkAgent = newLinkAgent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReactionRulesPackage.EXACT_LINK__LINK_AGENT, oldLinkAgent, newLinkAgent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLinkAgent(ExactLinkAgent newLinkAgent)
  {
    if (newLinkAgent != linkAgent)
    {
      NotificationChain msgs = null;
      if (linkAgent != null)
        msgs = ((InternalEObject)linkAgent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReactionRulesPackage.EXACT_LINK__LINK_AGENT, null, msgs);
      if (newLinkAgent != null)
        msgs = ((InternalEObject)newLinkAgent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReactionRulesPackage.EXACT_LINK__LINK_AGENT, null, msgs);
      msgs = basicSetLinkAgent(newLinkAgent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactionRulesPackage.EXACT_LINK__LINK_AGENT, newLinkAgent, newLinkAgent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExactLinkSite getLinkSite()
  {
    return linkSite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLinkSite(ExactLinkSite newLinkSite, NotificationChain msgs)
  {
    ExactLinkSite oldLinkSite = linkSite;
    linkSite = newLinkSite;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReactionRulesPackage.EXACT_LINK__LINK_SITE, oldLinkSite, newLinkSite);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLinkSite(ExactLinkSite newLinkSite)
  {
    if (newLinkSite != linkSite)
    {
      NotificationChain msgs = null;
      if (linkSite != null)
        msgs = ((InternalEObject)linkSite).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReactionRulesPackage.EXACT_LINK__LINK_SITE, null, msgs);
      if (newLinkSite != null)
        msgs = ((InternalEObject)newLinkSite).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReactionRulesPackage.EXACT_LINK__LINK_SITE, null, msgs);
      msgs = basicSetLinkSite(newLinkSite, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReactionRulesPackage.EXACT_LINK__LINK_SITE, newLinkSite, newLinkSite));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReactionRulesPackage.EXACT_LINK__LINK_AGENT:
        return basicSetLinkAgent(null, msgs);
      case ReactionRulesPackage.EXACT_LINK__LINK_SITE:
        return basicSetLinkSite(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReactionRulesPackage.EXACT_LINK__LINK_AGENT:
        return getLinkAgent();
      case ReactionRulesPackage.EXACT_LINK__LINK_SITE:
        return getLinkSite();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReactionRulesPackage.EXACT_LINK__LINK_AGENT:
        setLinkAgent((ExactLinkAgent)newValue);
        return;
      case ReactionRulesPackage.EXACT_LINK__LINK_SITE:
        setLinkSite((ExactLinkSite)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReactionRulesPackage.EXACT_LINK__LINK_AGENT:
        setLinkAgent((ExactLinkAgent)null);
        return;
      case ReactionRulesPackage.EXACT_LINK__LINK_SITE:
        setLinkSite((ExactLinkSite)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReactionRulesPackage.EXACT_LINK__LINK_AGENT:
        return linkAgent != null;
      case ReactionRulesPackage.EXACT_LINK__LINK_SITE:
        return linkSite != null;
    }
    return super.eIsSet(featureID);
  }

} //ExactLinkImpl
