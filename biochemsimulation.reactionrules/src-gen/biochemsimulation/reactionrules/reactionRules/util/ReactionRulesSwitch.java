/**
 * generated by Xtext 2.16.0
 */
package biochemsimulation.reactionrules.reactionRules.util;

import biochemsimulation.reactionrules.reactionRules.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see biochemsimulation.reactionrules.reactionRules.ReactionRulesPackage
 * @generated
 */
public class ReactionRulesSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ReactionRulesPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReactionRulesSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ReactionRulesPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ReactionRulesPackage.REACTION_RULE_MODEL:
      {
        ReactionRuleModel reactionRuleModel = (ReactionRuleModel)theEObject;
        T result = caseReactionRuleModel(reactionRuleModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.REACTION_PROPERTY:
      {
        ReactionProperty reactionProperty = (ReactionProperty)theEObject;
        T result = caseReactionProperty(reactionProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.ARITHMETIC_VALUE:
      {
        ArithmeticValue arithmeticValue = (ArithmeticValue)theEObject;
        T result = caseArithmeticValue(arithmeticValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.STATE:
      {
        State state = (State)theEObject;
        T result = caseState(state);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.STATES:
      {
        States states = (States)theEObject;
        T result = caseStates(states);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.SITE:
      {
        Site site = (Site)theEObject;
        T result = caseSite(site);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.SITES:
      {
        Sites sites = (Sites)theEObject;
        T result = caseSites(sites);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.AGENT:
      {
        Agent agent = (Agent)theEObject;
        T result = caseAgent(agent);
        if (result == null) result = caseReactionProperty(agent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.PATTERN_VARIABLE:
      {
        PatternVariable patternVariable = (PatternVariable)theEObject;
        T result = casePatternVariable(patternVariable);
        if (result == null) result = caseVariable(patternVariable);
        if (result == null) result = caseReactionProperty(patternVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.ARITHMETIC_VARIABLE:
      {
        ArithmeticVariable arithmeticVariable = (ArithmeticVariable)theEObject;
        T result = caseArithmeticVariable(arithmeticVariable);
        if (result == null) result = caseVariable(arithmeticVariable);
        if (result == null) result = caseReactionProperty(arithmeticVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = caseReactionProperty(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.LINK_STATE:
      {
        LinkState linkState = (LinkState)theEObject;
        T result = caseLinkState(linkState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.BOUND_ANY_OF_TYPE_LINK_AGENT:
      {
        BoundAnyOfTypeLinkAgent boundAnyOfTypeLinkAgent = (BoundAnyOfTypeLinkAgent)theEObject;
        T result = caseBoundAnyOfTypeLinkAgent(boundAnyOfTypeLinkAgent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.BOUND_ANY_OF_TYPE_LINK_SITE:
      {
        BoundAnyOfTypeLinkSite boundAnyOfTypeLinkSite = (BoundAnyOfTypeLinkSite)theEObject;
        T result = caseBoundAnyOfTypeLinkSite(boundAnyOfTypeLinkSite);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.SITE_STATE:
      {
        SiteState siteState = (SiteState)theEObject;
        T result = caseSiteState(siteState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.MULTI_LINK_STATE:
      {
        MultiLinkState multiLinkState = (MultiLinkState)theEObject;
        T result = caseMultiLinkState(multiLinkState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.SITE_PATTERN:
      {
        SitePattern sitePattern = (SitePattern)theEObject;
        T result = caseSitePattern(sitePattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.SITE_PATTERNS:
      {
        SitePatterns sitePatterns = (SitePatterns)theEObject;
        T result = caseSitePatterns(sitePatterns);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.VALID_AGENT_PATTERN:
      {
        ValidAgentPattern validAgentPattern = (ValidAgentPattern)theEObject;
        T result = caseValidAgentPattern(validAgentPattern);
        if (result == null) result = caseAgentPattern(validAgentPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.VOID_AGENT_PATTERN:
      {
        VoidAgentPattern voidAgentPattern = (VoidAgentPattern)theEObject;
        T result = caseVoidAgentPattern(voidAgentPattern);
        if (result == null) result = caseAgentPattern(voidAgentPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.AGENT_PATTERN:
      {
        AgentPattern agentPattern = (AgentPattern)theEObject;
        T result = caseAgentPattern(agentPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.OBSERVATION:
      {
        Observation observation = (Observation)theEObject;
        T result = caseObservation(observation);
        if (result == null) result = caseReactionProperty(observation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.NUMERIC_FROM_LITERAL:
      {
        NumericFromLiteral numericFromLiteral = (NumericFromLiteral)theEObject;
        T result = caseNumericFromLiteral(numericFromLiteral);
        if (result == null) result = caseNumericAssignment(numericFromLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.NUMERIC_FROM_VARIABLE:
      {
        NumericFromVariable numericFromVariable = (NumericFromVariable)theEObject;
        T result = caseNumericFromVariable(numericFromVariable);
        if (result == null) result = caseNumericAssignment(numericFromVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.NUMERIC_ASSIGNMENT:
      {
        NumericAssignment numericAssignment = (NumericAssignment)theEObject;
        T result = caseNumericAssignment(numericAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.INITIAL:
      {
        Initial initial = (Initial)theEObject;
        T result = caseInitial(initial);
        if (result == null) result = caseReactionProperty(initial);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.ASSIGN_FROM_PATTERN:
      {
        AssignFromPattern assignFromPattern = (AssignFromPattern)theEObject;
        T result = caseAssignFromPattern(assignFromPattern);
        if (result == null) result = casePatternAssignment(assignFromPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.ASSIGN_FROM_VARIABLE:
      {
        AssignFromVariable assignFromVariable = (AssignFromVariable)theEObject;
        T result = caseAssignFromVariable(assignFromVariable);
        if (result == null) result = casePatternAssignment(assignFromVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.PATTERN_ASSIGNMENT:
      {
        PatternAssignment patternAssignment = (PatternAssignment)theEObject;
        T result = casePatternAssignment(patternAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.RULE_VARIABLES:
      {
        RuleVariables ruleVariables = (RuleVariables)theEObject;
        T result = caseRuleVariables(ruleVariables);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.RULE_BODY:
      {
        RuleBody ruleBody = (RuleBody)theEObject;
        T result = caseRuleBody(ruleBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.RULE:
      {
        Rule rule = (Rule)theEObject;
        T result = caseRule(rule);
        if (result == null) result = caseReactionProperty(rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.ITERATIONS:
      {
        Iterations iterations = (Iterations)theEObject;
        T result = caseIterations(iterations);
        if (result == null) result = caseTerminationCondition(iterations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.TIME:
      {
        Time time = (Time)theEObject;
        T result = caseTime(time);
        if (result == null) result = caseTerminationCondition(time);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.POPULATION:
      {
        Population population = (Population)theEObject;
        T result = casePopulation(population);
        if (result == null) result = caseTerminationCondition(population);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.TERMINATION_CONDITION:
      {
        TerminationCondition terminationCondition = (TerminationCondition)theEObject;
        T result = caseTerminationCondition(terminationCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.TERMINATE:
      {
        Terminate terminate = (Terminate)theEObject;
        T result = caseTerminate(terminate);
        if (result == null) result = caseReactionProperty(terminate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.SINGLE_SITE:
      {
        SingleSite singleSite = (SingleSite)theEObject;
        T result = caseSingleSite(singleSite);
        if (result == null) result = caseSite(singleSite);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.MULTI_SITE:
      {
        MultiSite multiSite = (MultiSite)theEObject;
        T result = caseMultiSite(multiSite);
        if (result == null) result = caseSite(multiSite);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.BOUND_ANY_LINK:
      {
        BoundAnyLink boundAnyLink = (BoundAnyLink)theEObject;
        T result = caseBoundAnyLink(boundAnyLink);
        if (result == null) result = caseLinkState(boundAnyLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.FREE_LINK:
      {
        FreeLink freeLink = (FreeLink)theEObject;
        T result = caseFreeLink(freeLink);
        if (result == null) result = caseLinkState(freeLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.INDEXED_FREE_LINK:
      {
        IndexedFreeLink indexedFreeLink = (IndexedFreeLink)theEObject;
        T result = caseIndexedFreeLink(indexedFreeLink);
        if (result == null) result = caseLinkState(indexedFreeLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.WHAT_EVER:
      {
        WhatEver whatEver = (WhatEver)theEObject;
        T result = caseWhatEver(whatEver);
        if (result == null) result = caseLinkState(whatEver);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.BOUND_LINK:
      {
        BoundLink boundLink = (BoundLink)theEObject;
        T result = caseBoundLink(boundLink);
        if (result == null) result = caseLinkState(boundLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.MULTI_LINK:
      {
        MultiLink multiLink = (MultiLink)theEObject;
        T result = caseMultiLink(multiLink);
        if (result == null) result = caseLinkState(multiLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.BOUND_ANY_OF_TYPE_LINK:
      {
        BoundAnyOfTypeLink boundAnyOfTypeLink = (BoundAnyOfTypeLink)theEObject;
        T result = caseBoundAnyOfTypeLink(boundAnyOfTypeLink);
        if (result == null) result = caseLinkState(boundAnyOfTypeLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.SINGLE_SITE_PATTERN:
      {
        SingleSitePattern singleSitePattern = (SingleSitePattern)theEObject;
        T result = caseSingleSitePattern(singleSitePattern);
        if (result == null) result = caseSitePattern(singleSitePattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ReactionRulesPackage.MULTI_LINK_SITE_PATTERN:
      {
        MultiLinkSitePattern multiLinkSitePattern = (MultiLinkSitePattern)theEObject;
        T result = caseMultiLinkSitePattern(multiLinkSitePattern);
        if (result == null) result = caseSitePattern(multiLinkSitePattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reaction Rule Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reaction Rule Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactionRuleModel(ReactionRuleModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reaction Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reaction Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactionProperty(ReactionProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticValue(ArithmeticValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseState(State object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>States</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>States</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStates(States object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSite(Site object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sites</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sites</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSites(Sites object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Agent</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Agent</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAgent(Agent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternVariable(PatternVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticVariable(ArithmeticVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Link State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Link State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLinkState(LinkState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bound Any Of Type Link Agent</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bound Any Of Type Link Agent</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundAnyOfTypeLinkAgent(BoundAnyOfTypeLinkAgent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bound Any Of Type Link Site</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bound Any Of Type Link Site</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundAnyOfTypeLinkSite(BoundAnyOfTypeLinkSite object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSiteState(SiteState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Link State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Link State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiLinkState(MultiLinkState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSitePattern(SitePattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Site Patterns</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Site Patterns</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSitePatterns(SitePatterns object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Valid Agent Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Valid Agent Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValidAgentPattern(ValidAgentPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Void Agent Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Void Agent Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVoidAgentPattern(VoidAgentPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Agent Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Agent Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAgentPattern(AgentPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Observation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Observation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObservation(Observation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric From Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric From Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericFromLiteral(NumericFromLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric From Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric From Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericFromVariable(NumericFromVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericAssignment(NumericAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initial</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initial</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitial(Initial object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assign From Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assign From Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignFromPattern(AssignFromPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assign From Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assign From Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignFromVariable(AssignFromVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternAssignment(PatternAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Variables</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Variables</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleVariables(RuleVariables object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleBody(RuleBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRule(Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterations(Iterations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTime(Time object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Population</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Population</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePopulation(Population object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Termination Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Termination Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminationCondition(TerminationCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Terminate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Terminate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminate(Terminate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Site</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Site</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleSite(SingleSite object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Site</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Site</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiSite(MultiSite object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bound Any Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bound Any Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundAnyLink(BoundAnyLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Free Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Free Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFreeLink(FreeLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Indexed Free Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Indexed Free Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexedFreeLink(IndexedFreeLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>What Ever</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>What Ever</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhatEver(WhatEver object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bound Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bound Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundLink(BoundLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiLink(MultiLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bound Any Of Type Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bound Any Of Type Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundAnyOfTypeLink(BoundAnyOfTypeLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Site Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Site Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleSitePattern(SingleSitePattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Link Site Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Link Site Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiLinkSitePattern(MultiLinkSitePattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ReactionRulesSwitch
