/*
 * generated by Xtext 2.12.0
 */
package biochemsimulation.reactionrules.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReactionRulesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ReactionRuleModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ReactionRuleModel");
		private final Assignment cReactionPropertiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReactionPropertiesReactionPropertyParserRuleCall_0 = (RuleCall)cReactionPropertiesAssignment.eContents().get(0);
		
		//ReactionRuleModel:
		//	reactionProperties+=ReactionProperty*;
		@Override public ParserRule getRule() { return rule; }
		
		//reactionProperties+=ReactionProperty*
		public Assignment getReactionPropertiesAssignment() { return cReactionPropertiesAssignment; }
		
		//ReactionProperty
		public RuleCall getReactionPropertiesReactionPropertyParserRuleCall_0() { return cReactionPropertiesReactionPropertyParserRuleCall_0; }
	}
	public class ReactionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ReactionProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAgentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObservationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInitialParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ReactionProperty:
		//	Agent | Variable | Observation | Initial | Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//Agent | Variable | Observation | Initial | Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Agent
		public RuleCall getAgentParserRuleCall_0() { return cAgentParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//Observation
		public RuleCall getObservationParserRuleCall_2() { return cObservationParserRuleCall_2; }
		
		//Initial
		public RuleCall getInitialParserRuleCall_3() { return cInitialParserRuleCall_3; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_4() { return cRuleParserRuleCall_4; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Float hidden():
		//	'-'? INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class ScientificFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ScientificFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cEXPONENTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//ScientificFloat hidden():
		//	'-'? INT '.' INT EXPONENT '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT '.' INT EXPONENT '-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//EXPONENT
		public RuleCall getEXPONENTTerminalRuleCall_4() { return cEXPONENTTerminalRuleCall_4; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }
	}
	public class UnsignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.UnsignedInteger");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedInteger hidden():
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class SignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.SignedInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInteger hidden():
		//	'-' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' INT
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ArithmeticTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ArithmeticType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignedIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScientificFloatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ArithmeticType:
		//	Float | UnsignedInteger | SignedInteger | ScientificFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//Float | UnsignedInteger | SignedInteger | ScientificFloat
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Float
		public RuleCall getFloatParserRuleCall_0() { return cFloatParserRuleCall_0; }
		
		//UnsignedInteger
		public RuleCall getUnsignedIntegerParserRuleCall_1() { return cUnsignedIntegerParserRuleCall_1; }
		
		//SignedInteger
		public RuleCall getSignedIntegerParserRuleCall_2() { return cSignedIntegerParserRuleCall_2; }
		
		//ScientificFloat
		public RuleCall getScientificFloatParserRuleCall_3() { return cScientificFloatParserRuleCall_3; }
	}
	public class ArithmeticValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ArithmeticValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueArithmeticTypeParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ArithmeticValue:
		//	value=ArithmeticType;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ArithmeticType
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ArithmeticType
		public RuleCall getValueArithmeticTypeParserRuleCall_0() { return cValueArithmeticTypeParserRuleCall_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//State:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.States");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_1_1_0 = (RuleCall)cStateAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cStateAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_1_2_1_0 = (RuleCall)cStateAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//States:
		//	{States} ('{' state+=State ("," state+=State)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{States} ('{' state+=State ("," state+=State)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{States}
		public Action getStatesAction_0() { return cStatesAction_0; }
		
		//('{' state+=State ("," state+=State)* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//state+=State
		public Assignment getStateAssignment_1_1() { return cStateAssignment_1_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_1_1_0() { return cStateStateParserRuleCall_1_1_0; }
		
		//("," state+=State)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//state+=State
		public Assignment getStateAssignment_1_2_1() { return cStateAssignment_1_2_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_1_2_1_0() { return cStateStateParserRuleCall_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class SiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Site");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStatesParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		
		//Site:
		//	name=ID
		//	states=States;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID states=States
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//states=States
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//States
		public RuleCall getStatesStatesParserRuleCall_1_0() { return cStatesStatesParserRuleCall_1_0; }
	}
	public class SitesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Sites");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSitesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSitesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSitesSiteParserRuleCall_1_1_0 = (RuleCall)cSitesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSitesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSitesSiteParserRuleCall_1_2_1_0 = (RuleCall)cSitesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Sites:
		//	{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{Sites}
		public Action getSitesAction_0() { return cSitesAction_0; }
		
		//('(' sites+=Site ("," sites+=Site)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//sites+=Site
		public Assignment getSitesAssignment_1_1() { return cSitesAssignment_1_1; }
		
		//Site
		public RuleCall getSitesSiteParserRuleCall_1_1_0() { return cSitesSiteParserRuleCall_1_1_0; }
		
		//("," sites+=Site)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//sites+=Site
		public Assignment getSitesAssignment_1_2_1() { return cSitesAssignment_1_2_1; }
		
		//Site
		public RuleCall getSitesSiteParserRuleCall_1_2_1_0() { return cSitesSiteParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSitesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSitesSitesParserRuleCall_2_0 = (RuleCall)cSitesAssignment_2.eContents().get(0);
		
		//Agent:
		//	'agent'
		//	name=ID
		//	sites=Sites;
		@Override public ParserRule getRule() { return rule; }
		
		//'agent' name=ID sites=Sites
		public Group getGroup() { return cGroup; }
		
		//'agent'
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//sites=Sites
		public Assignment getSitesAssignment_2() { return cSitesAssignment_2; }
		
		//Sites
		public RuleCall getSitesSitesParserRuleCall_2_0() { return cSitesSitesParserRuleCall_2_0; }
	}
	public class PatternVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.PatternVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		//PatternVariable:
		//	'var'
		//	name=ID
		//	'='
		//	pattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' pattern=Pattern
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_3_0() { return cPatternPatternParserRuleCall_3_0; }
	}
	public class ArithmeticVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ArithmeticVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueArithmeticValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ArithmeticVariable:
		//	'var'
		//	name=ID
		//	'='
		//	value=ArithmeticValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' value=ArithmeticValue
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=ArithmeticValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ArithmeticValue
		public RuleCall getValueArithmeticValueParserRuleCall_3_0() { return cValueArithmeticValueParserRuleCall_3_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	PatternVariable | ArithmeticVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//PatternVariable | ArithmeticVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PatternVariable
		public RuleCall getPatternVariableParserRuleCall_0() { return cPatternVariableParserRuleCall_0; }
		
		//ArithmeticVariable
		public RuleCall getArithmeticVariableParserRuleCall_1() { return cArithmeticVariableParserRuleCall_1; }
	}
	public class SemiLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.SemiLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSemiLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSEMI_LINKTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SemiLink LinkState:
		//	{SemiLink} SEMI_LINK;
		@Override public ParserRule getRule() { return rule; }
		
		//{SemiLink} SEMI_LINK
		public Group getGroup() { return cGroup; }
		
		//{SemiLink}
		public Action getSemiLinkAction_0() { return cSemiLinkAction_0; }
		
		//SEMI_LINK
		public RuleCall getSEMI_LINKTerminalRuleCall_1() { return cSEMI_LINKTerminalRuleCall_1; }
	}
	public class FreeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.FreeLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFreeLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cFREE_LINKTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FreeLink LinkState:
		//	{FreeLink} FREE_LINK;
		@Override public ParserRule getRule() { return rule; }
		
		//{FreeLink} FREE_LINK
		public Group getGroup() { return cGroup; }
		
		//{FreeLink}
		public Action getFreeLinkAction_0() { return cFreeLinkAction_0; }
		
		//FREE_LINK
		public RuleCall getFREE_LINKTerminalRuleCall_1() { return cFREE_LINKTerminalRuleCall_1; }
	}
	public class WhatEverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.WhatEver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhatEverAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWHATEVER_LINKTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//WhatEver LinkState:
		//	{WhatEver} WHATEVER_LINK;
		@Override public ParserRule getRule() { return rule; }
		
		//{WhatEver} WHATEVER_LINK
		public Group getGroup() { return cGroup; }
		
		//{WhatEver}
		public Action getWhatEverAction_0() { return cWhatEverAction_0; }
		
		//WHATEVER_LINK
		public RuleCall getWHATEVER_LINKTerminalRuleCall_1() { return cWHATEVER_LINKTerminalRuleCall_1; }
	}
	public class LimitLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.LimitLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLimitLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateUnsignedIntegerParserRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		
		//LimitLink LinkState:
		//	{LimitLink} state=UnsignedInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//{LimitLink} state=UnsignedInteger
		public Group getGroup() { return cGroup; }
		
		//{LimitLink}
		public Action getLimitLinkAction_0() { return cLimitLinkAction_0; }
		
		//state=UnsignedInteger
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//UnsignedInteger
		public RuleCall getStateUnsignedIntegerParserRuleCall_1_0() { return cStateUnsignedIntegerParserRuleCall_1_0; }
	}
	public class ExactLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ExactLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExactLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSiteSiteCrossReference_1_0 = (CrossReference)cSiteAssignment_1.eContents().get(0);
		private final RuleCall cSiteSiteIDTerminalRuleCall_1_0_1 = (RuleCall)cSiteSiteCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAgentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAgentAgentCrossReference_3_0 = (CrossReference)cAgentAssignment_3.eContents().get(0);
		private final RuleCall cAgentAgentIDTerminalRuleCall_3_0_1 = (RuleCall)cAgentAgentCrossReference_3_0.eContents().get(1);
		
		//ExactLink LinkState:
		//	{ExactLink} site=[Site]
		//	'.'
		//	agent=[Agent];
		@Override public ParserRule getRule() { return rule; }
		
		//{ExactLink} site=[Site] '.' agent=[Agent]
		public Group getGroup() { return cGroup; }
		
		//{ExactLink}
		public Action getExactLinkAction_0() { return cExactLinkAction_0; }
		
		//site=[Site]
		public Assignment getSiteAssignment_1() { return cSiteAssignment_1; }
		
		//[Site]
		public CrossReference getSiteSiteCrossReference_1_0() { return cSiteSiteCrossReference_1_0; }
		
		//ID
		public RuleCall getSiteSiteIDTerminalRuleCall_1_0_1() { return cSiteSiteIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//agent=[Agent]
		public Assignment getAgentAssignment_3() { return cAgentAssignment_3; }
		
		//[Agent]
		public CrossReference getAgentAgentCrossReference_3_0() { return cAgentAgentCrossReference_3_0; }
		
		//ID
		public RuleCall getAgentAgentIDTerminalRuleCall_3_0_1() { return cAgentAgentIDTerminalRuleCall_3_0_1; }
	}
	public class SiteStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.SiteState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSiteStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStateStateCrossReference_1_0 = (CrossReference)cStateAssignment_1.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_1_0_1 = (RuleCall)cStateStateCrossReference_1_0.eContents().get(1);
		
		//SiteState:
		//	{SiteState} state=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//{SiteState} state=[State]
		public Group getGroup() { return cGroup; }
		
		//{SiteState}
		public Action getSiteStateAction_0() { return cSiteStateAction_0; }
		
		//state=[State]
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//[State]
		public CrossReference getStateStateCrossReference_1_0() { return cStateStateCrossReference_1_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_1_0_1() { return cStateStateIDTerminalRuleCall_1_0_1; }
	}
	public class LinkStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.LinkState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLinkStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cLinkStateAlternatives_1_0 = (Alternatives)cLinkStateAssignment_1.eContents().get(0);
		private final RuleCall cLinkStateSemiLinkParserRuleCall_1_0_0 = (RuleCall)cLinkStateAlternatives_1_0.eContents().get(0);
		private final RuleCall cLinkStateFreeLinkParserRuleCall_1_0_1 = (RuleCall)cLinkStateAlternatives_1_0.eContents().get(1);
		private final RuleCall cLinkStateExactLinkParserRuleCall_1_0_2 = (RuleCall)cLinkStateAlternatives_1_0.eContents().get(2);
		private final RuleCall cLinkStateLimitLinkParserRuleCall_1_0_3 = (RuleCall)cLinkStateAlternatives_1_0.eContents().get(3);
		private final RuleCall cLinkStateWhatEverParserRuleCall_1_0_4 = (RuleCall)cLinkStateAlternatives_1_0.eContents().get(4);
		
		//LinkState:
		//	{LinkState} linkState=(SemiLink | FreeLink | ExactLink | LimitLink | WhatEver);
		@Override public ParserRule getRule() { return rule; }
		
		//{LinkState} linkState=(SemiLink | FreeLink | ExactLink | LimitLink | WhatEver)
		public Group getGroup() { return cGroup; }
		
		//{LinkState}
		public Action getLinkStateAction_0() { return cLinkStateAction_0; }
		
		//linkState=(SemiLink | FreeLink | ExactLink | LimitLink | WhatEver)
		public Assignment getLinkStateAssignment_1() { return cLinkStateAssignment_1; }
		
		//(SemiLink | FreeLink | ExactLink | LimitLink | WhatEver)
		public Alternatives getLinkStateAlternatives_1_0() { return cLinkStateAlternatives_1_0; }
		
		//SemiLink
		public RuleCall getLinkStateSemiLinkParserRuleCall_1_0_0() { return cLinkStateSemiLinkParserRuleCall_1_0_0; }
		
		//FreeLink
		public RuleCall getLinkStateFreeLinkParserRuleCall_1_0_1() { return cLinkStateFreeLinkParserRuleCall_1_0_1; }
		
		//ExactLink
		public RuleCall getLinkStateExactLinkParserRuleCall_1_0_2() { return cLinkStateExactLinkParserRuleCall_1_0_2; }
		
		//LimitLink
		public RuleCall getLinkStateLimitLinkParserRuleCall_1_0_3() { return cLinkStateLimitLinkParserRuleCall_1_0_3; }
		
		//WhatEver
		public RuleCall getLinkStateWhatEverParserRuleCall_1_0_4() { return cLinkStateWhatEverParserRuleCall_1_0_4; }
	}
	public class SitePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.SitePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSitePatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSiteSiteCrossReference_1_0 = (CrossReference)cSiteAssignment_1.eContents().get(0);
		private final RuleCall cSiteSiteIDTerminalRuleCall_1_0_1 = (RuleCall)cSiteSiteCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStateSiteStateParserRuleCall_2_1_0 = (RuleCall)cStateAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLinkStateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLinkStateLinkStateParserRuleCall_3_1_0 = (RuleCall)cLinkStateAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SitePattern:
		//	{SitePattern} site=[Site] ('{' state=SiteState '}')? ('[' linkState=LinkState ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SitePattern} site=[Site] ('{' state=SiteState '}')? ('[' linkState=LinkState ']')?
		public Group getGroup() { return cGroup; }
		
		//{SitePattern}
		public Action getSitePatternAction_0() { return cSitePatternAction_0; }
		
		//site=[Site]
		public Assignment getSiteAssignment_1() { return cSiteAssignment_1; }
		
		//[Site]
		public CrossReference getSiteSiteCrossReference_1_0() { return cSiteSiteCrossReference_1_0; }
		
		//ID
		public RuleCall getSiteSiteIDTerminalRuleCall_1_0_1() { return cSiteSiteIDTerminalRuleCall_1_0_1; }
		
		//('{' state=SiteState '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//state=SiteState
		public Assignment getStateAssignment_2_1() { return cStateAssignment_2_1; }
		
		//SiteState
		public RuleCall getStateSiteStateParserRuleCall_2_1_0() { return cStateSiteStateParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
		
		//('[' linkState=LinkState ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//linkState=LinkState
		public Assignment getLinkStateAssignment_3_1() { return cLinkStateAssignment_3_1; }
		
		//LinkState
		public RuleCall getLinkStateLinkStateParserRuleCall_3_1_0() { return cLinkStateLinkStateParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class AgentPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.AgentPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAgentPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAgentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAgentAgentCrossReference_1_0 = (CrossReference)cAgentAssignment_1.eContents().get(0);
		private final RuleCall cAgentAgentIDTerminalRuleCall_1_0_1 = (RuleCall)cAgentAgentCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSitePatternsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSitePatternsSitePatternParserRuleCall_3_0_0 = (RuleCall)cSitePatternsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSitePatternsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cSitePatternsSitePatternParserRuleCall_3_1_1_0 = (RuleCall)cSitePatternsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AgentPattern:
		//	{AgentPattern} agent=[Agent]
		//	'(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AgentPattern} agent=[Agent] '(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{AgentPattern}
		public Action getAgentPatternAction_0() { return cAgentPatternAction_0; }
		
		//agent=[Agent]
		public Assignment getAgentAssignment_1() { return cAgentAssignment_1; }
		
		//[Agent]
		public CrossReference getAgentAgentCrossReference_1_0() { return cAgentAgentCrossReference_1_0; }
		
		//ID
		public RuleCall getAgentAgentIDTerminalRuleCall_1_0_1() { return cAgentAgentIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//sitePatterns+=SitePattern
		public Assignment getSitePatternsAssignment_3_0() { return cSitePatternsAssignment_3_0; }
		
		//SitePattern
		public RuleCall getSitePatternsSitePatternParserRuleCall_3_0_0() { return cSitePatternsSitePatternParserRuleCall_3_0_0; }
		
		//(',' sitePatterns+=SitePattern)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//sitePatterns+=SitePattern
		public Assignment getSitePatternsAssignment_3_1_1() { return cSitePatternsAssignment_3_1_1; }
		
		//SitePattern
		public RuleCall getSitePatternsSitePatternParserRuleCall_3_1_1_0() { return cSitePatternsSitePatternParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAgentPatternsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAgentPatternsAgentPatternParserRuleCall_2_0_0 = (RuleCall)cAgentPatternsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAgentPatternsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAgentPatternsAgentPatternParserRuleCall_2_1_1_0 = (RuleCall)cAgentPatternsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Pattern:
		//	{Pattern}
		//	'{' (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Pattern} '{' (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Pattern}
		public Action getPatternAction_0() { return cPatternAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//agentPatterns+=AgentPattern
		public Assignment getAgentPatternsAssignment_2_0() { return cAgentPatternsAssignment_2_0; }
		
		//AgentPattern
		public RuleCall getAgentPatternsAgentPatternParserRuleCall_2_0_0() { return cAgentPatternsAgentPatternParserRuleCall_2_0_0; }
		
		//(',' agentPatterns+=AgentPattern)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//agentPatterns+=AgentPattern
		public Assignment getAgentPatternsAssignment_2_1_1() { return cAgentPatternsAssignment_2_1_1; }
		
		//AgentPattern
		public RuleCall getAgentPatternsAgentPatternParserRuleCall_2_1_1_0() { return cAgentPatternsAgentPatternParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Observation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cObservationPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObservationPatternPatternAssignmentParserRuleCall_2_0 = (RuleCall)cObservationPatternAssignment_2.eContents().get(0);
		
		//Observation:
		//	'obs'
		//	name=ID
		//	observationPattern=PatternAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//'obs' name=ID observationPattern=PatternAssignment
		public Group getGroup() { return cGroup; }
		
		//'obs'
		public Keyword getObsKeyword_0() { return cObsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//observationPattern=PatternAssignment
		public Assignment getObservationPatternAssignment_2() { return cObservationPatternAssignment_2; }
		
		//PatternAssignment
		public RuleCall getObservationPatternPatternAssignmentParserRuleCall_2_0() { return cObservationPatternPatternAssignmentParserRuleCall_2_0; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCountUnsignedIntegerParserRuleCall_2_0 = (RuleCall)cCountAssignment_2.eContents().get(0);
		private final Assignment cInitialPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialPatternPatternAssignmentParserRuleCall_3_0 = (RuleCall)cInitialPatternAssignment_3.eContents().get(0);
		
		//Initial:
		//	'init'
		//	name=ID
		//	count=UnsignedInteger
		//	initialPattern=PatternAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//'init' name=ID count=UnsignedInteger initialPattern=PatternAssignment
		public Group getGroup() { return cGroup; }
		
		//'init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//count=UnsignedInteger
		public Assignment getCountAssignment_2() { return cCountAssignment_2; }
		
		//UnsignedInteger
		public RuleCall getCountUnsignedIntegerParserRuleCall_2_0() { return cCountUnsignedIntegerParserRuleCall_2_0; }
		
		//initialPattern=PatternAssignment
		public Assignment getInitialPatternAssignment_3() { return cInitialPatternAssignment_3; }
		
		//PatternAssignment
		public RuleCall getInitialPatternPatternAssignmentParserRuleCall_3_0() { return cInitialPatternPatternAssignmentParserRuleCall_3_0; }
	}
	public class AssignFromPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.AssignFromPattern");
		private final Assignment cPatternAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_0 = (RuleCall)cPatternAssignment.eContents().get(0);
		
		//AssignFromPattern PatternAssignment:
		//	pattern+=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//pattern+=Pattern
		public Assignment getPatternAssignment() { return cPatternAssignment; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_0() { return cPatternPatternParserRuleCall_0; }
	}
	public class AssignFromVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.AssignFromVariable");
		private final Assignment cPatternVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPatternVarPatternVariableCrossReference_0 = (CrossReference)cPatternVarAssignment.eContents().get(0);
		private final RuleCall cPatternVarPatternVariableIDTerminalRuleCall_0_1 = (RuleCall)cPatternVarPatternVariableCrossReference_0.eContents().get(1);
		
		//AssignFromVariable PatternAssignment:
		//	patternVar+=[PatternVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//patternVar+=[PatternVariable]
		public Assignment getPatternVarAssignment() { return cPatternVarAssignment; }
		
		//[PatternVariable]
		public CrossReference getPatternVarPatternVariableCrossReference_0() { return cPatternVarPatternVariableCrossReference_0; }
		
		//ID
		public RuleCall getPatternVarPatternVariableIDTerminalRuleCall_0_1() { return cPatternVarPatternVariableIDTerminalRuleCall_0_1; }
	}
	public class PatternAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.PatternAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignFromPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignFromVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PatternAssignment:
		//	AssignFromPattern | AssignFromVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignFromPattern | AssignFromVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignFromPattern
		public RuleCall getAssignFromPatternParserRuleCall_0() { return cAssignFromPatternParserRuleCall_0; }
		
		//AssignFromVariable
		public RuleCall getAssignFromVariableParserRuleCall_1() { return cAssignFromVariableParserRuleCall_1; }
	}
	public class RuleVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.RuleVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariablesArithmeticVariableCrossReference_0_0 = (CrossReference)cVariablesAssignment_0.eContents().get(0);
		private final RuleCall cVariablesArithmeticVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariablesArithmeticVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVariablesArithmeticVariableCrossReference_1_1_0 = (CrossReference)cVariablesAssignment_1_1.eContents().get(0);
		private final RuleCall cVariablesArithmeticVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVariablesArithmeticVariableCrossReference_1_1_0.eContents().get(1);
		
		//RuleVariables:
		//	variables+=[ArithmeticVariable] (',' variables+=[ArithmeticVariable])*;
		@Override public ParserRule getRule() { return rule; }
		
		//variables+=[ArithmeticVariable] (',' variables+=[ArithmeticVariable])*
		public Group getGroup() { return cGroup; }
		
		//variables+=[ArithmeticVariable]
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }
		
		//[ArithmeticVariable]
		public CrossReference getVariablesArithmeticVariableCrossReference_0_0() { return cVariablesArithmeticVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVariablesArithmeticVariableIDTerminalRuleCall_0_0_1() { return cVariablesArithmeticVariableIDTerminalRuleCall_0_0_1; }
		
		//(',' variables+=[ArithmeticVariable])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//variables+=[ArithmeticVariable]
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }
		
		//[ArithmeticVariable]
		public CrossReference getVariablesArithmeticVariableCrossReference_1_1_0() { return cVariablesArithmeticVariableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getVariablesArithmeticVariableIDTerminalRuleCall_1_1_0_1() { return cVariablesArithmeticVariableIDTerminalRuleCall_1_1_0_1; }
	}
	public class UnidirectionalRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.UnidirectionalRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPatternAssignmentParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final RuleCall cUNITerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPatternAssignmentParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesRuleVariablesParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnidirectionalRule RuleBody:
		//	lhs=PatternAssignment
		//	UNI
		//	rhs=PatternAssignment
		//	AT
		//	'[' variables=RuleVariables ']';
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=PatternAssignment UNI rhs=PatternAssignment AT '[' variables=RuleVariables ']'
		public Group getGroup() { return cGroup; }
		
		//lhs=PatternAssignment
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//PatternAssignment
		public RuleCall getLhsPatternAssignmentParserRuleCall_0_0() { return cLhsPatternAssignmentParserRuleCall_0_0; }
		
		//UNI
		public RuleCall getUNITerminalRuleCall_1() { return cUNITerminalRuleCall_1; }
		
		//rhs=PatternAssignment
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//PatternAssignment
		public RuleCall getRhsPatternAssignmentParserRuleCall_2_0() { return cRhsPatternAssignmentParserRuleCall_2_0; }
		
		//AT
		public RuleCall getATTerminalRuleCall_3() { return cATTerminalRuleCall_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//variables=RuleVariables
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//RuleVariables
		public RuleCall getVariablesRuleVariablesParserRuleCall_5_0() { return cVariablesRuleVariablesParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class BidirectionalRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.BidirectionalRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPatternAssignmentParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final RuleCall cBITerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPatternAssignmentParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesRuleVariablesParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BidirectionalRule RuleBody:
		//	lhs=PatternAssignment
		//	BI
		//	rhs=PatternAssignment
		//	AT
		//	'[' variables=RuleVariables ']';
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=PatternAssignment BI rhs=PatternAssignment AT '[' variables=RuleVariables ']'
		public Group getGroup() { return cGroup; }
		
		//lhs=PatternAssignment
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//PatternAssignment
		public RuleCall getLhsPatternAssignmentParserRuleCall_0_0() { return cLhsPatternAssignmentParserRuleCall_0_0; }
		
		//BI
		public RuleCall getBITerminalRuleCall_1() { return cBITerminalRuleCall_1; }
		
		//rhs=PatternAssignment
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//PatternAssignment
		public RuleCall getRhsPatternAssignmentParserRuleCall_2_0() { return cRhsPatternAssignmentParserRuleCall_2_0; }
		
		//AT
		public RuleCall getATTerminalRuleCall_3() { return cATTerminalRuleCall_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//variables=RuleVariables
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//RuleVariables
		public RuleCall getVariablesRuleVariablesParserRuleCall_5_0() { return cVariablesRuleVariablesParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class RuleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.RuleBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnidirectionalRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBidirectionalRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RuleBody:
		//	UnidirectionalRule | BidirectionalRule;
		@Override public ParserRule getRule() { return rule; }
		
		//UnidirectionalRule | BidirectionalRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnidirectionalRule
		public RuleCall getUnidirectionalRuleParserRuleCall_0() { return cUnidirectionalRuleParserRuleCall_0; }
		
		//BidirectionalRule
		public RuleCall getBidirectionalRuleParserRuleCall_1() { return cBidirectionalRuleParserRuleCall_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleRuleBodyParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		
		//Rule:
		//	'rule'
		//	name=ID
		//	rule=RuleBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID rule=RuleBody
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//rule=RuleBody
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//RuleBody
		public RuleCall getRuleRuleBodyParserRuleCall_2_0() { return cRuleRuleBodyParserRuleCall_2_0; }
	}
	
	
	private final ReactionRuleModelElements pReactionRuleModel;
	private final ReactionPropertyElements pReactionProperty;
	private final TerminalRule tAT;
	private final TerminalRule tBI;
	private final TerminalRule tUNI;
	private final TerminalRule tSEMI_LINK;
	private final TerminalRule tFREE_LINK;
	private final TerminalRule tWHATEVER_LINK;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tINT;
	private final FloatElements pFloat;
	private final ScientificFloatElements pScientificFloat;
	private final UnsignedIntegerElements pUnsignedInteger;
	private final SignedIntegerElements pSignedInteger;
	private final ArithmeticTypeElements pArithmeticType;
	private final ArithmeticValueElements pArithmeticValue;
	private final StateElements pState;
	private final StatesElements pStates;
	private final SiteElements pSite;
	private final SitesElements pSites;
	private final AgentElements pAgent;
	private final PatternVariableElements pPatternVariable;
	private final ArithmeticVariableElements pArithmeticVariable;
	private final VariableElements pVariable;
	private final SemiLinkElements pSemiLink;
	private final FreeLinkElements pFreeLink;
	private final WhatEverElements pWhatEver;
	private final LimitLinkElements pLimitLink;
	private final ExactLinkElements pExactLink;
	private final SiteStateElements pSiteState;
	private final LinkStateElements pLinkState;
	private final SitePatternElements pSitePattern;
	private final AgentPatternElements pAgentPattern;
	private final PatternElements pPattern;
	private final ObservationElements pObservation;
	private final InitialElements pInitial;
	private final AssignFromPatternElements pAssignFromPattern;
	private final AssignFromVariableElements pAssignFromVariable;
	private final PatternAssignmentElements pPatternAssignment;
	private final RuleVariablesElements pRuleVariables;
	private final UnidirectionalRuleElements pUnidirectionalRule;
	private final BidirectionalRuleElements pBidirectionalRule;
	private final RuleBodyElements pRuleBody;
	private final RuleElements pRule;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReactionRulesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pReactionRuleModel = new ReactionRuleModelElements();
		this.pReactionProperty = new ReactionPropertyElements();
		this.tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.AT");
		this.tBI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.BI");
		this.tUNI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.UNI");
		this.tSEMI_LINK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.SEMI_LINK");
		this.tFREE_LINK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.FREE_LINK");
		this.tWHATEVER_LINK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.WHATEVER_LINK");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.EXPONENT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.INT");
		this.pFloat = new FloatElements();
		this.pScientificFloat = new ScientificFloatElements();
		this.pUnsignedInteger = new UnsignedIntegerElements();
		this.pSignedInteger = new SignedIntegerElements();
		this.pArithmeticType = new ArithmeticTypeElements();
		this.pArithmeticValue = new ArithmeticValueElements();
		this.pState = new StateElements();
		this.pStates = new StatesElements();
		this.pSite = new SiteElements();
		this.pSites = new SitesElements();
		this.pAgent = new AgentElements();
		this.pPatternVariable = new PatternVariableElements();
		this.pArithmeticVariable = new ArithmeticVariableElements();
		this.pVariable = new VariableElements();
		this.pSemiLink = new SemiLinkElements();
		this.pFreeLink = new FreeLinkElements();
		this.pWhatEver = new WhatEverElements();
		this.pLimitLink = new LimitLinkElements();
		this.pExactLink = new ExactLinkElements();
		this.pSiteState = new SiteStateElements();
		this.pLinkState = new LinkStateElements();
		this.pSitePattern = new SitePatternElements();
		this.pAgentPattern = new AgentPatternElements();
		this.pPattern = new PatternElements();
		this.pObservation = new ObservationElements();
		this.pInitial = new InitialElements();
		this.pAssignFromPattern = new AssignFromPatternElements();
		this.pAssignFromVariable = new AssignFromVariableElements();
		this.pPatternAssignment = new PatternAssignmentElements();
		this.pRuleVariables = new RuleVariablesElements();
		this.pUnidirectionalRule = new UnidirectionalRuleElements();
		this.pBidirectionalRule = new BidirectionalRuleElements();
		this.pRuleBody = new RuleBodyElements();
		this.pRule = new RuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("biochemsimulation.reactionrules.ReactionRules".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ReactionRuleModel:
	//	reactionProperties+=ReactionProperty*;
	public ReactionRuleModelElements getReactionRuleModelAccess() {
		return pReactionRuleModel;
	}
	
	public ParserRule getReactionRuleModelRule() {
		return getReactionRuleModelAccess().getRule();
	}
	
	//ReactionProperty:
	//	Agent | Variable | Observation | Initial | Rule;
	public ReactionPropertyElements getReactionPropertyAccess() {
		return pReactionProperty;
	}
	
	public ParserRule getReactionPropertyRule() {
		return getReactionPropertyAccess().getRule();
	}
	
	//terminal AT:
	//	'@';
	public TerminalRule getATRule() {
		return tAT;
	}
	
	//terminal BI:
	//	'<->';
	public TerminalRule getBIRule() {
		return tBI;
	}
	
	//terminal UNI:
	//	'->';
	public TerminalRule getUNIRule() {
		return tUNI;
	}
	
	//terminal SEMI_LINK:
	//	'semi';
	public TerminalRule getSEMI_LINKRule() {
		return tSEMI_LINK;
	}
	
	//terminal FREE_LINK:
	//	'free';
	public TerminalRule getFREE_LINKRule() {
		return tFREE_LINK;
	}
	
	//terminal WHATEVER_LINK:
	//	'?';
	public TerminalRule getWHATEVER_LINKRule() {
		return tWHATEVER_LINK;
	}
	
	//terminal EXPONENT:
	//	'E';
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//@ Override terminal INT returns ecore::EInt:
	//	'0'..'9' '0'..'9'*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//Float hidden():
	//	'-'? INT '.' INT;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//ScientificFloat hidden():
	//	'-'? INT '.' INT EXPONENT '-'? INT;
	public ScientificFloatElements getScientificFloatAccess() {
		return pScientificFloat;
	}
	
	public ParserRule getScientificFloatRule() {
		return getScientificFloatAccess().getRule();
	}
	
	//UnsignedInteger hidden():
	//	INT;
	public UnsignedIntegerElements getUnsignedIntegerAccess() {
		return pUnsignedInteger;
	}
	
	public ParserRule getUnsignedIntegerRule() {
		return getUnsignedIntegerAccess().getRule();
	}
	
	//SignedInteger hidden():
	//	'-' INT;
	public SignedIntegerElements getSignedIntegerAccess() {
		return pSignedInteger;
	}
	
	public ParserRule getSignedIntegerRule() {
		return getSignedIntegerAccess().getRule();
	}
	
	//ArithmeticType:
	//	Float | UnsignedInteger | SignedInteger | ScientificFloat;
	public ArithmeticTypeElements getArithmeticTypeAccess() {
		return pArithmeticType;
	}
	
	public ParserRule getArithmeticTypeRule() {
		return getArithmeticTypeAccess().getRule();
	}
	
	//ArithmeticValue:
	//	value=ArithmeticType;
	public ArithmeticValueElements getArithmeticValueAccess() {
		return pArithmeticValue;
	}
	
	public ParserRule getArithmeticValueRule() {
		return getArithmeticValueAccess().getRule();
	}
	
	//State:
	//	name=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//States:
	//	{States} ('{' state+=State ("," state+=State)* '}')?;
	public StatesElements getStatesAccess() {
		return pStates;
	}
	
	public ParserRule getStatesRule() {
		return getStatesAccess().getRule();
	}
	
	//Site:
	//	name=ID
	//	states=States;
	public SiteElements getSiteAccess() {
		return pSite;
	}
	
	public ParserRule getSiteRule() {
		return getSiteAccess().getRule();
	}
	
	//Sites:
	//	{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?;
	public SitesElements getSitesAccess() {
		return pSites;
	}
	
	public ParserRule getSitesRule() {
		return getSitesAccess().getRule();
	}
	
	//Agent:
	//	'agent'
	//	name=ID
	//	sites=Sites;
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}
	
	//PatternVariable:
	//	'var'
	//	name=ID
	//	'='
	//	pattern=Pattern;
	public PatternVariableElements getPatternVariableAccess() {
		return pPatternVariable;
	}
	
	public ParserRule getPatternVariableRule() {
		return getPatternVariableAccess().getRule();
	}
	
	//ArithmeticVariable:
	//	'var'
	//	name=ID
	//	'='
	//	value=ArithmeticValue;
	public ArithmeticVariableElements getArithmeticVariableAccess() {
		return pArithmeticVariable;
	}
	
	public ParserRule getArithmeticVariableRule() {
		return getArithmeticVariableAccess().getRule();
	}
	
	//Variable:
	//	PatternVariable | ArithmeticVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//SemiLink LinkState:
	//	{SemiLink} SEMI_LINK;
	public SemiLinkElements getSemiLinkAccess() {
		return pSemiLink;
	}
	
	public ParserRule getSemiLinkRule() {
		return getSemiLinkAccess().getRule();
	}
	
	//FreeLink LinkState:
	//	{FreeLink} FREE_LINK;
	public FreeLinkElements getFreeLinkAccess() {
		return pFreeLink;
	}
	
	public ParserRule getFreeLinkRule() {
		return getFreeLinkAccess().getRule();
	}
	
	//WhatEver LinkState:
	//	{WhatEver} WHATEVER_LINK;
	public WhatEverElements getWhatEverAccess() {
		return pWhatEver;
	}
	
	public ParserRule getWhatEverRule() {
		return getWhatEverAccess().getRule();
	}
	
	//LimitLink LinkState:
	//	{LimitLink} state=UnsignedInteger;
	public LimitLinkElements getLimitLinkAccess() {
		return pLimitLink;
	}
	
	public ParserRule getLimitLinkRule() {
		return getLimitLinkAccess().getRule();
	}
	
	//ExactLink LinkState:
	//	{ExactLink} site=[Site]
	//	'.'
	//	agent=[Agent];
	public ExactLinkElements getExactLinkAccess() {
		return pExactLink;
	}
	
	public ParserRule getExactLinkRule() {
		return getExactLinkAccess().getRule();
	}
	
	//SiteState:
	//	{SiteState} state=[State];
	public SiteStateElements getSiteStateAccess() {
		return pSiteState;
	}
	
	public ParserRule getSiteStateRule() {
		return getSiteStateAccess().getRule();
	}
	
	//LinkState:
	//	{LinkState} linkState=(SemiLink | FreeLink | ExactLink | LimitLink | WhatEver);
	public LinkStateElements getLinkStateAccess() {
		return pLinkState;
	}
	
	public ParserRule getLinkStateRule() {
		return getLinkStateAccess().getRule();
	}
	
	//SitePattern:
	//	{SitePattern} site=[Site] ('{' state=SiteState '}')? ('[' linkState=LinkState ']')?;
	public SitePatternElements getSitePatternAccess() {
		return pSitePattern;
	}
	
	public ParserRule getSitePatternRule() {
		return getSitePatternAccess().getRule();
	}
	
	//AgentPattern:
	//	{AgentPattern} agent=[Agent]
	//	'(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)?
	//	')';
	public AgentPatternElements getAgentPatternAccess() {
		return pAgentPattern;
	}
	
	public ParserRule getAgentPatternRule() {
		return getAgentPatternAccess().getRule();
	}
	
	//Pattern:
	//	{Pattern}
	//	'{' (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)? '}';
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Observation:
	//	'obs'
	//	name=ID
	//	observationPattern=PatternAssignment;
	public ObservationElements getObservationAccess() {
		return pObservation;
	}
	
	public ParserRule getObservationRule() {
		return getObservationAccess().getRule();
	}
	
	//Initial:
	//	'init'
	//	name=ID
	//	count=UnsignedInteger
	//	initialPattern=PatternAssignment;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//AssignFromPattern PatternAssignment:
	//	pattern+=Pattern;
	public AssignFromPatternElements getAssignFromPatternAccess() {
		return pAssignFromPattern;
	}
	
	public ParserRule getAssignFromPatternRule() {
		return getAssignFromPatternAccess().getRule();
	}
	
	//AssignFromVariable PatternAssignment:
	//	patternVar+=[PatternVariable];
	public AssignFromVariableElements getAssignFromVariableAccess() {
		return pAssignFromVariable;
	}
	
	public ParserRule getAssignFromVariableRule() {
		return getAssignFromVariableAccess().getRule();
	}
	
	//PatternAssignment:
	//	AssignFromPattern | AssignFromVariable;
	public PatternAssignmentElements getPatternAssignmentAccess() {
		return pPatternAssignment;
	}
	
	public ParserRule getPatternAssignmentRule() {
		return getPatternAssignmentAccess().getRule();
	}
	
	//RuleVariables:
	//	variables+=[ArithmeticVariable] (',' variables+=[ArithmeticVariable])*;
	public RuleVariablesElements getRuleVariablesAccess() {
		return pRuleVariables;
	}
	
	public ParserRule getRuleVariablesRule() {
		return getRuleVariablesAccess().getRule();
	}
	
	//UnidirectionalRule RuleBody:
	//	lhs=PatternAssignment
	//	UNI
	//	rhs=PatternAssignment
	//	AT
	//	'[' variables=RuleVariables ']';
	public UnidirectionalRuleElements getUnidirectionalRuleAccess() {
		return pUnidirectionalRule;
	}
	
	public ParserRule getUnidirectionalRuleRule() {
		return getUnidirectionalRuleAccess().getRule();
	}
	
	//BidirectionalRule RuleBody:
	//	lhs=PatternAssignment
	//	BI
	//	rhs=PatternAssignment
	//	AT
	//	'[' variables=RuleVariables ']';
	public BidirectionalRuleElements getBidirectionalRuleAccess() {
		return pBidirectionalRule;
	}
	
	public ParserRule getBidirectionalRuleRule() {
		return getBidirectionalRuleAccess().getRule();
	}
	
	//RuleBody:
	//	UnidirectionalRule | BidirectionalRule;
	public RuleBodyElements getRuleBodyAccess() {
		return pRuleBody;
	}
	
	public ParserRule getRuleBodyRule() {
		return getRuleBodyAccess().getRule();
	}
	
	//Rule:
	//	'rule'
	//	name=ID
	//	rule=RuleBody;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
