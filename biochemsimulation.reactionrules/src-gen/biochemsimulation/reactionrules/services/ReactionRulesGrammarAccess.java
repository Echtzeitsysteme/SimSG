/*
 * generated by Xtext 2.12.0
 */
package biochemsimulation.reactionrules.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReactionRulesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ReactionRuleModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ReactionRuleModel");
		private final Assignment cReactionPropertiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReactionPropertiesReactionPropertyParserRuleCall_0 = (RuleCall)cReactionPropertiesAssignment.eContents().get(0);
		
		//ReactionRuleModel:
		//	reactionProperties+=ReactionProperty*;
		@Override public ParserRule getRule() { return rule; }
		
		//reactionProperties+=ReactionProperty*
		public Assignment getReactionPropertiesAssignment() { return cReactionPropertiesAssignment; }
		
		//ReactionProperty
		public RuleCall getReactionPropertiesReactionPropertyParserRuleCall_0() { return cReactionPropertiesReactionPropertyParserRuleCall_0; }
	}
	public class ReactionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ReactionProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAgentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObservationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInitialParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ReactionProperty:
		//	Agent | Variable | Observation | Initial | Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//Agent | Variable | Observation | Initial | Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Agent
		public RuleCall getAgentParserRuleCall_0() { return cAgentParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//Observation
		public RuleCall getObservationParserRuleCall_2() { return cObservationParserRuleCall_2; }
		
		//Initial
		public RuleCall getInitialParserRuleCall_3() { return cInitialParserRuleCall_3; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_4() { return cRuleParserRuleCall_4; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Float ecore::EFloat:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class BigIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.BigInteger");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BigInteger ecore::EBigInteger:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//State:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.States");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_1_1_0 = (RuleCall)cStateAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cStateAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_1_2_1_0 = (RuleCall)cStateAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//States:
		//	{States} ('{' state+=State ("," state+=State)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{States} ('{' state+=State ("," state+=State)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{States}
		public Action getStatesAction_0() { return cStatesAction_0; }
		
		//('{' state+=State ("," state+=State)* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//state+=State
		public Assignment getStateAssignment_1_1() { return cStateAssignment_1_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_1_1_0() { return cStateStateParserRuleCall_1_1_0; }
		
		//("," state+=State)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//state+=State
		public Assignment getStateAssignment_1_2_1() { return cStateAssignment_1_2_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_1_2_1_0() { return cStateStateParserRuleCall_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class SiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Site");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStatesParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		
		//Site:
		//	name=ID
		//	states=States;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID states=States
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//states=States
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//States
		public RuleCall getStatesStatesParserRuleCall_1_0() { return cStatesStatesParserRuleCall_1_0; }
	}
	public class SitesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Sites");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSitesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSitesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSitesSiteParserRuleCall_1_1_0 = (RuleCall)cSitesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSitesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSitesSiteParserRuleCall_1_2_1_0 = (RuleCall)cSitesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Sites:
		//	{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{Sites}
		public Action getSitesAction_0() { return cSitesAction_0; }
		
		//('(' sites+=Site ("," sites+=Site)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//sites+=Site
		public Assignment getSitesAssignment_1_1() { return cSitesAssignment_1_1; }
		
		//Site
		public RuleCall getSitesSiteParserRuleCall_1_1_0() { return cSitesSiteParserRuleCall_1_1_0; }
		
		//("," sites+=Site)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//sites+=Site
		public Assignment getSitesAssignment_1_2_1() { return cSitesAssignment_1_2_1; }
		
		//Site
		public RuleCall getSitesSiteParserRuleCall_1_2_1_0() { return cSitesSiteParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSitesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSitesSitesParserRuleCall_2_0 = (RuleCall)cSitesAssignment_2.eContents().get(0);
		
		//Agent:
		//	'Agent'
		//	name=ID
		//	sites=Sites;
		@Override public ParserRule getRule() { return rule; }
		
		//'Agent' name=ID sites=Sites
		public Group getGroup() { return cGroup; }
		
		//'Agent'
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//sites=Sites
		public Assignment getSitesAssignment_2() { return cSitesAssignment_2; }
		
		//Sites
		public RuleCall getSitesSitesParserRuleCall_2_0() { return cSitesSitesParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueFloatParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Variable:
		//	'Variable'
		//	name=ID
		//	'='
		//	value=Float;
		@Override public ParserRule getRule() { return rule; }
		
		//'Variable' name=ID '=' value=Float
		public Group getGroup() { return cGroup; }
		
		//'Variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Float
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Float
		public RuleCall getValueFloatParserRuleCall_3_0() { return cValueFloatParserRuleCall_3_0; }
	}
	public class LinkStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.LinkState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSemiLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFreeLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExactLinkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLimitLinkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LinkState:
		//	SemiLink | FreeLink | ExactLink | LimitLink;
		@Override public ParserRule getRule() { return rule; }
		
		//SemiLink | FreeLink | ExactLink | LimitLink
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SemiLink
		public RuleCall getSemiLinkParserRuleCall_0() { return cSemiLinkParserRuleCall_0; }
		
		//FreeLink
		public RuleCall getFreeLinkParserRuleCall_1() { return cFreeLinkParserRuleCall_1; }
		
		//ExactLink
		public RuleCall getExactLinkParserRuleCall_2() { return cExactLinkParserRuleCall_2; }
		
		//LimitLink
		public RuleCall getLimitLinkParserRuleCall_3() { return cLimitLinkParserRuleCall_3; }
	}
	public class SemiLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.SemiLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSemiLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSemiLinkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SemiLink LinkState:
		//	{SemiLink}
		//	'Semi-Link';
		@Override public ParserRule getRule() { return rule; }
		
		//{SemiLink} 'Semi-Link'
		public Group getGroup() { return cGroup; }
		
		//{SemiLink}
		public Action getSemiLinkAction_0() { return cSemiLinkAction_0; }
		
		//'Semi-Link'
		public Keyword getSemiLinkKeyword_1() { return cSemiLinkKeyword_1; }
	}
	public class FreeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.FreeLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFreeLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFreeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FreeLink LinkState:
		//	{FreeLink}
		//	'Free';
		@Override public ParserRule getRule() { return rule; }
		
		//{FreeLink} 'Free'
		public Group getGroup() { return cGroup; }
		
		//{FreeLink}
		public Action getFreeLinkAction_0() { return cFreeLinkAction_0; }
		
		//'Free'
		public Keyword getFreeKeyword_1() { return cFreeKeyword_1; }
	}
	public class LimitLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.LimitLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLimitLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateBigIntegerParserRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		
		//LimitLink LinkState:
		//	{LimitLink} state=BigInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//{LimitLink} state=BigInteger
		public Group getGroup() { return cGroup; }
		
		//{LimitLink}
		public Action getLimitLinkAction_0() { return cLimitLinkAction_0; }
		
		//state=BigInteger
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//BigInteger
		public RuleCall getStateBigIntegerParserRuleCall_1_0() { return cStateBigIntegerParserRuleCall_1_0; }
	}
	public class ExactLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.ExactLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExactLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSiteSiteCrossReference_1_0 = (CrossReference)cSiteAssignment_1.eContents().get(0);
		private final RuleCall cSiteSiteIDTerminalRuleCall_1_0_1 = (RuleCall)cSiteSiteCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAgentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAgentAgentCrossReference_3_0 = (CrossReference)cAgentAssignment_3.eContents().get(0);
		private final RuleCall cAgentAgentIDTerminalRuleCall_3_0_1 = (RuleCall)cAgentAgentCrossReference_3_0.eContents().get(1);
		
		//ExactLink LinkState:
		//	{ExactLink} site=[Site]
		//	'.'
		//	agent=[Agent];
		@Override public ParserRule getRule() { return rule; }
		
		//{ExactLink} site=[Site] '.' agent=[Agent]
		public Group getGroup() { return cGroup; }
		
		//{ExactLink}
		public Action getExactLinkAction_0() { return cExactLinkAction_0; }
		
		//site=[Site]
		public Assignment getSiteAssignment_1() { return cSiteAssignment_1; }
		
		//[Site]
		public CrossReference getSiteSiteCrossReference_1_0() { return cSiteSiteCrossReference_1_0; }
		
		//ID
		public RuleCall getSiteSiteIDTerminalRuleCall_1_0_1() { return cSiteSiteIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//agent=[Agent]
		public Assignment getAgentAssignment_3() { return cAgentAssignment_3; }
		
		//[Agent]
		public CrossReference getAgentAgentCrossReference_3_0() { return cAgentAgentCrossReference_3_0; }
		
		//ID
		public RuleCall getAgentAgentIDTerminalRuleCall_3_0_1() { return cAgentAgentIDTerminalRuleCall_3_0_1; }
	}
	public class SitePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.SitePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSitePatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSiteSiteCrossReference_1_0 = (CrossReference)cSiteAssignment_1.eContents().get(0);
		private final RuleCall cSiteSiteIDTerminalRuleCall_1_0_1 = (RuleCall)cSiteSiteCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStateStateCrossReference_2_1_0 = (CrossReference)cStateAssignment_2_1.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStateStateCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLinkStateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLinkStateLinkStateParserRuleCall_3_1_0 = (RuleCall)cLinkStateAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SitePattern:
		//	{SitePattern} site=[Site] ('{' state=[State] '}')? ('[' linkState=LinkState ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SitePattern} site=[Site] ('{' state=[State] '}')? ('[' linkState=LinkState ']')?
		public Group getGroup() { return cGroup; }
		
		//{SitePattern}
		public Action getSitePatternAction_0() { return cSitePatternAction_0; }
		
		//site=[Site]
		public Assignment getSiteAssignment_1() { return cSiteAssignment_1; }
		
		//[Site]
		public CrossReference getSiteSiteCrossReference_1_0() { return cSiteSiteCrossReference_1_0; }
		
		//ID
		public RuleCall getSiteSiteIDTerminalRuleCall_1_0_1() { return cSiteSiteIDTerminalRuleCall_1_0_1; }
		
		//('{' state=[State] '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//state=[State]
		public Assignment getStateAssignment_2_1() { return cStateAssignment_2_1; }
		
		//[State]
		public CrossReference getStateStateCrossReference_2_1_0() { return cStateStateCrossReference_2_1_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_1_0_1() { return cStateStateIDTerminalRuleCall_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
		
		//('[' linkState=LinkState ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//linkState=LinkState
		public Assignment getLinkStateAssignment_3_1() { return cLinkStateAssignment_3_1; }
		
		//LinkState
		public RuleCall getLinkStateLinkStateParserRuleCall_3_1_0() { return cLinkStateLinkStateParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class AgentPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.AgentPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAgentPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAgentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAgentAgentCrossReference_1_0 = (CrossReference)cAgentAssignment_1.eContents().get(0);
		private final RuleCall cAgentAgentIDTerminalRuleCall_1_0_1 = (RuleCall)cAgentAgentCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSitePatternsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSitePatternsSitePatternParserRuleCall_3_0_0 = (RuleCall)cSitePatternsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSitePatternsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cSitePatternsSitePatternParserRuleCall_3_1_1_0 = (RuleCall)cSitePatternsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AgentPattern:
		//	{AgentPattern} agent=[Agent]
		//	'(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AgentPattern} agent=[Agent] '(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{AgentPattern}
		public Action getAgentPatternAction_0() { return cAgentPatternAction_0; }
		
		//agent=[Agent]
		public Assignment getAgentAssignment_1() { return cAgentAssignment_1; }
		
		//[Agent]
		public CrossReference getAgentAgentCrossReference_1_0() { return cAgentAgentCrossReference_1_0; }
		
		//ID
		public RuleCall getAgentAgentIDTerminalRuleCall_1_0_1() { return cAgentAgentIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//sitePatterns+=SitePattern
		public Assignment getSitePatternsAssignment_3_0() { return cSitePatternsAssignment_3_0; }
		
		//SitePattern
		public RuleCall getSitePatternsSitePatternParserRuleCall_3_0_0() { return cSitePatternsSitePatternParserRuleCall_3_0_0; }
		
		//(',' sitePatterns+=SitePattern)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//sitePatterns+=SitePattern
		public Assignment getSitePatternsAssignment_3_1_1() { return cSitePatternsAssignment_3_1_1; }
		
		//SitePattern
		public RuleCall getSitePatternsSitePatternParserRuleCall_3_1_1_0() { return cSitePatternsSitePatternParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAgentPatternsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAgentPatternsAgentPatternParserRuleCall_1_0_0 = (RuleCall)cAgentPatternsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAgentPatternsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAgentPatternsAgentPatternParserRuleCall_1_1_1_0 = (RuleCall)cAgentPatternsAssignment_1_1_1.eContents().get(0);
		
		//Pattern:
		//	{Pattern} (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Pattern} (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)?
		public Group getGroup() { return cGroup; }
		
		//{Pattern}
		public Action getPatternAction_0() { return cPatternAction_0; }
		
		//(agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//agentPatterns+=AgentPattern
		public Assignment getAgentPatternsAssignment_1_0() { return cAgentPatternsAssignment_1_0; }
		
		//AgentPattern
		public RuleCall getAgentPatternsAgentPatternParserRuleCall_1_0_0() { return cAgentPatternsAgentPatternParserRuleCall_1_0_0; }
		
		//(',' agentPatterns+=AgentPattern)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//agentPatterns+=AgentPattern
		public Assignment getAgentPatternsAssignment_1_1_1() { return cAgentPatternsAssignment_1_1_1; }
		
		//AgentPattern
		public RuleCall getAgentPatternsAgentPatternParserRuleCall_1_1_1_0() { return cAgentPatternsAgentPatternParserRuleCall_1_1_1_0; }
	}
	public class ObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Observation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObservationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cObservationPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObservationPatternPatternParserRuleCall_2_0 = (RuleCall)cObservationPatternAssignment_2.eContents().get(0);
		
		//Observation:
		//	'Observation'
		//	name=ID
		//	observationPattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//'Observation' name=ID observationPattern=Pattern
		public Group getGroup() { return cGroup; }
		
		//'Observation'
		public Keyword getObservationKeyword_0() { return cObservationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//observationPattern=Pattern
		public Assignment getObservationPatternAssignment_2() { return cObservationPatternAssignment_2; }
		
		//Pattern
		public RuleCall getObservationPatternPatternParserRuleCall_2_0() { return cObservationPatternPatternParserRuleCall_2_0; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCountBigIntegerParserRuleCall_2_0 = (RuleCall)cCountAssignment_2.eContents().get(0);
		private final Assignment cInitialPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialPatternPatternParserRuleCall_3_0 = (RuleCall)cInitialPatternAssignment_3.eContents().get(0);
		
		//Initial:
		//	'Initial'
		//	name=ID
		//	count=BigInteger
		//	initialPattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//'Initial' name=ID count=BigInteger initialPattern=Pattern
		public Group getGroup() { return cGroup; }
		
		//'Initial'
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//count=BigInteger
		public Assignment getCountAssignment_2() { return cCountAssignment_2; }
		
		//BigInteger
		public RuleCall getCountBigIntegerParserRuleCall_2_0() { return cCountBigIntegerParserRuleCall_2_0; }
		
		//initialPattern=Pattern
		public Assignment getInitialPatternAssignment_3() { return cInitialPatternAssignment_3; }
		
		//Pattern
		public RuleCall getInitialPatternPatternParserRuleCall_3_0() { return cInitialPatternPatternParserRuleCall_3_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "biochemsimulation.reactionrules.ReactionRules.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLhsPatternParserRuleCall_2_0 = (RuleCall)cLhsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cUniKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cBiKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cRhsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRhsPatternParserRuleCall_4_0 = (RuleCall)cRhsAssignment_4.eContents().get(0);
		private final Keyword cAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cVariablesVariableCrossReference_6_0 = (CrossReference)cVariablesAssignment_6.eContents().get(0);
		private final RuleCall cVariablesVariableIDTerminalRuleCall_6_0_1 = (RuleCall)cVariablesVariableCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVariablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cVariablesVariableCrossReference_7_1_0 = (CrossReference)cVariablesAssignment_7_1.eContents().get(0);
		private final RuleCall cVariablesVariableIDTerminalRuleCall_7_1_0_1 = (RuleCall)cVariablesVariableCrossReference_7_1_0.eContents().get(1);
		
		//Rule:
		//	'Rule'
		//	name=ID
		//	lhs=Pattern ('uni' | 'bi') rhs=Pattern
		//	'at'
		//	variables+=[Variable] (',' variables+=[Variable])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Rule' name=ID lhs=Pattern ('uni' | 'bi') rhs=Pattern 'at' variables+=[Variable] (',' variables+=[Variable])*
		public Group getGroup() { return cGroup; }
		
		//'Rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//lhs=Pattern
		public Assignment getLhsAssignment_2() { return cLhsAssignment_2; }
		
		//Pattern
		public RuleCall getLhsPatternParserRuleCall_2_0() { return cLhsPatternParserRuleCall_2_0; }
		
		//'uni' | 'bi'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'uni'
		public Keyword getUniKeyword_3_0() { return cUniKeyword_3_0; }
		
		//'bi'
		public Keyword getBiKeyword_3_1() { return cBiKeyword_3_1; }
		
		//rhs=Pattern
		public Assignment getRhsAssignment_4() { return cRhsAssignment_4; }
		
		//Pattern
		public RuleCall getRhsPatternParserRuleCall_4_0() { return cRhsPatternParserRuleCall_4_0; }
		
		//'at'
		public Keyword getAtKeyword_5() { return cAtKeyword_5; }
		
		//variables+=[Variable]
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }
		
		//[Variable]
		public CrossReference getVariablesVariableCrossReference_6_0() { return cVariablesVariableCrossReference_6_0; }
		
		//ID
		public RuleCall getVariablesVariableIDTerminalRuleCall_6_0_1() { return cVariablesVariableIDTerminalRuleCall_6_0_1; }
		
		//(',' variables+=[Variable])*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//variables+=[Variable]
		public Assignment getVariablesAssignment_7_1() { return cVariablesAssignment_7_1; }
		
		//[Variable]
		public CrossReference getVariablesVariableCrossReference_7_1_0() { return cVariablesVariableCrossReference_7_1_0; }
		
		//ID
		public RuleCall getVariablesVariableIDTerminalRuleCall_7_1_0_1() { return cVariablesVariableIDTerminalRuleCall_7_1_0_1; }
	}
	
	
	private final ReactionRuleModelElements pReactionRuleModel;
	private final ReactionPropertyElements pReactionProperty;
	private final FloatElements pFloat;
	private final BigIntegerElements pBigInteger;
	private final StateElements pState;
	private final StatesElements pStates;
	private final SiteElements pSite;
	private final SitesElements pSites;
	private final AgentElements pAgent;
	private final VariableElements pVariable;
	private final LinkStateElements pLinkState;
	private final SemiLinkElements pSemiLink;
	private final FreeLinkElements pFreeLink;
	private final LimitLinkElements pLimitLink;
	private final ExactLinkElements pExactLink;
	private final SitePatternElements pSitePattern;
	private final AgentPatternElements pAgentPattern;
	private final PatternElements pPattern;
	private final ObservationElements pObservation;
	private final InitialElements pInitial;
	private final RuleElements pRule;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReactionRulesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pReactionRuleModel = new ReactionRuleModelElements();
		this.pReactionProperty = new ReactionPropertyElements();
		this.pFloat = new FloatElements();
		this.pBigInteger = new BigIntegerElements();
		this.pState = new StateElements();
		this.pStates = new StatesElements();
		this.pSite = new SiteElements();
		this.pSites = new SitesElements();
		this.pAgent = new AgentElements();
		this.pVariable = new VariableElements();
		this.pLinkState = new LinkStateElements();
		this.pSemiLink = new SemiLinkElements();
		this.pFreeLink = new FreeLinkElements();
		this.pLimitLink = new LimitLinkElements();
		this.pExactLink = new ExactLinkElements();
		this.pSitePattern = new SitePatternElements();
		this.pAgentPattern = new AgentPatternElements();
		this.pPattern = new PatternElements();
		this.pObservation = new ObservationElements();
		this.pInitial = new InitialElements();
		this.pRule = new RuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("biochemsimulation.reactionrules.ReactionRules".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ReactionRuleModel:
	//	reactionProperties+=ReactionProperty*;
	public ReactionRuleModelElements getReactionRuleModelAccess() {
		return pReactionRuleModel;
	}
	
	public ParserRule getReactionRuleModelRule() {
		return getReactionRuleModelAccess().getRule();
	}
	
	//ReactionProperty:
	//	Agent | Variable | Observation | Initial | Rule;
	public ReactionPropertyElements getReactionPropertyAccess() {
		return pReactionProperty;
	}
	
	public ParserRule getReactionPropertyRule() {
		return getReactionPropertyAccess().getRule();
	}
	
	//Float ecore::EFloat:
	//	INT '.' INT;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//BigInteger ecore::EBigInteger:
	//	INT;
	public BigIntegerElements getBigIntegerAccess() {
		return pBigInteger;
	}
	
	public ParserRule getBigIntegerRule() {
		return getBigIntegerAccess().getRule();
	}
	
	//State:
	//	name=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//States:
	//	{States} ('{' state+=State ("," state+=State)* '}')?;
	public StatesElements getStatesAccess() {
		return pStates;
	}
	
	public ParserRule getStatesRule() {
		return getStatesAccess().getRule();
	}
	
	//Site:
	//	name=ID
	//	states=States;
	public SiteElements getSiteAccess() {
		return pSite;
	}
	
	public ParserRule getSiteRule() {
		return getSiteAccess().getRule();
	}
	
	//Sites:
	//	{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?;
	public SitesElements getSitesAccess() {
		return pSites;
	}
	
	public ParserRule getSitesRule() {
		return getSitesAccess().getRule();
	}
	
	//Agent:
	//	'Agent'
	//	name=ID
	//	sites=Sites;
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}
	
	//Variable:
	//	'Variable'
	//	name=ID
	//	'='
	//	value=Float;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//LinkState:
	//	SemiLink | FreeLink | ExactLink | LimitLink;
	public LinkStateElements getLinkStateAccess() {
		return pLinkState;
	}
	
	public ParserRule getLinkStateRule() {
		return getLinkStateAccess().getRule();
	}
	
	//SemiLink LinkState:
	//	{SemiLink}
	//	'Semi-Link';
	public SemiLinkElements getSemiLinkAccess() {
		return pSemiLink;
	}
	
	public ParserRule getSemiLinkRule() {
		return getSemiLinkAccess().getRule();
	}
	
	//FreeLink LinkState:
	//	{FreeLink}
	//	'Free';
	public FreeLinkElements getFreeLinkAccess() {
		return pFreeLink;
	}
	
	public ParserRule getFreeLinkRule() {
		return getFreeLinkAccess().getRule();
	}
	
	//LimitLink LinkState:
	//	{LimitLink} state=BigInteger;
	public LimitLinkElements getLimitLinkAccess() {
		return pLimitLink;
	}
	
	public ParserRule getLimitLinkRule() {
		return getLimitLinkAccess().getRule();
	}
	
	//ExactLink LinkState:
	//	{ExactLink} site=[Site]
	//	'.'
	//	agent=[Agent];
	public ExactLinkElements getExactLinkAccess() {
		return pExactLink;
	}
	
	public ParserRule getExactLinkRule() {
		return getExactLinkAccess().getRule();
	}
	
	//SitePattern:
	//	{SitePattern} site=[Site] ('{' state=[State] '}')? ('[' linkState=LinkState ']')?;
	public SitePatternElements getSitePatternAccess() {
		return pSitePattern;
	}
	
	public ParserRule getSitePatternRule() {
		return getSitePatternAccess().getRule();
	}
	
	//AgentPattern:
	//	{AgentPattern} agent=[Agent]
	//	'(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)?
	//	')';
	public AgentPatternElements getAgentPatternAccess() {
		return pAgentPattern;
	}
	
	public ParserRule getAgentPatternRule() {
		return getAgentPatternAccess().getRule();
	}
	
	//Pattern:
	//	{Pattern} (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)?;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Observation:
	//	'Observation'
	//	name=ID
	//	observationPattern=Pattern;
	public ObservationElements getObservationAccess() {
		return pObservation;
	}
	
	public ParserRule getObservationRule() {
		return getObservationAccess().getRule();
	}
	
	//Initial:
	//	'Initial'
	//	name=ID
	//	count=BigInteger
	//	initialPattern=Pattern;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//Rule:
	//	'Rule'
	//	name=ID
	//	lhs=Pattern ('uni' | 'bi') rhs=Pattern
	//	'at'
	//	variables+=[Variable] (',' variables+=[Variable])*;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
