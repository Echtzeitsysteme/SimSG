grammar biochemsimulation.reactionrules.ReactionRules with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate reactionRules "http://www.reactionrules.biochemsimulation/ReactionRules"

ReactionRuleModel:
	model = Model
	(reactionProperties+=ReactionProperty)*
;

Model:
	'ModelID'
	name=ID
;

ReactionProperty returns ReactionProperty:
	Agent | Variable | Observation | Initial | Rule
;

terminal AT:
	'@'
;
terminal BI:
	'<->'
;
terminal UNI:
	'->'
;

terminal VOID_PATTERN:
	'void'
;

terminal SEMI_LINK:
	'semi'
;

terminal FREE_LINK:
	'free'
;

terminal WHATEVER_LINK:
	'?'
;

terminal EXPONENT:
	'E'
;

@Override
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9')*
;

Float hidden():
	('-')?INT '.' INT
;

ScientificFloat hidden():
	('-')?INT'.'INT EXPONENT('-' | '+')INT
;

UnsignedInteger  hidden():
	INT
;

SignedInteger  hidden():
	('-'INT)
;

ArithmeticType:
	Float | UnsignedInteger | SignedInteger | ScientificFloat
;

ArithmeticValue returns ArithmeticValue:
	value = ArithmeticType
;

State returns State:
	name=ID
;

States:
	{States}
		('{' state+=State ( "," state+=State)* '}' )?	
;

Site returns Site:
	name=ID
	states = States
;

Sites:
	{Sites}
		('(' sites+=Site ( "," sites+=Site)* ')' )?	
;

Agent returns Agent:
	'agent'
	name = ID
	sites = Sites
;

PatternVariable returns PatternVariable:
	'var'
	name = ID
	'='
	pattern = Pattern
;

ArithmeticVariable returns ArithmeticVariable:
	'var'
	name = ID
	'='
	value = ArithmeticValue
;

Variable:
	PatternVariable | ArithmeticVariable
;

SemiLink returns LinkState :
	{SemiLink}
	name = SEMI_LINK
;

FreeLink returns LinkState :
	{FreeLink}
	name = FREE_LINK
;

WhatEver returns LinkState :
	{WhatEver}
	name = WHATEVER_LINK
;

IndexedLink returns LinkState :
	{IndexedLink}
	state = UnsignedInteger
;

ExactLinkAgent returns ExactLinkAgent:
	{ExactLinkAgent}
	agent = [Agent]
;

ExactLinkSite returns ExactLinkSite:
	{ExactLinkSite}
	site = [Site]
;

ExactLink returns LinkState :
	{ExactLink}
	linkAgent = ExactLinkAgent
	'.'
	linkSite = ExactLinkSite
;

SiteState:
	{SiteState}
	'{' state = [State] '}'
;

LinkState:
	{LinkState}
	 '['linkState = (SemiLink | FreeLink | ExactLink | IndexedLink | WhatEver)']'
;

SitePattern returns SitePattern:
	{SitePattern}
	site = [Site]
	(state = SiteState)?
	linkState = LinkState 
;

SitePatterns returns SitePatterns:
	{SitePatterns}
	'('(sitePatterns += SitePattern (',' sitePatterns += SitePattern)* )?')'
;

ValidAgentPattern returns ValidAgentPattern:
	{ValidAgentPattern}
	agent = [Agent]
	sitePatterns = SitePatterns
;

VoidAgentPattern returns VoidAgentPattern:
	pattern = VOID_PATTERN
;

AgentPattern:
	ValidAgentPattern | VoidAgentPattern 
;

Pattern returns Pattern:
	{Pattern}
	'{' (agentPatterns += AgentPattern (',' agentPatterns += AgentPattern )* )?  '}'
;

Observation returns Observation:
	'obs'
	name = ID
	observationPattern = PatternAssignment
;

NumericFromLiteral:
	value = ArithmeticValue
;

NumericFromVariable:
	valueVar = [ArithmeticVariable]
;

NumericAssignment:
	NumericFromLiteral | NumericFromVariable
;

Initial returns Initial:
	'init'
	name = ID
	count = NumericAssignment
	initialPattern = PatternAssignment
;

AssignFromPattern:
	pattern = Pattern
;

AssignFromVariable:
	patternVar = [PatternVariable]
;

PatternAssignment:
	AssignFromPattern | AssignFromVariable
;

RuleVariables returns RuleVariables:
	variables += NumericAssignment (',' variables += NumericAssignment)*
;

UnidirectionalRule returns RuleBody:
	lhs = PatternAssignment
	operator = UNI
	rhs = PatternAssignment
	AT
	'[' variables = RuleVariables ']'
;

BidirectionalRule returns RuleBody:
	lhs = PatternAssignment
	operator = BI
	rhs = PatternAssignment
	AT
	'[' variables = RuleVariables']'
;

RuleBody:
	UnidirectionalRule | BidirectionalRule
;

Rule returns Rule:
	'rule'
	name = ID
	rule = RuleBody
;
