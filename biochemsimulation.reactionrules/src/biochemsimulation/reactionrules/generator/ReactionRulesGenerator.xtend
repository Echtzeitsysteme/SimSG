/*
 * generated by Xtext 2.12.0
 */
package biochemsimulation.reactionrules.generator

import biochemsimulation.reactionrules.reactionRules.AgentPattern
import biochemsimulation.reactionrules.reactionRules.AssignFromPattern
import biochemsimulation.reactionrules.reactionRules.AssignFromVariable
import biochemsimulation.reactionrules.reactionRules.Initial
import biochemsimulation.reactionrules.reactionRules.ModelPath
import biochemsimulation.reactionrules.reactionRules.ModelUri
import biochemsimulation.reactionrules.reactionRules.Pattern
import biochemsimulation.reactionrules.reactionRules.impl.ReactionRuleModelImpl
import biochemsimulation.reactionrules.reactionRules.impl.ReactionRulesFactoryImpl
import java.io.IOException
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.XMIResource
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import biochemsimulation.reactionrules.reactionRules.LinkState
import biochemsimulation.reactionrules.reactionRules.SiteState
import biochemsimulation.reactionrules.reactionRules.AgentInstanceLinkState
import biochemsimulation.reactionrules.reactionRules.Site
import org.eclipse.emf.ecore.util.EcoreUtil

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ReactionRulesGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		generateInitialConditions(resource)
		saveResource(resource)
	}
	
	def generateInitialConditions(Resource resource) {
		var model = resource.getContents().get(0) as ReactionRuleModelImpl
		var initials = model.reactionProperties.filter[x | x instanceof Initial]
		for(init : initials) {
			val i = init as Initial
			agentInstancesFromInitial(resource, i)
		}
		
	}
	
	def agentInstancesFromInitial(Resource resource, Initial initial) {
		val content = initial.initialPattern
		val n = Integer.valueOf(initial.count)
		if(content instanceof AssignFromPattern) {
			val c = content as AssignFromPattern
			agentInstancesFromPattern(resource, c.pattern, n, initial.name)
		}else {
			val va = content as AssignFromVariable
			agentInstancesFromPattern(resource, va.patternVar.pattern, n, initial.name)
		}
	}
	
	def agentInstancesFromPattern(Resource resource, Pattern pattern, int n, String prefix){
		var model = resource.getContents().get(0) as ReactionRuleModelImpl
		val factory = ReactionRulesFactoryImpl.init()
		for(i : 0 ..< n){
			for(agentPattern : pattern.agentPatterns) {
				var ap = agentPattern as AgentPattern
				var agent = ap.agent
				var agentI = factory.createAgentInstance
				agentI.name = prefix+":"+agent.name+".Instance@#"+i
				agentI.agent = agent
				for(sitePattern : ap.sitePatterns.sitePatterns) {
					var site = sitePattern.site as Site
					var oldLinkState = sitePattern.linkState as LinkState
					var oldSiteState = sitePattern.state as SiteState
					
					var newLinkState = factory.createLinkState as LinkState
					var aiLinkState = factory.createAgentInstanceLinkState as AgentInstanceLinkState

					var aiSiteState = factory.createAgentInstanceSiteState
					
					if(oldLinkState !== null) {
						newLinkState.linkState = EcoreUtil.copy(oldLinkState.linkState)
					} else {
						newLinkState.linkState = factory.createFreeLink
					}
					
					if(oldSiteState !== null) {
						aiSiteState.siteState = EcoreUtil.copy(oldSiteState)
					} else {
						aiSiteState.siteState = factory.createSiteState
					}
					
					aiLinkState.site = site
					aiLinkState.linkState = newLinkState
					
					aiSiteState.site = site
					
					agentI.linkStates.add(aiLinkState)
					agentI.siteStates.add(aiSiteState)
					
					
				}
				if(ap.sitePatterns.sitePatterns.size <= 0) {
					for(site : agent.sites.sites) {
						var aiLinkState = factory.createAgentInstanceLinkState
						aiLinkState.site = site
						var newLinkState = factory.createLinkState
						newLinkState.linkState = factory.createFreeLink
						aiLinkState.linkState = newLinkState
						agentI.linkStates.add(aiLinkState)
					}
					
				}
				model.reationContainer.agentInstances.add(agentI)
			
			}
		}
			
		
	}
	
	def saveResource(Resource resource) {
		val model = resource.getContents().get(0) as ReactionRuleModelImpl
		val name = model.model.name
		val projectPath = this.getClass().getProtectionDomain().getCodeSource().getLocation().path
		var uriName = ""
		if(model.model.location === null) {
			uriName = "file:"+projectPath+"model/instances/"+name+".xmi"
		}else {
			if(model.model.location instanceof ModelPath) {
				val path = model.model.location as ModelPath
				uriName = "file://"path.path
			}else {
				val path = model.model.location as ModelUri
				uriName = path.uri
			}
		}
		val uri1 = URI.createURI(uriName);
		var uri2 = resource.URI
		uri2 = uri2.trimFileExtension
		uri2 = uri2.appendFileExtension("xmi")
		saveModelToURI(model, name, uri1)
		saveModelToURI(model, name, uri2)
	}
	
	def saveModelToURI(EObject model, String name, URI uri){
		val Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
		var m = reg.getExtensionToFactoryMap();
		m.put(name, new XMIResourceFactoryImpl());
		var resourceSet = new ResourceSetImpl();
		var resource = resourceSet.createResource(uri) as XMIResource;
		resource.getContents().add(model);
		
		val saveOptions = resource.getDefaultSaveOptions()
		saveOptions.put(XMIResource.OPTION_ENCODING,"UTF-8")
		saveOptions.put(XMIResource.OPTION_USE_XMI_TYPE, Boolean.TRUE)
		saveOptions.put(XMIResource.OPTION_SAVE_TYPE_INFORMATION,Boolean.TRUE)
		saveOptions.put(XMIResource.OPTION_SCHEMA_LOCATION_IMPLEMENTATION, Boolean.TRUE)
		
		try {
			resource.save(saveOptions);
			println("Model saved to: "+uri.path)
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
