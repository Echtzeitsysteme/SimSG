/*
 * generated by Xtext 2.12.0
 */
package biochemsimulation.reactionrules.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import biochemsimulation.reactionrules.reactionRules.Agent
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.FilteringScope
import biochemsimulation.reactionrules.reactionRules.SitePattern
import biochemsimulation.reactionrules.reactionRules.ExactLink
import java.util.LinkedList
import biochemsimulation.reactionrules.reactionRules.SiteState
import biochemsimulation.reactionrules.reactionRules.AgentPattern
import java.util.HashSet
import biochemsimulation.reactionrules.reactionRules.ExactLinkSite
import biochemsimulation.reactionrules.reactionRules.ExactLinkAgent
import biochemsimulation.reactionrules.reactionRules.SitePatterns

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ReactionRulesScopeProvider extends AbstractReactionRulesScopeProvider {
	
	override getScope(EObject context, EReference reference) {
	    if (context instanceof SiteState) {
	        return siteStateScope(context, reference)
	    }
	    if (context instanceof ExactLinkAgent) {
	    	return exactLinkAgentScope(context, reference)
	    }
	    if (context instanceof ExactLinkSite) {
	    	return exactLinkSiteScope(context, reference)
	    }
	    if (context instanceof SitePattern) {
	       return sitePatternScope(context, reference)
	    }
	    return super.getScope(context, reference);
	}
	
	def siteStateScope(EObject context, EReference reference) {
	    val siteState = context as SiteState
	   
	    var sitePattern = null as SitePattern
	    if(siteState.eContainer !== null) {
	    	sitePattern = siteState.eContainer as SitePattern
	    }
	    
	    if(sitePattern === null) {
	    	return super.getScope(context, reference);
	    }
	    if(sitePattern.site.states === null){
	    	return super.getScope(context, reference);
	    }
	    
	    var list = sitePattern.site.states.state
	    val existingScope = Scopes.scopeFor(list)
	    
	    return new FilteringScope(existingScope, [getEObjectOrProxy != context])
	    
	}
	
	def exactLinkAgentScope(EObject context, EReference reference) {
		val rootElement = EcoreUtil2.getRootContainer(context)
	    val list = new LinkedList<EObject>
	    list.addAll(EcoreUtil2.getAllContentsOfType(rootElement, Agent))
	    val existingScope = Scopes.scopeFor(list)
	    return new FilteringScope(existingScope, [getEObjectOrProxy != context])
	}
	
	def exactLinkSiteScope(EObject context, EReference reference) {
		val rootElement = EcoreUtil2.getRootContainer(context)
	    
	    var linkSite = context as ExactLinkSite
	   
	    val exactLinks = new LinkedList<EObject>
	    exactLinks.addAll(EcoreUtil2.getAllContentsOfType(rootElement, ExactLink))
	    
	   
	    var agent = null as Agent
	    for(exactLink : exactLinks) {
	    	var el = exactLink as ExactLink
	    	if(el === null) {
	    		return super.getScope(context, reference);
	    	}
	    	if(el.linkSite === null) {
	    		return super.getScope(context, reference);
	    	}
	    	
	     	if(el.linkSite.equals(linkSite)) {
	     		if(el.linkAgent === null) {
	    			return super.getScope(context, reference);
	    		}
	    		if(el.linkAgent.agent === null) {
	    			return super.getScope(context, reference);
	    		}
	    		if(el.linkAgent.agent.name === null) {
	    			return super.getScope(context, reference);
	    		}
	     		agent = el.linkAgent.agent
	     	}
	    }
	    if(agent === null) {
	     	return super.getScope(context, reference);
	    }
	    var list = agent.sites.sites
	    
	    val existingScope = Scopes.scopeFor(list)
	    
	    return new FilteringScope(existingScope, [getEObjectOrProxy != context])
	}
	
	def sitePatternScope(EObject context, EReference reference) {
	    var sitePattern = context as SitePattern
	        
	    var agent = null as Agent
	    if(sitePattern.eContainer !== null) {
	    	val sitePatterns = sitePattern.eContainer as SitePatterns
	    	if(sitePatterns.eContainer !== null) {
	    		val agentPattern = sitePatterns.eContainer as AgentPattern
	    		agent = agentPattern.agent
	    	}
	    } 
	    val relevantSites = new LinkedList<EObject>
	    relevantSites.addAll(agent.sites.sites)
	    val existingScope = Scopes.scopeFor(relevantSites)
	        
	    return new FilteringScope(existingScope, [getEObjectOrProxy != context])
	}
}
