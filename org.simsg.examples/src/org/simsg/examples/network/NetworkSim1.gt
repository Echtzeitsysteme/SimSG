import "http://www.simsg.org/examples/ComputerNetwork"
import "http://www.eclipse.org/emf/2002/Ecore"

rule deleteLink() {
	l : Link {
		.state != enum::DELETED
		.state := enum::DELETED 
	}
}
  
rule changeWeight() { 
	l : Link {
		.weight := l.weight 
	}
}
 
rule createLink() {
	++ l : Link {
		.state := enum::UNKNOWN
	}
	
	n1 : Node {
		++ -links->l
	}
	
	n2 : Node {
		++ -links->l
	}
	
}

rule aCreateLink2() {
	 l : Link { 
		.state == enum::UNKNOWN
		.weight := l.weight 
	}	
}

rule bMarkUnknown() {
	l : Link {
		.state == enum::UNKNOWN
		.state := enum::INACTIVE
	}
}

rule cDeleteRedundantLink() {
	l1 : Link {
		.state != enum::DELETED
	}
	-- l2 : Link {
		.state != enum::DELETED
	}
	
	n1 : Node {
		- links->l1
		-- -links->l2
	}
	
	n2 : Node {
		- links->l1
		-- -links->l2
	}
}

rule dKTCrepairTwo() {
	l12 : Link {
		.state == enum::INACTIVE
		.state := enum::ACTIVE
	}
	l23 : Link {
		.state == enum::INACTIVE
		.state := enum::ACTIVE
	}
	l13 : Link {
		.state == enum::DELETED
	}
	
	n1 : Node {
		- links->l12
		- links->l13
	}
	
	n2 : Node {
		- links->l12
		- links->l23
	}
	
	n3 : Node {
		- links->l23
		- links->l13
	}
}

rule eKTCrepairOne() {
	l12 : Link {
		.state == enum::INACTIVE
		.state := enum::ACTIVE
	}
	l23 : Link {
		.state == enum::ACTIVE
	}
	l13 : Link {
		.state == enum::DELETED
	}
	
	n1 : Node {
		- links->l12
		- links->l13
	}
	
	n2 : Node {
		- links->l12
		- links->l23
	}
	
	n3 : Node {
		- links->l23
		- links->l13
	}
}

rule fRemoveDeleteLink() {
	-- l : Link {
		.state == enum::DELETED
	}
}

rule gKTCpowerUp() {
	l12 : Link {
		.state == enum::ACTIVE
	}
	l23 : Link {
		.state == enum::ACTIVE
	}
	l13 : Link {
		.state == enum::INACTIVE
		.weight <= l12.weight
		.weight <= l23.weight
		.state := enum::ACTIVE
	}
	
	n1 : Node {
		- links->l12
		- links->l13
	}
	
	n2 : Node {
		- links->l12
		- links->l23
	}
	
	n3 : Node {
		- links->l23
		- links->l13
	}
}

rule hKTCpowerDown1() {
	l12 : Link {
		.state == enum::ACTIVE
		.weight < l13.weight
	}
	l23 : Link {
		.state == enum::ACTIVE
		.weight < l13.weight
	}
	l13 : Link {
		.state == enum::ACTIVE
		.state := enum::INACTIVE
	}
	
	n1 : Node {
		- links->l12
		- links->l13
	}
	
	n2 : Node {
		- links->l12
		- links->l23
	}
	
	n3 : Node {
		- links->l23
		- links->l13
	}
}

rule iKTCpowerDown2() {
	l12 : Link {
		.state == enum::ACTIVE
	}
	l23 : Link {
		.state == enum::ACTIVE
	}
	l13 : Link {
		.state == enum::ACTIVE
		.weight <= l12.weight
		.weight <= l23.weight
		.state := enum::INACTIVE
	}
	
	n1 : Node {
		- links->l12
		- links->l13
	}
	
	n2 : Node {
		- links->l12
		- links->l23
	}
	
	n3 : Node {
		- links->l23
		- links->l13
	}
}

pattern unknown() {
	l : Link{
		.state == enum::UNKNOWN
	}
}

pattern active() {
	l : Link{
		.state == enum::ACTIVE
	}
}

pattern inactive() {
	l : Link{
		.state == enum::INACTIVE
	}
}

pattern deleted() {
	l : Link{
		.state == enum::DELETED
	}
}

pattern link() {
	l : Link{
	}
}
