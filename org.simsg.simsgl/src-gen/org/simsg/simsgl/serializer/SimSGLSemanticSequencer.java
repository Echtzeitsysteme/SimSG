/*
 * generated by Xtext 2.16.0
 */
package org.simsg.simsgl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.simsg.simsgl.services.SimSGLGrammarAccess;
import org.simsg.simsgl.simSGL.Agent;
import org.simsg.simsgl.simSGL.ArithmeticValue;
import org.simsg.simsgl.simSGL.ArithmeticVariable;
import org.simsg.simsgl.simSGL.AssignFromPattern;
import org.simsg.simsgl.simSGL.AssignFromVariable;
import org.simsg.simsgl.simSGL.BoundAnyLink;
import org.simsg.simsgl.simSGL.BoundAnyOfTypeLink;
import org.simsg.simsgl.simSGL.BoundAnyOfTypeLinkAgent;
import org.simsg.simsgl.simSGL.BoundAnyOfTypeLinkSite;
import org.simsg.simsgl.simSGL.BoundLink;
import org.simsg.simsgl.simSGL.FreeLink;
import org.simsg.simsgl.simSGL.IndexedFreeLink;
import org.simsg.simsgl.simSGL.Initial;
import org.simsg.simsgl.simSGL.Iterations;
import org.simsg.simsgl.simSGL.LinkState;
import org.simsg.simsgl.simSGL.Model;
import org.simsg.simsgl.simSGL.MultiLink;
import org.simsg.simsgl.simSGL.MultiLinkSitePattern;
import org.simsg.simsgl.simSGL.MultiLinkState;
import org.simsg.simsgl.simSGL.MultiSite;
import org.simsg.simsgl.simSGL.NumericFromLiteral;
import org.simsg.simsgl.simSGL.NumericFromVariable;
import org.simsg.simsgl.simSGL.Observation;
import org.simsg.simsgl.simSGL.Pattern;
import org.simsg.simsgl.simSGL.PatternVariable;
import org.simsg.simsgl.simSGL.Population;
import org.simsg.simsgl.simSGL.Rule;
import org.simsg.simsgl.simSGL.RuleBody;
import org.simsg.simsgl.simSGL.RuleVariables;
import org.simsg.simsgl.simSGL.SimSGLModel;
import org.simsg.simsgl.simSGL.SimSGLPackage;
import org.simsg.simsgl.simSGL.SingleSite;
import org.simsg.simsgl.simSGL.SingleSitePattern;
import org.simsg.simsgl.simSGL.SitePatterns;
import org.simsg.simsgl.simSGL.SiteState;
import org.simsg.simsgl.simSGL.Sites;
import org.simsg.simsgl.simSGL.State;
import org.simsg.simsgl.simSGL.States;
import org.simsg.simsgl.simSGL.Terminate;
import org.simsg.simsgl.simSGL.Time;
import org.simsg.simsgl.simSGL.TypedFreeLink;
import org.simsg.simsgl.simSGL.ValidAgentPattern;
import org.simsg.simsgl.simSGL.VoidAgentPattern;
import org.simsg.simsgl.simSGL.WhatEver;

@SuppressWarnings("all")
public class SimSGLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimSGLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimSGLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimSGLPackage.AGENT:
				sequence_Agent(context, (Agent) semanticObject); 
				return; 
			case SimSGLPackage.ARITHMETIC_VALUE:
				sequence_ArithmeticValue(context, (ArithmeticValue) semanticObject); 
				return; 
			case SimSGLPackage.ARITHMETIC_VARIABLE:
				sequence_ArithmeticVariable(context, (ArithmeticVariable) semanticObject); 
				return; 
			case SimSGLPackage.ASSIGN_FROM_PATTERN:
				sequence_AssignFromPattern(context, (AssignFromPattern) semanticObject); 
				return; 
			case SimSGLPackage.ASSIGN_FROM_VARIABLE:
				sequence_AssignFromVariable(context, (AssignFromVariable) semanticObject); 
				return; 
			case SimSGLPackage.BOUND_ANY_LINK:
				sequence_BoundAnyLink(context, (BoundAnyLink) semanticObject); 
				return; 
			case SimSGLPackage.BOUND_ANY_OF_TYPE_LINK:
				sequence_BoundAnyOfTypeLink(context, (BoundAnyOfTypeLink) semanticObject); 
				return; 
			case SimSGLPackage.BOUND_ANY_OF_TYPE_LINK_AGENT:
				sequence_BoundAnyOfTypeLinkAgent(context, (BoundAnyOfTypeLinkAgent) semanticObject); 
				return; 
			case SimSGLPackage.BOUND_ANY_OF_TYPE_LINK_SITE:
				sequence_BoundAnyOfTypeLinkSite(context, (BoundAnyOfTypeLinkSite) semanticObject); 
				return; 
			case SimSGLPackage.BOUND_LINK:
				sequence_BoundLink(context, (BoundLink) semanticObject); 
				return; 
			case SimSGLPackage.FREE_LINK:
				sequence_FreeLink(context, (FreeLink) semanticObject); 
				return; 
			case SimSGLPackage.INDEXED_FREE_LINK:
				sequence_IndexedFreeLink(context, (IndexedFreeLink) semanticObject); 
				return; 
			case SimSGLPackage.INITIAL:
				sequence_Initial(context, (Initial) semanticObject); 
				return; 
			case SimSGLPackage.ITERATIONS:
				sequence_Iterations(context, (Iterations) semanticObject); 
				return; 
			case SimSGLPackage.LINK_STATE:
				sequence_LinkState(context, (LinkState) semanticObject); 
				return; 
			case SimSGLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SimSGLPackage.MULTI_LINK:
				sequence_MultiLink(context, (MultiLink) semanticObject); 
				return; 
			case SimSGLPackage.MULTI_LINK_SITE_PATTERN:
				sequence_MultiLinkSitePattern(context, (MultiLinkSitePattern) semanticObject); 
				return; 
			case SimSGLPackage.MULTI_LINK_STATE:
				sequence_MultiLinkState(context, (MultiLinkState) semanticObject); 
				return; 
			case SimSGLPackage.MULTI_SITE:
				sequence_MultiSite(context, (MultiSite) semanticObject); 
				return; 
			case SimSGLPackage.NUMERIC_FROM_LITERAL:
				sequence_NumericFromLiteral(context, (NumericFromLiteral) semanticObject); 
				return; 
			case SimSGLPackage.NUMERIC_FROM_VARIABLE:
				sequence_NumericFromVariable(context, (NumericFromVariable) semanticObject); 
				return; 
			case SimSGLPackage.OBSERVATION:
				sequence_Observation(context, (Observation) semanticObject); 
				return; 
			case SimSGLPackage.PATTERN:
				sequence_Pattern(context, (Pattern) semanticObject); 
				return; 
			case SimSGLPackage.PATTERN_VARIABLE:
				sequence_PatternVariable(context, (PatternVariable) semanticObject); 
				return; 
			case SimSGLPackage.POPULATION:
				sequence_Population(context, (Population) semanticObject); 
				return; 
			case SimSGLPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case SimSGLPackage.RULE_BODY:
				if (rule == grammarAccess.getBidirectionalRuleRule()) {
					sequence_BidirectionalRule(context, (RuleBody) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRuleBodyRule()) {
					sequence_BidirectionalRule_UnidirectionalRule(context, (RuleBody) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnidirectionalRuleRule()) {
					sequence_UnidirectionalRule(context, (RuleBody) semanticObject); 
					return; 
				}
				else break;
			case SimSGLPackage.RULE_VARIABLES:
				sequence_RuleVariables(context, (RuleVariables) semanticObject); 
				return; 
			case SimSGLPackage.SIM_SGL_MODEL:
				sequence_SimSGLModel(context, (SimSGLModel) semanticObject); 
				return; 
			case SimSGLPackage.SINGLE_SITE:
				sequence_SingleSite(context, (SingleSite) semanticObject); 
				return; 
			case SimSGLPackage.SINGLE_SITE_PATTERN:
				sequence_SingleSitePattern(context, (SingleSitePattern) semanticObject); 
				return; 
			case SimSGLPackage.SITE_PATTERNS:
				sequence_SitePatterns(context, (SitePatterns) semanticObject); 
				return; 
			case SimSGLPackage.SITE_STATE:
				sequence_SiteState(context, (SiteState) semanticObject); 
				return; 
			case SimSGLPackage.SITES:
				sequence_Sites(context, (Sites) semanticObject); 
				return; 
			case SimSGLPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case SimSGLPackage.STATES:
				sequence_States(context, (States) semanticObject); 
				return; 
			case SimSGLPackage.TERMINATE:
				sequence_Terminate(context, (Terminate) semanticObject); 
				return; 
			case SimSGLPackage.TIME:
				sequence_Time(context, (Time) semanticObject); 
				return; 
			case SimSGLPackage.TYPED_FREE_LINK:
				sequence_TypedFreeLink(context, (TypedFreeLink) semanticObject); 
				return; 
			case SimSGLPackage.VALID_AGENT_PATTERN:
				sequence_ValidAgentPattern(context, (ValidAgentPattern) semanticObject); 
				return; 
			case SimSGLPackage.VOID_AGENT_PATTERN:
				sequence_VoidAgentPattern(context, (VoidAgentPattern) semanticObject); 
				return; 
			case SimSGLPackage.WHAT_EVER:
				sequence_WhatEver(context, (WhatEver) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SimSGLProperty returns Agent
	 *     Agent returns Agent
	 *
	 * Constraint:
	 *     (name=ID sites=Sites)
	 */
	protected void sequence_Agent(ISerializationContext context, Agent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.AGENT__SITES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.AGENT__SITES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAgentAccess().getSitesSitesParserRuleCall_2_0(), semanticObject.getSites());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ArithmeticValue returns ArithmeticValue
	 *
	 * Constraint:
	 *     value=ArithmeticType
	 */
	protected void sequence_ArithmeticValue(ISerializationContext context, ArithmeticValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.ARITHMETIC_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.ARITHMETIC_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArithmeticValueAccess().getValueArithmeticTypeParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimSGLProperty returns ArithmeticVariable
	 *     ArithmeticVariable returns ArithmeticVariable
	 *     Variable returns ArithmeticVariable
	 *
	 * Constraint:
	 *     (name=ID value=ArithmeticValue)
	 */
	protected void sequence_ArithmeticVariable(ISerializationContext context, ArithmeticVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.ARITHMETIC_VARIABLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.ARITHMETIC_VARIABLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArithmeticVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getArithmeticVariableAccess().getValueArithmeticValueParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AssignFromPattern returns AssignFromPattern
	 *     PatternAssignment returns AssignFromPattern
	 *
	 * Constraint:
	 *     pattern=Pattern
	 */
	protected void sequence_AssignFromPattern(ISerializationContext context, AssignFromPattern semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.ASSIGN_FROM_PATTERN__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.ASSIGN_FROM_PATTERN__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignFromPatternAccess().getPatternPatternParserRuleCall_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AssignFromVariable returns AssignFromVariable
	 *     PatternAssignment returns AssignFromVariable
	 *
	 * Constraint:
	 *     patternVar=[PatternVariable|ID]
	 */
	protected void sequence_AssignFromVariable(ISerializationContext context, AssignFromVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.ASSIGN_FROM_VARIABLE__PATTERN_VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.ASSIGN_FROM_VARIABLE__PATTERN_VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignFromVariableAccess().getPatternVarPatternVariableIDTerminalRuleCall_0_1(), semanticObject.eGet(SimSGLPackage.Literals.ASSIGN_FROM_VARIABLE__PATTERN_VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BidirectionalRule returns RuleBody
	 *
	 * Constraint:
	 *     (lhs=PatternAssignment operator=BI rhs=PatternAssignment variables=RuleVariables)
	 */
	protected void sequence_BidirectionalRule(ISerializationContext context, RuleBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE_BODY__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE_BODY__LHS));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE_BODY__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE_BODY__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE_BODY__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE_BODY__RHS));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE_BODY__VARIABLES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE_BODY__VARIABLES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBidirectionalRuleAccess().getLhsPatternAssignmentParserRuleCall_0_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getBidirectionalRuleAccess().getOperatorBITerminalRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBidirectionalRuleAccess().getRhsPatternAssignmentParserRuleCall_2_0(), semanticObject.getRhs());
		feeder.accept(grammarAccess.getBidirectionalRuleAccess().getVariablesRuleVariablesParserRuleCall_5_0(), semanticObject.getVariables());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleBody returns RuleBody
	 *
	 * Constraint:
	 *     (
	 *         (lhs=PatternAssignment operator=UNI rhs=PatternAssignment variables=RuleVariables) | 
	 *         (lhs=PatternAssignment operator=BI rhs=PatternAssignment variables=RuleVariables)
	 *     )
	 */
	protected void sequence_BidirectionalRule_UnidirectionalRule(ISerializationContext context, RuleBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BoundAnyLink returns BoundAnyLink
	 *
	 * Constraint:
	 *     name=BOUND_LINK
	 */
	protected void sequence_BoundAnyLink(ISerializationContext context, BoundAnyLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.BOUND_ANY_LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.BOUND_ANY_LINK__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoundAnyLinkAccess().getNameBOUND_LINKTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoundAnyOfTypeLinkAgent returns BoundAnyOfTypeLinkAgent
	 *
	 * Constraint:
	 *     agent=[Agent|ID]
	 */
	protected void sequence_BoundAnyOfTypeLinkAgent(ISerializationContext context, BoundAnyOfTypeLinkAgent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK_AGENT__AGENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK_AGENT__AGENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoundAnyOfTypeLinkAgentAccess().getAgentAgentIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK_AGENT__AGENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoundAnyOfTypeLinkSite returns BoundAnyOfTypeLinkSite
	 *
	 * Constraint:
	 *     site=[Site|ID]
	 */
	protected void sequence_BoundAnyOfTypeLinkSite(ISerializationContext context, BoundAnyOfTypeLinkSite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK_SITE__SITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK_SITE__SITE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoundAnyOfTypeLinkSiteAccess().getSiteSiteIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK_SITE__SITE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoundAnyOfTypeLink returns BoundAnyOfTypeLink
	 *
	 * Constraint:
	 *     (linkAgent=BoundAnyOfTypeLinkAgent linkSite=BoundAnyOfTypeLinkSite)
	 */
	protected void sequence_BoundAnyOfTypeLink(ISerializationContext context, BoundAnyOfTypeLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK__LINK_AGENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK__LINK_AGENT));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK__LINK_SITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.BOUND_ANY_OF_TYPE_LINK__LINK_SITE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoundAnyOfTypeLinkAccess().getLinkAgentBoundAnyOfTypeLinkAgentParserRuleCall_1_0(), semanticObject.getLinkAgent());
		feeder.accept(grammarAccess.getBoundAnyOfTypeLinkAccess().getLinkSiteBoundAnyOfTypeLinkSiteParserRuleCall_3_0(), semanticObject.getLinkSite());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoundLink returns BoundLink
	 *
	 * Constraint:
	 *     state=UnsignedInteger
	 */
	protected void sequence_BoundLink(ISerializationContext context, BoundLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.BOUND_LINK__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.BOUND_LINK__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoundLinkAccess().getStateUnsignedIntegerParserRuleCall_1_0(), semanticObject.getState());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FreeLink returns FreeLink
	 *
	 * Constraint:
	 *     name=FREE_LINK
	 */
	protected void sequence_FreeLink(ISerializationContext context, FreeLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.FREE_LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.FREE_LINK__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFreeLinkAccess().getNameFREE_LINKTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IndexedFreeLink returns IndexedFreeLink
	 *
	 * Constraint:
	 *     (name=FREE_LINK state=UnsignedInteger)
	 */
	protected void sequence_IndexedFreeLink(ISerializationContext context, IndexedFreeLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.INDEXED_FREE_LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.INDEXED_FREE_LINK__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.INDEXED_FREE_LINK__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.INDEXED_FREE_LINK__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIndexedFreeLinkAccess().getNameFREE_LINKTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIndexedFreeLinkAccess().getStateUnsignedIntegerParserRuleCall_3_0(), semanticObject.getState());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimSGLProperty returns Initial
	 *     Initial returns Initial
	 *
	 * Constraint:
	 *     (name=ID count=NumericAssignment initialPattern=PatternAssignment)
	 */
	protected void sequence_Initial(ISerializationContext context, Initial semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.INITIAL__COUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.INITIAL__COUNT));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.INITIAL__INITIAL_PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.INITIAL__INITIAL_PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInitialAccess().getCountNumericAssignmentParserRuleCall_2_0(), semanticObject.getCount());
		feeder.accept(grammarAccess.getInitialAccess().getInitialPatternPatternAssignmentParserRuleCall_3_0(), semanticObject.getInitialPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Iterations returns Iterations
	 *     TerminationCondition returns Iterations
	 *
	 * Constraint:
	 *     value=UnsignedInteger
	 */
	protected void sequence_Iterations(ISerializationContext context, Iterations semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.TERMINATION_CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.TERMINATION_CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIterationsAccess().getValueUnsignedIntegerParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LinkState returns LinkState
	 *
	 * Constraint:
	 *     (
	 *         linkState=BoundAnyLink | 
	 *         linkState=FreeLink | 
	 *         linkState=IndexedFreeLink | 
	 *         linkState=TypedFreeLink | 
	 *         linkState=BoundAnyOfTypeLink | 
	 *         linkState=BoundLink | 
	 *         linkState=WhatEver
	 *     )
	 */
	protected void sequence_LinkState(ISerializationContext context, LinkState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.MODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.MODEL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLinkSitePattern returns MultiLinkSitePattern
	 *     SitePattern returns MultiLinkSitePattern
	 *
	 * Constraint:
	 *     (site=[MultiSite|ID] state=SiteState? linkState=MultiLinkState)
	 */
	protected void sequence_MultiLinkSitePattern(ISerializationContext context, MultiLinkSitePattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiLinkState returns MultiLinkState
	 *
	 * Constraint:
	 *     (
	 *         linkState=WhatEver | 
	 *         linkState=FreeLink | 
	 *         linkState=IndexedFreeLink | 
	 *         linkState=TypedFreeLink | 
	 *         linkState=BoundAnyLink | 
	 *         linkState=BoundLink | 
	 *         linkState=MultiLink
	 *     )
	 */
	protected void sequence_MultiLinkState(ISerializationContext context, MultiLinkState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiLink returns MultiLink
	 *
	 * Constraint:
	 *     ((states+=BoundLink | states+=IndexedFreeLink | states+=TypedFreeLink) (states+=BoundLink | states+=IndexedFreeLink | states+=TypedFreeLink)+)?
	 */
	protected void sequence_MultiLink(ISerializationContext context, MultiLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiSite returns MultiSite
	 *     Site returns MultiSite
	 *
	 * Constraint:
	 *     (name=ID states=States)
	 */
	protected void sequence_MultiSite(ISerializationContext context, MultiSite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SITE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SITE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SITE__STATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SITE__STATES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiSiteAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiSiteAccess().getStatesStatesParserRuleCall_3_0(), semanticObject.getStates());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NumericFromLiteral returns NumericFromLiteral
	 *     NumericAssignment returns NumericFromLiteral
	 *
	 * Constraint:
	 *     value=ArithmeticValue
	 */
	protected void sequence_NumericFromLiteral(ISerializationContext context, NumericFromLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.NUMERIC_FROM_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.NUMERIC_FROM_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumericFromLiteralAccess().getValueArithmeticValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NumericFromVariable returns NumericFromVariable
	 *     NumericAssignment returns NumericFromVariable
	 *
	 * Constraint:
	 *     valueVar=[ArithmeticVariable|ID]
	 */
	protected void sequence_NumericFromVariable(ISerializationContext context, NumericFromVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.NUMERIC_FROM_VARIABLE__VALUE_VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.NUMERIC_FROM_VARIABLE__VALUE_VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumericFromVariableAccess().getValueVarArithmeticVariableIDTerminalRuleCall_0_1(), semanticObject.eGet(SimSGLPackage.Literals.NUMERIC_FROM_VARIABLE__VALUE_VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimSGLProperty returns Observation
	 *     Observation returns Observation
	 *
	 * Constraint:
	 *     (name=ID observationPattern=PatternAssignment)
	 */
	protected void sequence_Observation(ISerializationContext context, Observation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.OBSERVATION__OBSERVATION_PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.OBSERVATION__OBSERVATION_PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObservationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObservationAccess().getObservationPatternPatternAssignmentParserRuleCall_2_0(), semanticObject.getObservationPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimSGLProperty returns PatternVariable
	 *     PatternVariable returns PatternVariable
	 *     Variable returns PatternVariable
	 *
	 * Constraint:
	 *     (name=ID pattern=Pattern)
	 */
	protected void sequence_PatternVariable(ISerializationContext context, PatternVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.PATTERN_VARIABLE__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.PATTERN_VARIABLE__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPatternVariableAccess().getPatternPatternParserRuleCall_3_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pattern returns Pattern
	 *
	 * Constraint:
	 *     (agentPatterns+=AgentPattern agentPatterns+=AgentPattern*)?
	 */
	protected void sequence_Pattern(ISerializationContext context, Pattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Population returns Population
	 *     TerminationCondition returns Population
	 *
	 * Constraint:
	 *     (pa=PatternAssignment value=UnsignedInteger)
	 */
	protected void sequence_Population(ISerializationContext context, Population semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.POPULATION__PA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.POPULATION__PA));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.TERMINATION_CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.TERMINATION_CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPopulationAccess().getPaPatternAssignmentParserRuleCall_1_0(), semanticObject.getPa());
		feeder.accept(grammarAccess.getPopulationAccess().getValueUnsignedIntegerParserRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RuleVariables returns RuleVariables
	 *
	 * Constraint:
	 *     (variables+=NumericAssignment variables+=NumericAssignment*)
	 */
	protected void sequence_RuleVariables(ISerializationContext context, RuleVariables semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimSGLProperty returns Rule
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (name=ID rule=RuleBody)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE__RULE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE__RULE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRuleAccess().getRuleRuleBodyParserRuleCall_2_0(), semanticObject.getRule());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimSGLModel returns SimSGLModel
	 *
	 * Constraint:
	 *     (model=Model properties+=SimSGLProperty*)
	 */
	protected void sequence_SimSGLModel(ISerializationContext context, SimSGLModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleSitePattern returns SingleSitePattern
	 *     SitePattern returns SingleSitePattern
	 *
	 * Constraint:
	 *     (site=[SingleSite|ID] state=SiteState? linkState=LinkState)
	 */
	protected void sequence_SingleSitePattern(ISerializationContext context, SingleSitePattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleSite returns SingleSite
	 *     Site returns SingleSite
	 *
	 * Constraint:
	 *     (name=ID states=States)
	 */
	protected void sequence_SingleSite(ISerializationContext context, SingleSite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SITE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SITE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SITE__STATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SITE__STATES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleSiteAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSingleSiteAccess().getStatesStatesParserRuleCall_2_0(), semanticObject.getStates());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SitePatterns returns SitePatterns
	 *
	 * Constraint:
	 *     (sitePatterns+=SitePattern sitePatterns+=SitePattern*)?
	 */
	protected void sequence_SitePatterns(ISerializationContext context, SitePatterns semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SiteState returns SiteState
	 *
	 * Constraint:
	 *     state=[State|ID]
	 */
	protected void sequence_SiteState(ISerializationContext context, SiteState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SITE_STATE__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SITE_STATE__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSiteStateAccess().getStateStateIDTerminalRuleCall_2_0_1(), semanticObject.eGet(SimSGLPackage.Literals.SITE_STATE__STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sites returns Sites
	 *
	 * Constraint:
	 *     (sites+=Site sites+=Site*)?
	 */
	protected void sequence_Sites(ISerializationContext context, Sites semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     States returns States
	 *
	 * Constraint:
	 *     (state+=State state+=State*)?
	 */
	protected void sequence_States(ISerializationContext context, States semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimSGLProperty returns Terminate
	 *     Terminate returns Terminate
	 *
	 * Constraint:
	 *     (name=ID condition=TerminationCondition)
	 */
	protected void sequence_Terminate(ISerializationContext context, Terminate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.SIM_SGL_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.TERMINATE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.TERMINATE__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminateAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTerminateAccess().getConditionTerminationConditionParserRuleCall_2_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Time returns Time
	 *     TerminationCondition returns Time
	 *
	 * Constraint:
	 *     value=UnsignedInteger
	 */
	protected void sequence_Time(ISerializationContext context, Time semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.TERMINATION_CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.TERMINATION_CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeAccess().getValueUnsignedIntegerParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypedFreeLink returns TypedFreeLink
	 *
	 * Constraint:
	 *     (name=FREE_LINK state=[Agent|ID])
	 */
	protected void sequence_TypedFreeLink(ISerializationContext context, TypedFreeLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.TYPED_FREE_LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.TYPED_FREE_LINK__NAME));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.TYPED_FREE_LINK__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.TYPED_FREE_LINK__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypedFreeLinkAccess().getNameFREE_LINKTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTypedFreeLinkAccess().getStateAgentIDTerminalRuleCall_3_0_1(), semanticObject.eGet(SimSGLPackage.Literals.TYPED_FREE_LINK__STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UnidirectionalRule returns RuleBody
	 *
	 * Constraint:
	 *     (lhs=PatternAssignment operator=UNI rhs=PatternAssignment variables=RuleVariables)
	 */
	protected void sequence_UnidirectionalRule(ISerializationContext context, RuleBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE_BODY__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE_BODY__LHS));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE_BODY__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE_BODY__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE_BODY__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE_BODY__RHS));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.RULE_BODY__VARIABLES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.RULE_BODY__VARIABLES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnidirectionalRuleAccess().getLhsPatternAssignmentParserRuleCall_0_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getUnidirectionalRuleAccess().getOperatorUNITerminalRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getUnidirectionalRuleAccess().getRhsPatternAssignmentParserRuleCall_2_0(), semanticObject.getRhs());
		feeder.accept(grammarAccess.getUnidirectionalRuleAccess().getVariablesRuleVariablesParserRuleCall_5_0(), semanticObject.getVariables());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValidAgentPattern returns ValidAgentPattern
	 *     AgentPattern returns ValidAgentPattern
	 *
	 * Constraint:
	 *     (agent=[Agent|ID] sitePatterns=SitePatterns)
	 */
	protected void sequence_ValidAgentPattern(ISerializationContext context, ValidAgentPattern semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.VALID_AGENT_PATTERN__AGENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.VALID_AGENT_PATTERN__AGENT));
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.VALID_AGENT_PATTERN__SITE_PATTERNS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.VALID_AGENT_PATTERN__SITE_PATTERNS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidAgentPatternAccess().getAgentAgentIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SimSGLPackage.Literals.VALID_AGENT_PATTERN__AGENT, false));
		feeder.accept(grammarAccess.getValidAgentPatternAccess().getSitePatternsSitePatternsParserRuleCall_2_0(), semanticObject.getSitePatterns());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VoidAgentPattern returns VoidAgentPattern
	 *     AgentPattern returns VoidAgentPattern
	 *
	 * Constraint:
	 *     pattern=VOID_PATTERN
	 */
	protected void sequence_VoidAgentPattern(ISerializationContext context, VoidAgentPattern semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.VOID_AGENT_PATTERN__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.VOID_AGENT_PATTERN__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVoidAgentPatternAccess().getPatternVOID_PATTERNTerminalRuleCall_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WhatEver returns WhatEver
	 *
	 * Constraint:
	 *     name=WHATEVER_LINK
	 */
	protected void sequence_WhatEver(ISerializationContext context, WhatEver semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimSGLPackage.Literals.WHAT_EVER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimSGLPackage.Literals.WHAT_EVER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhatEverAccess().getNameWHATEVER_LINKTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
