/*
 * generated by Xtext 2.16.0
 */
package org.simsg.simsgl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimSGLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SimSGLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.SimSGLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelModelParserRuleCall_0_0 = (RuleCall)cModelAssignment_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesSimSGLPropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		
		//SimSGLModel:
		//	model=Model
		//	properties+=SimSGLProperty*;
		@Override public ParserRule getRule() { return rule; }
		
		//model=Model properties+=SimSGLProperty*
		public Group getGroup() { return cGroup; }
		
		//model=Model
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//Model
		public RuleCall getModelModelParserRuleCall_0_0() { return cModelModelParserRuleCall_0_0; }
		
		//properties+=SimSGLProperty*
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//SimSGLProperty
		public RuleCall getPropertiesSimSGLPropertyParserRuleCall_1_0() { return cPropertiesSimSGLPropertyParserRuleCall_1_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelIDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Model:
		//	'ModelID'
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ModelID' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ModelID'
		public Keyword getModelIDKeyword_0() { return cModelIDKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SimSGLPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.SimSGLProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAgentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObservationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInitialParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTerminateParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//SimSGLProperty:
		//	Agent | Variable | Observation | Initial | Rule | Terminate;
		@Override public ParserRule getRule() { return rule; }
		
		//Agent | Variable | Observation | Initial | Rule | Terminate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Agent
		public RuleCall getAgentParserRuleCall_0() { return cAgentParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//Observation
		public RuleCall getObservationParserRuleCall_2() { return cObservationParserRuleCall_2; }
		
		//Initial
		public RuleCall getInitialParserRuleCall_3() { return cInitialParserRuleCall_3; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_4() { return cRuleParserRuleCall_4; }
		
		//Terminate
		public RuleCall getTerminateParserRuleCall_5() { return cTerminateParserRuleCall_5; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Float hidden():
		//	'-'? INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class ScientificFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.ScientificFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cEXPONENTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cPlusSignKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//ScientificFloat hidden():
		//	'-'? INT '.' INT EXPONENT ('-' | '+') INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT '.' INT EXPONENT ('-' | '+') INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//EXPONENT
		public RuleCall getEXPONENTTerminalRuleCall_4() { return cEXPONENTTerminalRuleCall_4; }
		
		//'-' | '+'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5_0() { return cHyphenMinusKeyword_5_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_5_1() { return cPlusSignKeyword_5_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }
	}
	public class UnsignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.UnsignedInteger");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedInteger hidden():
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class SignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.SignedInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInteger hidden():
		//	'-' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' INT
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ArithmeticTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.ArithmeticType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignedIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScientificFloatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ArithmeticType:
		//	Float | UnsignedInteger | SignedInteger | ScientificFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//Float | UnsignedInteger | SignedInteger | ScientificFloat
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Float
		public RuleCall getFloatParserRuleCall_0() { return cFloatParserRuleCall_0; }
		
		//UnsignedInteger
		public RuleCall getUnsignedIntegerParserRuleCall_1() { return cUnsignedIntegerParserRuleCall_1; }
		
		//SignedInteger
		public RuleCall getSignedIntegerParserRuleCall_2() { return cSignedIntegerParserRuleCall_2; }
		
		//ScientificFloat
		public RuleCall getScientificFloatParserRuleCall_3() { return cScientificFloatParserRuleCall_3; }
	}
	public class ArithmeticValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.ArithmeticValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueArithmeticTypeParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ArithmeticValue:
		//	value=ArithmeticType;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ArithmeticType
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ArithmeticType
		public RuleCall getValueArithmeticTypeParserRuleCall_0() { return cValueArithmeticTypeParserRuleCall_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//State:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.States");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_1_1_0 = (RuleCall)cStateAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cStateAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cStateStateParserRuleCall_1_2_1_0 = (RuleCall)cStateAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//States:
		//	{States} ('{' state+=State ("," state+=State)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{States} ('{' state+=State ("," state+=State)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{States}
		public Action getStatesAction_0() { return cStatesAction_0; }
		
		//('{' state+=State ("," state+=State)* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//state+=State
		public Assignment getStateAssignment_1_1() { return cStateAssignment_1_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_1_1_0() { return cStateStateParserRuleCall_1_1_0; }
		
		//("," state+=State)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//state+=State
		public Assignment getStateAssignment_1_2_1() { return cStateAssignment_1_2_1; }
		
		//State
		public RuleCall getStateStateParserRuleCall_1_2_1_0() { return cStateStateParserRuleCall_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class SingleSiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.SingleSite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSingleSiteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesStatesParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		
		//SingleSite Site:
		//	{SingleSite} name=ID
		//	states=States;
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleSite} name=ID states=States
		public Group getGroup() { return cGroup; }
		
		//{SingleSite}
		public Action getSingleSiteAction_0() { return cSingleSiteAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//states=States
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }
		
		//States
		public RuleCall getStatesStatesParserRuleCall_2_0() { return cStatesStatesParserRuleCall_2_0; }
	}
	public class MultiSiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.MultiSite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiSiteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStatesParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		
		//MultiSite Site:
		//	{MultiSite}
		//	'*' name=ID
		//	states=States;
		@Override public ParserRule getRule() { return rule; }
		
		//{MultiSite} '*' name=ID states=States
		public Group getGroup() { return cGroup; }
		
		//{MultiSite}
		public Action getMultiSiteAction_0() { return cMultiSiteAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//states=States
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }
		
		//States
		public RuleCall getStatesStatesParserRuleCall_3_0() { return cStatesStatesParserRuleCall_3_0; }
	}
	public class SiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Site");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleSiteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiSiteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Site:
		//	SingleSite | MultiSite;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleSite | MultiSite
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleSite
		public RuleCall getSingleSiteParserRuleCall_0() { return cSingleSiteParserRuleCall_0; }
		
		//MultiSite
		public RuleCall getMultiSiteParserRuleCall_1() { return cMultiSiteParserRuleCall_1; }
	}
	public class SitesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Sites");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSitesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSitesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSitesSiteParserRuleCall_1_1_0 = (RuleCall)cSitesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSitesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSitesSiteParserRuleCall_1_2_1_0 = (RuleCall)cSitesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Sites:
		//	{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{Sites}
		public Action getSitesAction_0() { return cSitesAction_0; }
		
		//('(' sites+=Site ("," sites+=Site)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//sites+=Site
		public Assignment getSitesAssignment_1_1() { return cSitesAssignment_1_1; }
		
		//Site
		public RuleCall getSitesSiteParserRuleCall_1_1_0() { return cSitesSiteParserRuleCall_1_1_0; }
		
		//("," sites+=Site)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//sites+=Site
		public Assignment getSitesAssignment_1_2_1() { return cSitesAssignment_1_2_1; }
		
		//Site
		public RuleCall getSitesSiteParserRuleCall_1_2_1_0() { return cSitesSiteParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSitesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSitesSitesParserRuleCall_2_0 = (RuleCall)cSitesAssignment_2.eContents().get(0);
		
		//Agent:
		//	'agent'
		//	name=ID
		//	sites=Sites;
		@Override public ParserRule getRule() { return rule; }
		
		//'agent' name=ID sites=Sites
		public Group getGroup() { return cGroup; }
		
		//'agent'
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//sites=Sites
		public Assignment getSitesAssignment_2() { return cSitesAssignment_2; }
		
		//Sites
		public RuleCall getSitesSitesParserRuleCall_2_0() { return cSitesSitesParserRuleCall_2_0; }
	}
	public class PatternVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.PatternVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		//PatternVariable:
		//	'var'
		//	name=ID
		//	'='
		//	pattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' pattern=Pattern
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_3_0() { return cPatternPatternParserRuleCall_3_0; }
	}
	public class ArithmeticVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.ArithmeticVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueArithmeticValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ArithmeticVariable:
		//	'var'
		//	name=ID
		//	'='
		//	value=ArithmeticValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' value=ArithmeticValue
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=ArithmeticValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ArithmeticValue
		public RuleCall getValueArithmeticValueParserRuleCall_3_0() { return cValueArithmeticValueParserRuleCall_3_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	PatternVariable | ArithmeticVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//PatternVariable | ArithmeticVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PatternVariable
		public RuleCall getPatternVariableParserRuleCall_0() { return cPatternVariableParserRuleCall_0; }
		
		//ArithmeticVariable
		public RuleCall getArithmeticVariableParserRuleCall_1() { return cArithmeticVariableParserRuleCall_1; }
	}
	public class BoundAnyLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.BoundAnyLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoundAnyLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBOUND_LINKTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BoundAnyLink LinkState:
		//	{BoundAnyLink} name=BOUND_LINK;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoundAnyLink} name=BOUND_LINK
		public Group getGroup() { return cGroup; }
		
		//{BoundAnyLink}
		public Action getBoundAnyLinkAction_0() { return cBoundAnyLinkAction_0; }
		
		//name=BOUND_LINK
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//BOUND_LINK
		public RuleCall getNameBOUND_LINKTerminalRuleCall_1_0() { return cNameBOUND_LINKTerminalRuleCall_1_0; }
	}
	public class FreeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.FreeLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFreeLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFREE_LINKTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FreeLink LinkState:
		//	{FreeLink} name=FREE_LINK;
		@Override public ParserRule getRule() { return rule; }
		
		//{FreeLink} name=FREE_LINK
		public Group getGroup() { return cGroup; }
		
		//{FreeLink}
		public Action getFreeLinkAction_0() { return cFreeLinkAction_0; }
		
		//name=FREE_LINK
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FREE_LINK
		public RuleCall getNameFREE_LINKTerminalRuleCall_1_0() { return cNameFREE_LINKTerminalRuleCall_1_0; }
	}
	public class IndexedFreeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.IndexedFreeLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexedFreeLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFREE_LINKTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateUnsignedIntegerParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IndexedFreeLink LinkState:
		//	{IndexedFreeLink} name=FREE_LINK
		//	'('
		//	state=UnsignedInteger
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IndexedFreeLink} name=FREE_LINK '(' state=UnsignedInteger ')'
		public Group getGroup() { return cGroup; }
		
		//{IndexedFreeLink}
		public Action getIndexedFreeLinkAction_0() { return cIndexedFreeLinkAction_0; }
		
		//name=FREE_LINK
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FREE_LINK
		public RuleCall getNameFREE_LINKTerminalRuleCall_1_0() { return cNameFREE_LINKTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//state=UnsignedInteger
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//UnsignedInteger
		public RuleCall getStateUnsignedIntegerParserRuleCall_3_0() { return cStateUnsignedIntegerParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TypedFreeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.TypedFreeLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedFreeLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFREE_LINKTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStateAgentCrossReference_3_0 = (CrossReference)cStateAssignment_3.eContents().get(0);
		private final RuleCall cStateAgentIDTerminalRuleCall_3_0_1 = (RuleCall)cStateAgentCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypedFreeLink LinkState:
		//	{TypedFreeLink} name=FREE_LINK
		//	'('
		//	state=[Agent]
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{TypedFreeLink} name=FREE_LINK '(' state=[Agent] ')'
		public Group getGroup() { return cGroup; }
		
		//{TypedFreeLink}
		public Action getTypedFreeLinkAction_0() { return cTypedFreeLinkAction_0; }
		
		//name=FREE_LINK
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FREE_LINK
		public RuleCall getNameFREE_LINKTerminalRuleCall_1_0() { return cNameFREE_LINKTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//state=[Agent]
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//[Agent]
		public CrossReference getStateAgentCrossReference_3_0() { return cStateAgentCrossReference_3_0; }
		
		//ID
		public RuleCall getStateAgentIDTerminalRuleCall_3_0_1() { return cStateAgentIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WhatEverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.WhatEver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhatEverAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameWHATEVER_LINKTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//WhatEver LinkState:
		//	{WhatEver} name=WHATEVER_LINK;
		@Override public ParserRule getRule() { return rule; }
		
		//{WhatEver} name=WHATEVER_LINK
		public Group getGroup() { return cGroup; }
		
		//{WhatEver}
		public Action getWhatEverAction_0() { return cWhatEverAction_0; }
		
		//name=WHATEVER_LINK
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//WHATEVER_LINK
		public RuleCall getNameWHATEVER_LINKTerminalRuleCall_1_0() { return cNameWHATEVER_LINKTerminalRuleCall_1_0; }
	}
	public class BoundLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.BoundLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoundLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateUnsignedIntegerParserRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		
		//BoundLink LinkState:
		//	{BoundLink} state=UnsignedInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoundLink} state=UnsignedInteger
		public Group getGroup() { return cGroup; }
		
		//{BoundLink}
		public Action getBoundLinkAction_0() { return cBoundLinkAction_0; }
		
		//state=UnsignedInteger
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//UnsignedInteger
		public RuleCall getStateUnsignedIntegerParserRuleCall_1_0() { return cStateUnsignedIntegerParserRuleCall_1_0; }
	}
	public class MultiLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.MultiLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cStatesAlternatives_1_0_0 = (Alternatives)cStatesAssignment_1_0.eContents().get(0);
		private final RuleCall cStatesBoundLinkParserRuleCall_1_0_0_0 = (RuleCall)cStatesAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cStatesIndexedFreeLinkParserRuleCall_1_0_0_1 = (RuleCall)cStatesAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cStatesTypedFreeLinkParserRuleCall_1_0_0_2 = (RuleCall)cStatesAlternatives_1_0_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStatesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cStatesAlternatives_1_1_1_0 = (Alternatives)cStatesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cStatesBoundLinkParserRuleCall_1_1_1_0_0 = (RuleCall)cStatesAlternatives_1_1_1_0.eContents().get(0);
		private final RuleCall cStatesIndexedFreeLinkParserRuleCall_1_1_1_0_1 = (RuleCall)cStatesAlternatives_1_1_1_0.eContents().get(1);
		private final RuleCall cStatesTypedFreeLinkParserRuleCall_1_1_1_0_2 = (RuleCall)cStatesAlternatives_1_1_1_0.eContents().get(2);
		
		//MultiLink LinkState:
		//	{MultiLink} (states+=(BoundLink | IndexedFreeLink | TypedFreeLink) (',' states+=(BoundLink | IndexedFreeLink |
		//	TypedFreeLink))+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{MultiLink} (states+=(BoundLink | IndexedFreeLink | TypedFreeLink) (',' states+=(BoundLink | IndexedFreeLink |
		//TypedFreeLink))+)?
		public Group getGroup() { return cGroup; }
		
		//{MultiLink}
		public Action getMultiLinkAction_0() { return cMultiLinkAction_0; }
		
		//(states+=(BoundLink | IndexedFreeLink | TypedFreeLink) (',' states+=(BoundLink | IndexedFreeLink | TypedFreeLink))+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//states+=(BoundLink | IndexedFreeLink | TypedFreeLink)
		public Assignment getStatesAssignment_1_0() { return cStatesAssignment_1_0; }
		
		//(BoundLink | IndexedFreeLink | TypedFreeLink)
		public Alternatives getStatesAlternatives_1_0_0() { return cStatesAlternatives_1_0_0; }
		
		//BoundLink
		public RuleCall getStatesBoundLinkParserRuleCall_1_0_0_0() { return cStatesBoundLinkParserRuleCall_1_0_0_0; }
		
		//IndexedFreeLink
		public RuleCall getStatesIndexedFreeLinkParserRuleCall_1_0_0_1() { return cStatesIndexedFreeLinkParserRuleCall_1_0_0_1; }
		
		//TypedFreeLink
		public RuleCall getStatesTypedFreeLinkParserRuleCall_1_0_0_2() { return cStatesTypedFreeLinkParserRuleCall_1_0_0_2; }
		
		//(',' states+=(BoundLink | IndexedFreeLink | TypedFreeLink))+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//states+=(BoundLink | IndexedFreeLink | TypedFreeLink)
		public Assignment getStatesAssignment_1_1_1() { return cStatesAssignment_1_1_1; }
		
		//(BoundLink | IndexedFreeLink | TypedFreeLink)
		public Alternatives getStatesAlternatives_1_1_1_0() { return cStatesAlternatives_1_1_1_0; }
		
		//BoundLink
		public RuleCall getStatesBoundLinkParserRuleCall_1_1_1_0_0() { return cStatesBoundLinkParserRuleCall_1_1_1_0_0; }
		
		//IndexedFreeLink
		public RuleCall getStatesIndexedFreeLinkParserRuleCall_1_1_1_0_1() { return cStatesIndexedFreeLinkParserRuleCall_1_1_1_0_1; }
		
		//TypedFreeLink
		public RuleCall getStatesTypedFreeLinkParserRuleCall_1_1_1_0_2() { return cStatesTypedFreeLinkParserRuleCall_1_1_1_0_2; }
	}
	public class BoundAnyOfTypeLinkAgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.BoundAnyOfTypeLinkAgent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoundAnyOfTypeLinkAgentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAgentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAgentAgentCrossReference_1_0 = (CrossReference)cAgentAssignment_1.eContents().get(0);
		private final RuleCall cAgentAgentIDTerminalRuleCall_1_0_1 = (RuleCall)cAgentAgentCrossReference_1_0.eContents().get(1);
		
		//BoundAnyOfTypeLinkAgent:
		//	{BoundAnyOfTypeLinkAgent} agent=[Agent];
		@Override public ParserRule getRule() { return rule; }
		
		//{BoundAnyOfTypeLinkAgent} agent=[Agent]
		public Group getGroup() { return cGroup; }
		
		//{BoundAnyOfTypeLinkAgent}
		public Action getBoundAnyOfTypeLinkAgentAction_0() { return cBoundAnyOfTypeLinkAgentAction_0; }
		
		//agent=[Agent]
		public Assignment getAgentAssignment_1() { return cAgentAssignment_1; }
		
		//[Agent]
		public CrossReference getAgentAgentCrossReference_1_0() { return cAgentAgentCrossReference_1_0; }
		
		//ID
		public RuleCall getAgentAgentIDTerminalRuleCall_1_0_1() { return cAgentAgentIDTerminalRuleCall_1_0_1; }
	}
	public class BoundAnyOfTypeLinkSiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.BoundAnyOfTypeLinkSite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoundAnyOfTypeLinkSiteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSiteSiteCrossReference_1_0 = (CrossReference)cSiteAssignment_1.eContents().get(0);
		private final RuleCall cSiteSiteIDTerminalRuleCall_1_0_1 = (RuleCall)cSiteSiteCrossReference_1_0.eContents().get(1);
		
		//BoundAnyOfTypeLinkSite:
		//	{BoundAnyOfTypeLinkSite} site=[Site];
		@Override public ParserRule getRule() { return rule; }
		
		//{BoundAnyOfTypeLinkSite} site=[Site]
		public Group getGroup() { return cGroup; }
		
		//{BoundAnyOfTypeLinkSite}
		public Action getBoundAnyOfTypeLinkSiteAction_0() { return cBoundAnyOfTypeLinkSiteAction_0; }
		
		//site=[Site]
		public Assignment getSiteAssignment_1() { return cSiteAssignment_1; }
		
		//[Site]
		public CrossReference getSiteSiteCrossReference_1_0() { return cSiteSiteCrossReference_1_0; }
		
		//ID
		public RuleCall getSiteSiteIDTerminalRuleCall_1_0_1() { return cSiteSiteIDTerminalRuleCall_1_0_1; }
	}
	public class BoundAnyOfTypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.BoundAnyOfTypeLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoundAnyOfTypeLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLinkAgentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkAgentBoundAnyOfTypeLinkAgentParserRuleCall_1_0 = (RuleCall)cLinkAgentAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinkSiteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinkSiteBoundAnyOfTypeLinkSiteParserRuleCall_3_0 = (RuleCall)cLinkSiteAssignment_3.eContents().get(0);
		
		//BoundAnyOfTypeLink LinkState:
		//	{BoundAnyOfTypeLink} linkAgent=BoundAnyOfTypeLinkAgent
		//	'.'
		//	linkSite=BoundAnyOfTypeLinkSite;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoundAnyOfTypeLink} linkAgent=BoundAnyOfTypeLinkAgent '.' linkSite=BoundAnyOfTypeLinkSite
		public Group getGroup() { return cGroup; }
		
		//{BoundAnyOfTypeLink}
		public Action getBoundAnyOfTypeLinkAction_0() { return cBoundAnyOfTypeLinkAction_0; }
		
		//linkAgent=BoundAnyOfTypeLinkAgent
		public Assignment getLinkAgentAssignment_1() { return cLinkAgentAssignment_1; }
		
		//BoundAnyOfTypeLinkAgent
		public RuleCall getLinkAgentBoundAnyOfTypeLinkAgentParserRuleCall_1_0() { return cLinkAgentBoundAnyOfTypeLinkAgentParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//linkSite=BoundAnyOfTypeLinkSite
		public Assignment getLinkSiteAssignment_3() { return cLinkSiteAssignment_3; }
		
		//BoundAnyOfTypeLinkSite
		public RuleCall getLinkSiteBoundAnyOfTypeLinkSiteParserRuleCall_3_0() { return cLinkSiteBoundAnyOfTypeLinkSiteParserRuleCall_3_0; }
	}
	public class SiteStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.SiteState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSiteStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateCrossReference_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SiteState:
		//	{SiteState}
		//	'{' state=[State] '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SiteState} '{' state=[State] '}'
		public Group getGroup() { return cGroup; }
		
		//{SiteState}
		public Action getSiteStateAction_0() { return cSiteStateAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//state=[State]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[State]
		public CrossReference getStateStateCrossReference_2_0() { return cStateStateCrossReference_2_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() { return cStateStateIDTerminalRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LinkStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.LinkState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLinkStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLinkStateAlternatives_2_0 = (Alternatives)cLinkStateAssignment_2.eContents().get(0);
		private final RuleCall cLinkStateBoundAnyLinkParserRuleCall_2_0_0 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(0);
		private final RuleCall cLinkStateFreeLinkParserRuleCall_2_0_1 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(1);
		private final RuleCall cLinkStateIndexedFreeLinkParserRuleCall_2_0_2 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(2);
		private final RuleCall cLinkStateTypedFreeLinkParserRuleCall_2_0_3 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(3);
		private final RuleCall cLinkStateBoundAnyOfTypeLinkParserRuleCall_2_0_4 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(4);
		private final RuleCall cLinkStateBoundLinkParserRuleCall_2_0_5 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(5);
		private final RuleCall cLinkStateWhatEverParserRuleCall_2_0_6 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(6);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LinkState:
		//	{LinkState}
		//	'[' linkState=(BoundAnyLink | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyOfTypeLink | BoundLink | WhatEver)
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//{LinkState} '[' linkState=(BoundAnyLink | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyOfTypeLink | BoundLink |
		//WhatEver) ']'
		public Group getGroup() { return cGroup; }
		
		//{LinkState}
		public Action getLinkStateAction_0() { return cLinkStateAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//linkState=(BoundAnyLink | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyOfTypeLink | BoundLink | WhatEver)
		public Assignment getLinkStateAssignment_2() { return cLinkStateAssignment_2; }
		
		//(BoundAnyLink | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyOfTypeLink | BoundLink | WhatEver)
		public Alternatives getLinkStateAlternatives_2_0() { return cLinkStateAlternatives_2_0; }
		
		//BoundAnyLink
		public RuleCall getLinkStateBoundAnyLinkParserRuleCall_2_0_0() { return cLinkStateBoundAnyLinkParserRuleCall_2_0_0; }
		
		//FreeLink
		public RuleCall getLinkStateFreeLinkParserRuleCall_2_0_1() { return cLinkStateFreeLinkParserRuleCall_2_0_1; }
		
		//IndexedFreeLink
		public RuleCall getLinkStateIndexedFreeLinkParserRuleCall_2_0_2() { return cLinkStateIndexedFreeLinkParserRuleCall_2_0_2; }
		
		//TypedFreeLink
		public RuleCall getLinkStateTypedFreeLinkParserRuleCall_2_0_3() { return cLinkStateTypedFreeLinkParserRuleCall_2_0_3; }
		
		//BoundAnyOfTypeLink
		public RuleCall getLinkStateBoundAnyOfTypeLinkParserRuleCall_2_0_4() { return cLinkStateBoundAnyOfTypeLinkParserRuleCall_2_0_4; }
		
		//BoundLink
		public RuleCall getLinkStateBoundLinkParserRuleCall_2_0_5() { return cLinkStateBoundLinkParserRuleCall_2_0_5; }
		
		//WhatEver
		public RuleCall getLinkStateWhatEverParserRuleCall_2_0_6() { return cLinkStateWhatEverParserRuleCall_2_0_6; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class MultiLinkStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.MultiLinkState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiLinkStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLinkStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLinkStateAlternatives_2_0 = (Alternatives)cLinkStateAssignment_2.eContents().get(0);
		private final RuleCall cLinkStateWhatEverParserRuleCall_2_0_0 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(0);
		private final RuleCall cLinkStateFreeLinkParserRuleCall_2_0_1 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(1);
		private final RuleCall cLinkStateIndexedFreeLinkParserRuleCall_2_0_2 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(2);
		private final RuleCall cLinkStateTypedFreeLinkParserRuleCall_2_0_3 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(3);
		private final RuleCall cLinkStateBoundAnyLinkParserRuleCall_2_0_4 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(4);
		private final RuleCall cLinkStateBoundLinkParserRuleCall_2_0_5 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(5);
		private final RuleCall cLinkStateMultiLinkParserRuleCall_2_0_6 = (RuleCall)cLinkStateAlternatives_2_0.eContents().get(6);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MultiLinkState:
		//	{MultiLinkState}
		//	'*[' linkState=(WhatEver | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyLink | BoundLink | MultiLink) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{MultiLinkState} '*[' linkState=(WhatEver | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyLink | BoundLink |
		//MultiLink) ']'
		public Group getGroup() { return cGroup; }
		
		//{MultiLinkState}
		public Action getMultiLinkStateAction_0() { return cMultiLinkStateAction_0; }
		
		//'*['
		public Keyword getAsteriskLeftSquareBracketKeyword_1() { return cAsteriskLeftSquareBracketKeyword_1; }
		
		//linkState=(WhatEver | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyLink | BoundLink | MultiLink)
		public Assignment getLinkStateAssignment_2() { return cLinkStateAssignment_2; }
		
		//(WhatEver | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyLink | BoundLink | MultiLink)
		public Alternatives getLinkStateAlternatives_2_0() { return cLinkStateAlternatives_2_0; }
		
		//WhatEver
		public RuleCall getLinkStateWhatEverParserRuleCall_2_0_0() { return cLinkStateWhatEverParserRuleCall_2_0_0; }
		
		//FreeLink
		public RuleCall getLinkStateFreeLinkParserRuleCall_2_0_1() { return cLinkStateFreeLinkParserRuleCall_2_0_1; }
		
		//IndexedFreeLink
		public RuleCall getLinkStateIndexedFreeLinkParserRuleCall_2_0_2() { return cLinkStateIndexedFreeLinkParserRuleCall_2_0_2; }
		
		//TypedFreeLink
		public RuleCall getLinkStateTypedFreeLinkParserRuleCall_2_0_3() { return cLinkStateTypedFreeLinkParserRuleCall_2_0_3; }
		
		//BoundAnyLink
		public RuleCall getLinkStateBoundAnyLinkParserRuleCall_2_0_4() { return cLinkStateBoundAnyLinkParserRuleCall_2_0_4; }
		
		//BoundLink
		public RuleCall getLinkStateBoundLinkParserRuleCall_2_0_5() { return cLinkStateBoundLinkParserRuleCall_2_0_5; }
		
		//MultiLink
		public RuleCall getLinkStateMultiLinkParserRuleCall_2_0_6() { return cLinkStateMultiLinkParserRuleCall_2_0_6; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class SingleSitePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.SingleSitePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSingleSitePatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSiteSingleSiteCrossReference_1_0 = (CrossReference)cSiteAssignment_1.eContents().get(0);
		private final RuleCall cSiteSingleSiteIDTerminalRuleCall_1_0_1 = (RuleCall)cSiteSingleSiteCrossReference_1_0.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStateSiteStateParserRuleCall_2_0 = (RuleCall)cStateAssignment_2.eContents().get(0);
		private final Assignment cLinkStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinkStateLinkStateParserRuleCall_3_0 = (RuleCall)cLinkStateAssignment_3.eContents().get(0);
		
		//SingleSitePattern SitePattern:
		//	{SingleSitePattern} site=[SingleSite] state=SiteState?
		//	linkState=LinkState;
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleSitePattern} site=[SingleSite] state=SiteState? linkState=LinkState
		public Group getGroup() { return cGroup; }
		
		//{SingleSitePattern}
		public Action getSingleSitePatternAction_0() { return cSingleSitePatternAction_0; }
		
		//site=[SingleSite]
		public Assignment getSiteAssignment_1() { return cSiteAssignment_1; }
		
		//[SingleSite]
		public CrossReference getSiteSingleSiteCrossReference_1_0() { return cSiteSingleSiteCrossReference_1_0; }
		
		//ID
		public RuleCall getSiteSingleSiteIDTerminalRuleCall_1_0_1() { return cSiteSingleSiteIDTerminalRuleCall_1_0_1; }
		
		//state=SiteState?
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//SiteState
		public RuleCall getStateSiteStateParserRuleCall_2_0() { return cStateSiteStateParserRuleCall_2_0; }
		
		//linkState=LinkState
		public Assignment getLinkStateAssignment_3() { return cLinkStateAssignment_3; }
		
		//LinkState
		public RuleCall getLinkStateLinkStateParserRuleCall_3_0() { return cLinkStateLinkStateParserRuleCall_3_0; }
	}
	public class MultiLinkSitePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.MultiLinkSitePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiLinkSitePatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSiteMultiSiteCrossReference_1_0 = (CrossReference)cSiteAssignment_1.eContents().get(0);
		private final RuleCall cSiteMultiSiteIDTerminalRuleCall_1_0_1 = (RuleCall)cSiteMultiSiteCrossReference_1_0.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStateSiteStateParserRuleCall_2_0 = (RuleCall)cStateAssignment_2.eContents().get(0);
		private final Assignment cLinkStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinkStateMultiLinkStateParserRuleCall_3_0 = (RuleCall)cLinkStateAssignment_3.eContents().get(0);
		
		//MultiLinkSitePattern SitePattern:
		//	{MultiLinkSitePattern} site=[MultiSite] state=SiteState?
		//	linkState=MultiLinkState;
		@Override public ParserRule getRule() { return rule; }
		
		//{MultiLinkSitePattern} site=[MultiSite] state=SiteState? linkState=MultiLinkState
		public Group getGroup() { return cGroup; }
		
		//{MultiLinkSitePattern}
		public Action getMultiLinkSitePatternAction_0() { return cMultiLinkSitePatternAction_0; }
		
		//site=[MultiSite]
		public Assignment getSiteAssignment_1() { return cSiteAssignment_1; }
		
		//[MultiSite]
		public CrossReference getSiteMultiSiteCrossReference_1_0() { return cSiteMultiSiteCrossReference_1_0; }
		
		//ID
		public RuleCall getSiteMultiSiteIDTerminalRuleCall_1_0_1() { return cSiteMultiSiteIDTerminalRuleCall_1_0_1; }
		
		//state=SiteState?
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//SiteState
		public RuleCall getStateSiteStateParserRuleCall_2_0() { return cStateSiteStateParserRuleCall_2_0; }
		
		//linkState=MultiLinkState
		public Assignment getLinkStateAssignment_3() { return cLinkStateAssignment_3; }
		
		//MultiLinkState
		public RuleCall getLinkStateMultiLinkStateParserRuleCall_3_0() { return cLinkStateMultiLinkStateParserRuleCall_3_0; }
	}
	public class SitePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.SitePattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleSitePatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiLinkSitePatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SitePattern:
		//	SingleSitePattern | MultiLinkSitePattern;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleSitePattern | MultiLinkSitePattern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleSitePattern
		public RuleCall getSingleSitePatternParserRuleCall_0() { return cSingleSitePatternParserRuleCall_0; }
		
		//MultiLinkSitePattern
		public RuleCall getMultiLinkSitePatternParserRuleCall_1() { return cMultiLinkSitePatternParserRuleCall_1; }
	}
	public class SitePatternsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.SitePatterns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSitePatternsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSitePatternsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSitePatternsSitePatternParserRuleCall_2_0_0 = (RuleCall)cSitePatternsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSitePatternsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSitePatternsSitePatternParserRuleCall_2_1_1_0 = (RuleCall)cSitePatternsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SitePatterns:
		//	{SitePatterns}
		//	'(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SitePatterns} '(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{SitePatterns}
		public Action getSitePatternsAction_0() { return cSitePatternsAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//sitePatterns+=SitePattern
		public Assignment getSitePatternsAssignment_2_0() { return cSitePatternsAssignment_2_0; }
		
		//SitePattern
		public RuleCall getSitePatternsSitePatternParserRuleCall_2_0_0() { return cSitePatternsSitePatternParserRuleCall_2_0_0; }
		
		//(',' sitePatterns+=SitePattern)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//sitePatterns+=SitePattern
		public Assignment getSitePatternsAssignment_2_1_1() { return cSitePatternsAssignment_2_1_1; }
		
		//SitePattern
		public RuleCall getSitePatternsSitePatternParserRuleCall_2_1_1_0() { return cSitePatternsSitePatternParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ValidAgentPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.ValidAgentPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValidAgentPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAgentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAgentAgentCrossReference_1_0 = (CrossReference)cAgentAssignment_1.eContents().get(0);
		private final RuleCall cAgentAgentIDTerminalRuleCall_1_0_1 = (RuleCall)cAgentAgentCrossReference_1_0.eContents().get(1);
		private final Assignment cSitePatternsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSitePatternsSitePatternsParserRuleCall_2_0 = (RuleCall)cSitePatternsAssignment_2.eContents().get(0);
		
		//ValidAgentPattern:
		//	{ValidAgentPattern} agent=[Agent] sitePatterns=SitePatterns;
		@Override public ParserRule getRule() { return rule; }
		
		//{ValidAgentPattern} agent=[Agent] sitePatterns=SitePatterns
		public Group getGroup() { return cGroup; }
		
		//{ValidAgentPattern}
		public Action getValidAgentPatternAction_0() { return cValidAgentPatternAction_0; }
		
		//agent=[Agent]
		public Assignment getAgentAssignment_1() { return cAgentAssignment_1; }
		
		//[Agent]
		public CrossReference getAgentAgentCrossReference_1_0() { return cAgentAgentCrossReference_1_0; }
		
		//ID
		public RuleCall getAgentAgentIDTerminalRuleCall_1_0_1() { return cAgentAgentIDTerminalRuleCall_1_0_1; }
		
		//sitePatterns=SitePatterns
		public Assignment getSitePatternsAssignment_2() { return cSitePatternsAssignment_2; }
		
		//SitePatterns
		public RuleCall getSitePatternsSitePatternsParserRuleCall_2_0() { return cSitePatternsSitePatternsParserRuleCall_2_0; }
	}
	public class VoidAgentPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.VoidAgentPattern");
		private final Assignment cPatternAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatternVOID_PATTERNTerminalRuleCall_0 = (RuleCall)cPatternAssignment.eContents().get(0);
		
		//VoidAgentPattern:
		//	pattern=VOID_PATTERN;
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=VOID_PATTERN
		public Assignment getPatternAssignment() { return cPatternAssignment; }
		
		//VOID_PATTERN
		public RuleCall getPatternVOID_PATTERNTerminalRuleCall_0() { return cPatternVOID_PATTERNTerminalRuleCall_0; }
	}
	public class AgentPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.AgentPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidAgentPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVoidAgentPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AgentPattern:
		//	ValidAgentPattern | VoidAgentPattern;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidAgentPattern | VoidAgentPattern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValidAgentPattern
		public RuleCall getValidAgentPatternParserRuleCall_0() { return cValidAgentPatternParserRuleCall_0; }
		
		//VoidAgentPattern
		public RuleCall getVoidAgentPatternParserRuleCall_1() { return cVoidAgentPatternParserRuleCall_1; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAgentPatternsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAgentPatternsAgentPatternParserRuleCall_2_0_0 = (RuleCall)cAgentPatternsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAgentPatternsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAgentPatternsAgentPatternParserRuleCall_2_1_1_0 = (RuleCall)cAgentPatternsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Pattern:
		//	{Pattern}
		//	'{' (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Pattern} '{' (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Pattern}
		public Action getPatternAction_0() { return cPatternAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//agentPatterns+=AgentPattern
		public Assignment getAgentPatternsAssignment_2_0() { return cAgentPatternsAssignment_2_0; }
		
		//AgentPattern
		public RuleCall getAgentPatternsAgentPatternParserRuleCall_2_0_0() { return cAgentPatternsAgentPatternParserRuleCall_2_0_0; }
		
		//(',' agentPatterns+=AgentPattern)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//agentPatterns+=AgentPattern
		public Assignment getAgentPatternsAssignment_2_1_1() { return cAgentPatternsAssignment_2_1_1; }
		
		//AgentPattern
		public RuleCall getAgentPatternsAgentPatternParserRuleCall_2_1_1_0() { return cAgentPatternsAgentPatternParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Observation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cObservationPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObservationPatternPatternAssignmentParserRuleCall_2_0 = (RuleCall)cObservationPatternAssignment_2.eContents().get(0);
		
		//Observation:
		//	'obs'
		//	name=ID
		//	observationPattern=PatternAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//'obs' name=ID observationPattern=PatternAssignment
		public Group getGroup() { return cGroup; }
		
		//'obs'
		public Keyword getObsKeyword_0() { return cObsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//observationPattern=PatternAssignment
		public Assignment getObservationPatternAssignment_2() { return cObservationPatternAssignment_2; }
		
		//PatternAssignment
		public RuleCall getObservationPatternPatternAssignmentParserRuleCall_2_0() { return cObservationPatternPatternAssignmentParserRuleCall_2_0; }
	}
	public class NumericFromLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.NumericFromLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueArithmeticValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumericFromLiteral:
		//	value=ArithmeticValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ArithmeticValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ArithmeticValue
		public RuleCall getValueArithmeticValueParserRuleCall_0() { return cValueArithmeticValueParserRuleCall_0; }
	}
	public class NumericFromVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.NumericFromVariable");
		private final Assignment cValueVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueVarArithmeticVariableCrossReference_0 = (CrossReference)cValueVarAssignment.eContents().get(0);
		private final RuleCall cValueVarArithmeticVariableIDTerminalRuleCall_0_1 = (RuleCall)cValueVarArithmeticVariableCrossReference_0.eContents().get(1);
		
		//NumericFromVariable:
		//	valueVar=[ArithmeticVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//valueVar=[ArithmeticVariable]
		public Assignment getValueVarAssignment() { return cValueVarAssignment; }
		
		//[ArithmeticVariable]
		public CrossReference getValueVarArithmeticVariableCrossReference_0() { return cValueVarArithmeticVariableCrossReference_0; }
		
		//ID
		public RuleCall getValueVarArithmeticVariableIDTerminalRuleCall_0_1() { return cValueVarArithmeticVariableIDTerminalRuleCall_0_1; }
	}
	public class NumericAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.NumericAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericFromLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericFromVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericAssignment:
		//	NumericFromLiteral | NumericFromVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericFromLiteral | NumericFromVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericFromLiteral
		public RuleCall getNumericFromLiteralParserRuleCall_0() { return cNumericFromLiteralParserRuleCall_0; }
		
		//NumericFromVariable
		public RuleCall getNumericFromVariableParserRuleCall_1() { return cNumericFromVariableParserRuleCall_1; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCountNumericAssignmentParserRuleCall_2_0 = (RuleCall)cCountAssignment_2.eContents().get(0);
		private final Assignment cInitialPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialPatternPatternAssignmentParserRuleCall_3_0 = (RuleCall)cInitialPatternAssignment_3.eContents().get(0);
		
		//Initial:
		//	'init'
		//	name=ID
		//	count=NumericAssignment
		//	initialPattern=PatternAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//'init' name=ID count=NumericAssignment initialPattern=PatternAssignment
		public Group getGroup() { return cGroup; }
		
		//'init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//count=NumericAssignment
		public Assignment getCountAssignment_2() { return cCountAssignment_2; }
		
		//NumericAssignment
		public RuleCall getCountNumericAssignmentParserRuleCall_2_0() { return cCountNumericAssignmentParserRuleCall_2_0; }
		
		//initialPattern=PatternAssignment
		public Assignment getInitialPatternAssignment_3() { return cInitialPatternAssignment_3; }
		
		//PatternAssignment
		public RuleCall getInitialPatternPatternAssignmentParserRuleCall_3_0() { return cInitialPatternPatternAssignmentParserRuleCall_3_0; }
	}
	public class AssignFromPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.AssignFromPattern");
		private final Assignment cPatternAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_0 = (RuleCall)cPatternAssignment.eContents().get(0);
		
		//AssignFromPattern:
		//	pattern=Pattern;
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment() { return cPatternAssignment; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_0() { return cPatternPatternParserRuleCall_0; }
	}
	public class AssignFromVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.AssignFromVariable");
		private final Assignment cPatternVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPatternVarPatternVariableCrossReference_0 = (CrossReference)cPatternVarAssignment.eContents().get(0);
		private final RuleCall cPatternVarPatternVariableIDTerminalRuleCall_0_1 = (RuleCall)cPatternVarPatternVariableCrossReference_0.eContents().get(1);
		
		//AssignFromVariable:
		//	patternVar=[PatternVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//patternVar=[PatternVariable]
		public Assignment getPatternVarAssignment() { return cPatternVarAssignment; }
		
		//[PatternVariable]
		public CrossReference getPatternVarPatternVariableCrossReference_0() { return cPatternVarPatternVariableCrossReference_0; }
		
		//ID
		public RuleCall getPatternVarPatternVariableIDTerminalRuleCall_0_1() { return cPatternVarPatternVariableIDTerminalRuleCall_0_1; }
	}
	public class PatternAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.PatternAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignFromPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignFromVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PatternAssignment:
		//	AssignFromPattern | AssignFromVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignFromPattern | AssignFromVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignFromPattern
		public RuleCall getAssignFromPatternParserRuleCall_0() { return cAssignFromPatternParserRuleCall_0; }
		
		//AssignFromVariable
		public RuleCall getAssignFromVariableParserRuleCall_1() { return cAssignFromVariableParserRuleCall_1; }
	}
	public class RuleVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.RuleVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesNumericAssignmentParserRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesNumericAssignmentParserRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		
		//RuleVariables:
		//	variables+=NumericAssignment (',' variables+=NumericAssignment)*;
		@Override public ParserRule getRule() { return rule; }
		
		//variables+=NumericAssignment (',' variables+=NumericAssignment)*
		public Group getGroup() { return cGroup; }
		
		//variables+=NumericAssignment
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }
		
		//NumericAssignment
		public RuleCall getVariablesNumericAssignmentParserRuleCall_0_0() { return cVariablesNumericAssignmentParserRuleCall_0_0; }
		
		//(',' variables+=NumericAssignment)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//variables+=NumericAssignment
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }
		
		//NumericAssignment
		public RuleCall getVariablesNumericAssignmentParserRuleCall_1_1_0() { return cVariablesNumericAssignmentParserRuleCall_1_1_0; }
	}
	public class UnidirectionalRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.UnidirectionalRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPatternAssignmentParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorUNITerminalRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPatternAssignmentParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesRuleVariablesParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnidirectionalRule RuleBody:
		//	lhs=PatternAssignment
		//	operator=UNI
		//	rhs=PatternAssignment
		//	AT
		//	'[' variables=RuleVariables ']';
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=PatternAssignment operator=UNI rhs=PatternAssignment AT '[' variables=RuleVariables ']'
		public Group getGroup() { return cGroup; }
		
		//lhs=PatternAssignment
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//PatternAssignment
		public RuleCall getLhsPatternAssignmentParserRuleCall_0_0() { return cLhsPatternAssignmentParserRuleCall_0_0; }
		
		//operator=UNI
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//UNI
		public RuleCall getOperatorUNITerminalRuleCall_1_0() { return cOperatorUNITerminalRuleCall_1_0; }
		
		//rhs=PatternAssignment
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//PatternAssignment
		public RuleCall getRhsPatternAssignmentParserRuleCall_2_0() { return cRhsPatternAssignmentParserRuleCall_2_0; }
		
		//AT
		public RuleCall getATTerminalRuleCall_3() { return cATTerminalRuleCall_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//variables=RuleVariables
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//RuleVariables
		public RuleCall getVariablesRuleVariablesParserRuleCall_5_0() { return cVariablesRuleVariablesParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class BidirectionalRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.BidirectionalRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsPatternAssignmentParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorBITerminalRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsPatternAssignmentParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesRuleVariablesParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BidirectionalRule RuleBody:
		//	lhs=PatternAssignment
		//	operator=BI
		//	rhs=PatternAssignment
		//	AT
		//	'[' variables=RuleVariables ']';
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=PatternAssignment operator=BI rhs=PatternAssignment AT '[' variables=RuleVariables ']'
		public Group getGroup() { return cGroup; }
		
		//lhs=PatternAssignment
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//PatternAssignment
		public RuleCall getLhsPatternAssignmentParserRuleCall_0_0() { return cLhsPatternAssignmentParserRuleCall_0_0; }
		
		//operator=BI
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//BI
		public RuleCall getOperatorBITerminalRuleCall_1_0() { return cOperatorBITerminalRuleCall_1_0; }
		
		//rhs=PatternAssignment
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//PatternAssignment
		public RuleCall getRhsPatternAssignmentParserRuleCall_2_0() { return cRhsPatternAssignmentParserRuleCall_2_0; }
		
		//AT
		public RuleCall getATTerminalRuleCall_3() { return cATTerminalRuleCall_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//variables=RuleVariables
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//RuleVariables
		public RuleCall getVariablesRuleVariablesParserRuleCall_5_0() { return cVariablesRuleVariablesParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class RuleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.RuleBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnidirectionalRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBidirectionalRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RuleBody:
		//	UnidirectionalRule | BidirectionalRule;
		@Override public ParserRule getRule() { return rule; }
		
		//UnidirectionalRule | BidirectionalRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnidirectionalRule
		public RuleCall getUnidirectionalRuleParserRuleCall_0() { return cUnidirectionalRuleParserRuleCall_0; }
		
		//BidirectionalRule
		public RuleCall getBidirectionalRuleParserRuleCall_1() { return cBidirectionalRuleParserRuleCall_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleRuleBodyParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		
		//Rule:
		//	'rule'
		//	name=ID
		//	rule=RuleBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID rule=RuleBody
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//rule=RuleBody
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//RuleBody
		public RuleCall getRuleRuleBodyParserRuleCall_2_0() { return cRuleRuleBodyParserRuleCall_2_0; }
	}
	public class IterationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Iterations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIterationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueUnsignedIntegerParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Iterations:
		//	'iterations'
		//	'='
		//	value=UnsignedInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//'iterations' '=' value=UnsignedInteger
		public Group getGroup() { return cGroup; }
		
		//'iterations'
		public Keyword getIterationsKeyword_0() { return cIterationsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=UnsignedInteger
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//UnsignedInteger
		public RuleCall getValueUnsignedIntegerParserRuleCall_2_0() { return cValueUnsignedIntegerParserRuleCall_2_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueUnsignedIntegerParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Time:
		//	'time'
		//	'='
		//	value=UnsignedInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//'time' '=' value=UnsignedInteger
		public Group getGroup() { return cGroup; }
		
		//'time'
		public Keyword getTimeKeyword_0() { return cTimeKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=UnsignedInteger
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//UnsignedInteger
		public RuleCall getValueUnsignedIntegerParserRuleCall_2_0() { return cValueUnsignedIntegerParserRuleCall_2_0; }
	}
	public class PopulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Population");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPaPatternAssignmentParserRuleCall_1_0 = (RuleCall)cPaAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueUnsignedIntegerParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Population:
		//	'|'
		//	pa=PatternAssignment
		//	'|'
		//	'==>'
		//	value=UnsignedInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' pa=PatternAssignment '|' '==>' value=UnsignedInteger
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//pa=PatternAssignment
		public Assignment getPaAssignment_1() { return cPaAssignment_1; }
		
		//PatternAssignment
		public RuleCall getPaPatternAssignmentParserRuleCall_1_0() { return cPaPatternAssignmentParserRuleCall_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignEqualsSignGreaterThanSignKeyword_3; }
		
		//value=UnsignedInteger
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//UnsignedInteger
		public RuleCall getValueUnsignedIntegerParserRuleCall_4_0() { return cValueUnsignedIntegerParserRuleCall_4_0; }
	}
	public class TerminationConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.TerminationCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIterationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPopulationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TerminationCondition:
		//	Iterations | Time | Population;
		@Override public ParserRule getRule() { return rule; }
		
		//Iterations | Time | Population
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Iterations
		public RuleCall getIterationsParserRuleCall_0() { return cIterationsParserRuleCall_0; }
		
		//Time
		public RuleCall getTimeParserRuleCall_1() { return cTimeParserRuleCall_1; }
		
		//Population
		public RuleCall getPopulationParserRuleCall_2() { return cPopulationParserRuleCall_2; }
	}
	public class TerminateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.Terminate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionTerminationConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//Terminate:
		//	'terminate'
		//	name=ID
		//	condition=TerminationCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//'terminate' name=ID condition=TerminationCondition
		public Group getGroup() { return cGroup; }
		
		//'terminate'
		public Keyword getTerminateKeyword_0() { return cTerminateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//condition=TerminationCondition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//TerminationCondition
		public RuleCall getConditionTerminationConditionParserRuleCall_2_0() { return cConditionTerminationConditionParserRuleCall_2_0; }
	}
	
	
	private final SimSGLModelElements pSimSGLModel;
	private final ModelElements pModel;
	private final SimSGLPropertyElements pSimSGLProperty;
	private final TerminalRule tAT;
	private final TerminalRule tBI;
	private final TerminalRule tUNI;
	private final TerminalRule tVOID_PATTERN;
	private final TerminalRule tBOUND_LINK;
	private final TerminalRule tFREE_LINK;
	private final TerminalRule tWHATEVER_LINK;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tINT;
	private final FloatElements pFloat;
	private final ScientificFloatElements pScientificFloat;
	private final UnsignedIntegerElements pUnsignedInteger;
	private final SignedIntegerElements pSignedInteger;
	private final ArithmeticTypeElements pArithmeticType;
	private final ArithmeticValueElements pArithmeticValue;
	private final StateElements pState;
	private final StatesElements pStates;
	private final SingleSiteElements pSingleSite;
	private final MultiSiteElements pMultiSite;
	private final SiteElements pSite;
	private final SitesElements pSites;
	private final AgentElements pAgent;
	private final PatternVariableElements pPatternVariable;
	private final ArithmeticVariableElements pArithmeticVariable;
	private final VariableElements pVariable;
	private final BoundAnyLinkElements pBoundAnyLink;
	private final FreeLinkElements pFreeLink;
	private final IndexedFreeLinkElements pIndexedFreeLink;
	private final TypedFreeLinkElements pTypedFreeLink;
	private final WhatEverElements pWhatEver;
	private final BoundLinkElements pBoundLink;
	private final MultiLinkElements pMultiLink;
	private final BoundAnyOfTypeLinkAgentElements pBoundAnyOfTypeLinkAgent;
	private final BoundAnyOfTypeLinkSiteElements pBoundAnyOfTypeLinkSite;
	private final BoundAnyOfTypeLinkElements pBoundAnyOfTypeLink;
	private final SiteStateElements pSiteState;
	private final LinkStateElements pLinkState;
	private final MultiLinkStateElements pMultiLinkState;
	private final SingleSitePatternElements pSingleSitePattern;
	private final MultiLinkSitePatternElements pMultiLinkSitePattern;
	private final SitePatternElements pSitePattern;
	private final SitePatternsElements pSitePatterns;
	private final ValidAgentPatternElements pValidAgentPattern;
	private final VoidAgentPatternElements pVoidAgentPattern;
	private final AgentPatternElements pAgentPattern;
	private final PatternElements pPattern;
	private final ObservationElements pObservation;
	private final NumericFromLiteralElements pNumericFromLiteral;
	private final NumericFromVariableElements pNumericFromVariable;
	private final NumericAssignmentElements pNumericAssignment;
	private final InitialElements pInitial;
	private final AssignFromPatternElements pAssignFromPattern;
	private final AssignFromVariableElements pAssignFromVariable;
	private final PatternAssignmentElements pPatternAssignment;
	private final RuleVariablesElements pRuleVariables;
	private final UnidirectionalRuleElements pUnidirectionalRule;
	private final BidirectionalRuleElements pBidirectionalRule;
	private final RuleBodyElements pRuleBody;
	private final RuleElements pRule;
	private final IterationsElements pIterations;
	private final TimeElements pTime;
	private final PopulationElements pPopulation;
	private final TerminationConditionElements pTerminationCondition;
	private final TerminateElements pTerminate;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimSGLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSimSGLModel = new SimSGLModelElements();
		this.pModel = new ModelElements();
		this.pSimSGLProperty = new SimSGLPropertyElements();
		this.tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.AT");
		this.tBI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.BI");
		this.tUNI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.UNI");
		this.tVOID_PATTERN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.VOID_PATTERN");
		this.tBOUND_LINK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.BOUND_LINK");
		this.tFREE_LINK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.FREE_LINK");
		this.tWHATEVER_LINK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.WHATEVER_LINK");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.EXPONENT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.simsg.simsgl.SimSGL.INT");
		this.pFloat = new FloatElements();
		this.pScientificFloat = new ScientificFloatElements();
		this.pUnsignedInteger = new UnsignedIntegerElements();
		this.pSignedInteger = new SignedIntegerElements();
		this.pArithmeticType = new ArithmeticTypeElements();
		this.pArithmeticValue = new ArithmeticValueElements();
		this.pState = new StateElements();
		this.pStates = new StatesElements();
		this.pSingleSite = new SingleSiteElements();
		this.pMultiSite = new MultiSiteElements();
		this.pSite = new SiteElements();
		this.pSites = new SitesElements();
		this.pAgent = new AgentElements();
		this.pPatternVariable = new PatternVariableElements();
		this.pArithmeticVariable = new ArithmeticVariableElements();
		this.pVariable = new VariableElements();
		this.pBoundAnyLink = new BoundAnyLinkElements();
		this.pFreeLink = new FreeLinkElements();
		this.pIndexedFreeLink = new IndexedFreeLinkElements();
		this.pTypedFreeLink = new TypedFreeLinkElements();
		this.pWhatEver = new WhatEverElements();
		this.pBoundLink = new BoundLinkElements();
		this.pMultiLink = new MultiLinkElements();
		this.pBoundAnyOfTypeLinkAgent = new BoundAnyOfTypeLinkAgentElements();
		this.pBoundAnyOfTypeLinkSite = new BoundAnyOfTypeLinkSiteElements();
		this.pBoundAnyOfTypeLink = new BoundAnyOfTypeLinkElements();
		this.pSiteState = new SiteStateElements();
		this.pLinkState = new LinkStateElements();
		this.pMultiLinkState = new MultiLinkStateElements();
		this.pSingleSitePattern = new SingleSitePatternElements();
		this.pMultiLinkSitePattern = new MultiLinkSitePatternElements();
		this.pSitePattern = new SitePatternElements();
		this.pSitePatterns = new SitePatternsElements();
		this.pValidAgentPattern = new ValidAgentPatternElements();
		this.pVoidAgentPattern = new VoidAgentPatternElements();
		this.pAgentPattern = new AgentPatternElements();
		this.pPattern = new PatternElements();
		this.pObservation = new ObservationElements();
		this.pNumericFromLiteral = new NumericFromLiteralElements();
		this.pNumericFromVariable = new NumericFromVariableElements();
		this.pNumericAssignment = new NumericAssignmentElements();
		this.pInitial = new InitialElements();
		this.pAssignFromPattern = new AssignFromPatternElements();
		this.pAssignFromVariable = new AssignFromVariableElements();
		this.pPatternAssignment = new PatternAssignmentElements();
		this.pRuleVariables = new RuleVariablesElements();
		this.pUnidirectionalRule = new UnidirectionalRuleElements();
		this.pBidirectionalRule = new BidirectionalRuleElements();
		this.pRuleBody = new RuleBodyElements();
		this.pRule = new RuleElements();
		this.pIterations = new IterationsElements();
		this.pTime = new TimeElements();
		this.pPopulation = new PopulationElements();
		this.pTerminationCondition = new TerminationConditionElements();
		this.pTerminate = new TerminateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.simsg.simsgl.SimSGL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SimSGLModel:
	//	model=Model
	//	properties+=SimSGLProperty*;
	public SimSGLModelElements getSimSGLModelAccess() {
		return pSimSGLModel;
	}
	
	public ParserRule getSimSGLModelRule() {
		return getSimSGLModelAccess().getRule();
	}
	
	//Model:
	//	'ModelID'
	//	name=ID;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SimSGLProperty:
	//	Agent | Variable | Observation | Initial | Rule | Terminate;
	public SimSGLPropertyElements getSimSGLPropertyAccess() {
		return pSimSGLProperty;
	}
	
	public ParserRule getSimSGLPropertyRule() {
		return getSimSGLPropertyAccess().getRule();
	}
	
	//terminal AT:
	//	'@';
	public TerminalRule getATRule() {
		return tAT;
	}
	
	//terminal BI:
	//	'<->';
	public TerminalRule getBIRule() {
		return tBI;
	}
	
	//terminal UNI:
	//	'->';
	public TerminalRule getUNIRule() {
		return tUNI;
	}
	
	//terminal VOID_PATTERN:
	//	'void';
	public TerminalRule getVOID_PATTERNRule() {
		return tVOID_PATTERN;
	}
	
	//terminal BOUND_LINK:
	//	'bound';
	public TerminalRule getBOUND_LINKRule() {
		return tBOUND_LINK;
	}
	
	//terminal FREE_LINK:
	//	'free';
	public TerminalRule getFREE_LINKRule() {
		return tFREE_LINK;
	}
	
	//terminal WHATEVER_LINK:
	//	'?';
	public TerminalRule getWHATEVER_LINKRule() {
		return tWHATEVER_LINK;
	}
	
	//terminal EXPONENT:
	//	'E';
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'0'..'9' '0'..'9'*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//Float hidden():
	//	'-'? INT '.' INT;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//ScientificFloat hidden():
	//	'-'? INT '.' INT EXPONENT ('-' | '+') INT;
	public ScientificFloatElements getScientificFloatAccess() {
		return pScientificFloat;
	}
	
	public ParserRule getScientificFloatRule() {
		return getScientificFloatAccess().getRule();
	}
	
	//UnsignedInteger hidden():
	//	INT;
	public UnsignedIntegerElements getUnsignedIntegerAccess() {
		return pUnsignedInteger;
	}
	
	public ParserRule getUnsignedIntegerRule() {
		return getUnsignedIntegerAccess().getRule();
	}
	
	//SignedInteger hidden():
	//	'-' INT;
	public SignedIntegerElements getSignedIntegerAccess() {
		return pSignedInteger;
	}
	
	public ParserRule getSignedIntegerRule() {
		return getSignedIntegerAccess().getRule();
	}
	
	//ArithmeticType:
	//	Float | UnsignedInteger | SignedInteger | ScientificFloat;
	public ArithmeticTypeElements getArithmeticTypeAccess() {
		return pArithmeticType;
	}
	
	public ParserRule getArithmeticTypeRule() {
		return getArithmeticTypeAccess().getRule();
	}
	
	//ArithmeticValue:
	//	value=ArithmeticType;
	public ArithmeticValueElements getArithmeticValueAccess() {
		return pArithmeticValue;
	}
	
	public ParserRule getArithmeticValueRule() {
		return getArithmeticValueAccess().getRule();
	}
	
	//State:
	//	name=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//States:
	//	{States} ('{' state+=State ("," state+=State)* '}')?;
	public StatesElements getStatesAccess() {
		return pStates;
	}
	
	public ParserRule getStatesRule() {
		return getStatesAccess().getRule();
	}
	
	//SingleSite Site:
	//	{SingleSite} name=ID
	//	states=States;
	public SingleSiteElements getSingleSiteAccess() {
		return pSingleSite;
	}
	
	public ParserRule getSingleSiteRule() {
		return getSingleSiteAccess().getRule();
	}
	
	//MultiSite Site:
	//	{MultiSite}
	//	'*' name=ID
	//	states=States;
	public MultiSiteElements getMultiSiteAccess() {
		return pMultiSite;
	}
	
	public ParserRule getMultiSiteRule() {
		return getMultiSiteAccess().getRule();
	}
	
	//Site:
	//	SingleSite | MultiSite;
	public SiteElements getSiteAccess() {
		return pSite;
	}
	
	public ParserRule getSiteRule() {
		return getSiteAccess().getRule();
	}
	
	//Sites:
	//	{Sites} ('(' sites+=Site ("," sites+=Site)* ')')?;
	public SitesElements getSitesAccess() {
		return pSites;
	}
	
	public ParserRule getSitesRule() {
		return getSitesAccess().getRule();
	}
	
	//Agent:
	//	'agent'
	//	name=ID
	//	sites=Sites;
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}
	
	//PatternVariable:
	//	'var'
	//	name=ID
	//	'='
	//	pattern=Pattern;
	public PatternVariableElements getPatternVariableAccess() {
		return pPatternVariable;
	}
	
	public ParserRule getPatternVariableRule() {
		return getPatternVariableAccess().getRule();
	}
	
	//ArithmeticVariable:
	//	'var'
	//	name=ID
	//	'='
	//	value=ArithmeticValue;
	public ArithmeticVariableElements getArithmeticVariableAccess() {
		return pArithmeticVariable;
	}
	
	public ParserRule getArithmeticVariableRule() {
		return getArithmeticVariableAccess().getRule();
	}
	
	//Variable:
	//	PatternVariable | ArithmeticVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//BoundAnyLink LinkState:
	//	{BoundAnyLink} name=BOUND_LINK;
	public BoundAnyLinkElements getBoundAnyLinkAccess() {
		return pBoundAnyLink;
	}
	
	public ParserRule getBoundAnyLinkRule() {
		return getBoundAnyLinkAccess().getRule();
	}
	
	//FreeLink LinkState:
	//	{FreeLink} name=FREE_LINK;
	public FreeLinkElements getFreeLinkAccess() {
		return pFreeLink;
	}
	
	public ParserRule getFreeLinkRule() {
		return getFreeLinkAccess().getRule();
	}
	
	//IndexedFreeLink LinkState:
	//	{IndexedFreeLink} name=FREE_LINK
	//	'('
	//	state=UnsignedInteger
	//	')';
	public IndexedFreeLinkElements getIndexedFreeLinkAccess() {
		return pIndexedFreeLink;
	}
	
	public ParserRule getIndexedFreeLinkRule() {
		return getIndexedFreeLinkAccess().getRule();
	}
	
	//TypedFreeLink LinkState:
	//	{TypedFreeLink} name=FREE_LINK
	//	'('
	//	state=[Agent]
	//	')';
	public TypedFreeLinkElements getTypedFreeLinkAccess() {
		return pTypedFreeLink;
	}
	
	public ParserRule getTypedFreeLinkRule() {
		return getTypedFreeLinkAccess().getRule();
	}
	
	//WhatEver LinkState:
	//	{WhatEver} name=WHATEVER_LINK;
	public WhatEverElements getWhatEverAccess() {
		return pWhatEver;
	}
	
	public ParserRule getWhatEverRule() {
		return getWhatEverAccess().getRule();
	}
	
	//BoundLink LinkState:
	//	{BoundLink} state=UnsignedInteger;
	public BoundLinkElements getBoundLinkAccess() {
		return pBoundLink;
	}
	
	public ParserRule getBoundLinkRule() {
		return getBoundLinkAccess().getRule();
	}
	
	//MultiLink LinkState:
	//	{MultiLink} (states+=(BoundLink | IndexedFreeLink | TypedFreeLink) (',' states+=(BoundLink | IndexedFreeLink |
	//	TypedFreeLink))+)?;
	public MultiLinkElements getMultiLinkAccess() {
		return pMultiLink;
	}
	
	public ParserRule getMultiLinkRule() {
		return getMultiLinkAccess().getRule();
	}
	
	//BoundAnyOfTypeLinkAgent:
	//	{BoundAnyOfTypeLinkAgent} agent=[Agent];
	public BoundAnyOfTypeLinkAgentElements getBoundAnyOfTypeLinkAgentAccess() {
		return pBoundAnyOfTypeLinkAgent;
	}
	
	public ParserRule getBoundAnyOfTypeLinkAgentRule() {
		return getBoundAnyOfTypeLinkAgentAccess().getRule();
	}
	
	//BoundAnyOfTypeLinkSite:
	//	{BoundAnyOfTypeLinkSite} site=[Site];
	public BoundAnyOfTypeLinkSiteElements getBoundAnyOfTypeLinkSiteAccess() {
		return pBoundAnyOfTypeLinkSite;
	}
	
	public ParserRule getBoundAnyOfTypeLinkSiteRule() {
		return getBoundAnyOfTypeLinkSiteAccess().getRule();
	}
	
	//BoundAnyOfTypeLink LinkState:
	//	{BoundAnyOfTypeLink} linkAgent=BoundAnyOfTypeLinkAgent
	//	'.'
	//	linkSite=BoundAnyOfTypeLinkSite;
	public BoundAnyOfTypeLinkElements getBoundAnyOfTypeLinkAccess() {
		return pBoundAnyOfTypeLink;
	}
	
	public ParserRule getBoundAnyOfTypeLinkRule() {
		return getBoundAnyOfTypeLinkAccess().getRule();
	}
	
	//SiteState:
	//	{SiteState}
	//	'{' state=[State] '}';
	public SiteStateElements getSiteStateAccess() {
		return pSiteState;
	}
	
	public ParserRule getSiteStateRule() {
		return getSiteStateAccess().getRule();
	}
	
	//LinkState:
	//	{LinkState}
	//	'[' linkState=(BoundAnyLink | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyOfTypeLink | BoundLink | WhatEver)
	//	']';
	public LinkStateElements getLinkStateAccess() {
		return pLinkState;
	}
	
	public ParserRule getLinkStateRule() {
		return getLinkStateAccess().getRule();
	}
	
	//MultiLinkState:
	//	{MultiLinkState}
	//	'*[' linkState=(WhatEver | FreeLink | IndexedFreeLink | TypedFreeLink | BoundAnyLink | BoundLink | MultiLink) ']';
	public MultiLinkStateElements getMultiLinkStateAccess() {
		return pMultiLinkState;
	}
	
	public ParserRule getMultiLinkStateRule() {
		return getMultiLinkStateAccess().getRule();
	}
	
	//SingleSitePattern SitePattern:
	//	{SingleSitePattern} site=[SingleSite] state=SiteState?
	//	linkState=LinkState;
	public SingleSitePatternElements getSingleSitePatternAccess() {
		return pSingleSitePattern;
	}
	
	public ParserRule getSingleSitePatternRule() {
		return getSingleSitePatternAccess().getRule();
	}
	
	//MultiLinkSitePattern SitePattern:
	//	{MultiLinkSitePattern} site=[MultiSite] state=SiteState?
	//	linkState=MultiLinkState;
	public MultiLinkSitePatternElements getMultiLinkSitePatternAccess() {
		return pMultiLinkSitePattern;
	}
	
	public ParserRule getMultiLinkSitePatternRule() {
		return getMultiLinkSitePatternAccess().getRule();
	}
	
	//SitePattern:
	//	SingleSitePattern | MultiLinkSitePattern;
	public SitePatternElements getSitePatternAccess() {
		return pSitePattern;
	}
	
	public ParserRule getSitePatternRule() {
		return getSitePatternAccess().getRule();
	}
	
	//SitePatterns:
	//	{SitePatterns}
	//	'(' (sitePatterns+=SitePattern (',' sitePatterns+=SitePattern)*)? ')';
	public SitePatternsElements getSitePatternsAccess() {
		return pSitePatterns;
	}
	
	public ParserRule getSitePatternsRule() {
		return getSitePatternsAccess().getRule();
	}
	
	//ValidAgentPattern:
	//	{ValidAgentPattern} agent=[Agent] sitePatterns=SitePatterns;
	public ValidAgentPatternElements getValidAgentPatternAccess() {
		return pValidAgentPattern;
	}
	
	public ParserRule getValidAgentPatternRule() {
		return getValidAgentPatternAccess().getRule();
	}
	
	//VoidAgentPattern:
	//	pattern=VOID_PATTERN;
	public VoidAgentPatternElements getVoidAgentPatternAccess() {
		return pVoidAgentPattern;
	}
	
	public ParserRule getVoidAgentPatternRule() {
		return getVoidAgentPatternAccess().getRule();
	}
	
	//AgentPattern:
	//	ValidAgentPattern | VoidAgentPattern;
	public AgentPatternElements getAgentPatternAccess() {
		return pAgentPattern;
	}
	
	public ParserRule getAgentPatternRule() {
		return getAgentPatternAccess().getRule();
	}
	
	//Pattern:
	//	{Pattern}
	//	'{' (agentPatterns+=AgentPattern (',' agentPatterns+=AgentPattern)*)? '}';
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Observation:
	//	'obs'
	//	name=ID
	//	observationPattern=PatternAssignment;
	public ObservationElements getObservationAccess() {
		return pObservation;
	}
	
	public ParserRule getObservationRule() {
		return getObservationAccess().getRule();
	}
	
	//NumericFromLiteral:
	//	value=ArithmeticValue;
	public NumericFromLiteralElements getNumericFromLiteralAccess() {
		return pNumericFromLiteral;
	}
	
	public ParserRule getNumericFromLiteralRule() {
		return getNumericFromLiteralAccess().getRule();
	}
	
	//NumericFromVariable:
	//	valueVar=[ArithmeticVariable];
	public NumericFromVariableElements getNumericFromVariableAccess() {
		return pNumericFromVariable;
	}
	
	public ParserRule getNumericFromVariableRule() {
		return getNumericFromVariableAccess().getRule();
	}
	
	//NumericAssignment:
	//	NumericFromLiteral | NumericFromVariable;
	public NumericAssignmentElements getNumericAssignmentAccess() {
		return pNumericAssignment;
	}
	
	public ParserRule getNumericAssignmentRule() {
		return getNumericAssignmentAccess().getRule();
	}
	
	//Initial:
	//	'init'
	//	name=ID
	//	count=NumericAssignment
	//	initialPattern=PatternAssignment;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//AssignFromPattern:
	//	pattern=Pattern;
	public AssignFromPatternElements getAssignFromPatternAccess() {
		return pAssignFromPattern;
	}
	
	public ParserRule getAssignFromPatternRule() {
		return getAssignFromPatternAccess().getRule();
	}
	
	//AssignFromVariable:
	//	patternVar=[PatternVariable];
	public AssignFromVariableElements getAssignFromVariableAccess() {
		return pAssignFromVariable;
	}
	
	public ParserRule getAssignFromVariableRule() {
		return getAssignFromVariableAccess().getRule();
	}
	
	//PatternAssignment:
	//	AssignFromPattern | AssignFromVariable;
	public PatternAssignmentElements getPatternAssignmentAccess() {
		return pPatternAssignment;
	}
	
	public ParserRule getPatternAssignmentRule() {
		return getPatternAssignmentAccess().getRule();
	}
	
	//RuleVariables:
	//	variables+=NumericAssignment (',' variables+=NumericAssignment)*;
	public RuleVariablesElements getRuleVariablesAccess() {
		return pRuleVariables;
	}
	
	public ParserRule getRuleVariablesRule() {
		return getRuleVariablesAccess().getRule();
	}
	
	//UnidirectionalRule RuleBody:
	//	lhs=PatternAssignment
	//	operator=UNI
	//	rhs=PatternAssignment
	//	AT
	//	'[' variables=RuleVariables ']';
	public UnidirectionalRuleElements getUnidirectionalRuleAccess() {
		return pUnidirectionalRule;
	}
	
	public ParserRule getUnidirectionalRuleRule() {
		return getUnidirectionalRuleAccess().getRule();
	}
	
	//BidirectionalRule RuleBody:
	//	lhs=PatternAssignment
	//	operator=BI
	//	rhs=PatternAssignment
	//	AT
	//	'[' variables=RuleVariables ']';
	public BidirectionalRuleElements getBidirectionalRuleAccess() {
		return pBidirectionalRule;
	}
	
	public ParserRule getBidirectionalRuleRule() {
		return getBidirectionalRuleAccess().getRule();
	}
	
	//RuleBody:
	//	UnidirectionalRule | BidirectionalRule;
	public RuleBodyElements getRuleBodyAccess() {
		return pRuleBody;
	}
	
	public ParserRule getRuleBodyRule() {
		return getRuleBodyAccess().getRule();
	}
	
	//Rule:
	//	'rule'
	//	name=ID
	//	rule=RuleBody;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Iterations:
	//	'iterations'
	//	'='
	//	value=UnsignedInteger;
	public IterationsElements getIterationsAccess() {
		return pIterations;
	}
	
	public ParserRule getIterationsRule() {
		return getIterationsAccess().getRule();
	}
	
	//Time:
	//	'time'
	//	'='
	//	value=UnsignedInteger;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//Population:
	//	'|'
	//	pa=PatternAssignment
	//	'|'
	//	'==>'
	//	value=UnsignedInteger;
	public PopulationElements getPopulationAccess() {
		return pPopulation;
	}
	
	public ParserRule getPopulationRule() {
		return getPopulationAccess().getRule();
	}
	
	//TerminationCondition:
	//	Iterations | Time | Population;
	public TerminationConditionElements getTerminationConditionAccess() {
		return pTerminationCondition;
	}
	
	public ParserRule getTerminationConditionRule() {
		return getTerminationConditionAccess().getRule();
	}
	
	//Terminate:
	//	'terminate'
	//	name=ID
	//	condition=TerminationCondition;
	public TerminateElements getTerminateAccess() {
		return pTerminate;
	}
	
	public ParserRule getTerminateRule() {
		return getTerminateAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
