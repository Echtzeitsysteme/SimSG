/**
 * generated by Xtext 2.16.0
 */
package org.simsg.simsgl.simSGL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.simsg.simsgl.simSGL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.simsg.simsgl.simSGL.SimSGLPackage
 * @generated
 */
public class SimSGLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SimSGLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimSGLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SimSGLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimSGLSwitch<Adapter> modelSwitch =
    new SimSGLSwitch<Adapter>()
    {
      @Override
      public Adapter caseSimSGLModel(SimSGLModel object)
      {
        return createSimSGLModelAdapter();
      }
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseSimSGLProperty(SimSGLProperty object)
      {
        return createSimSGLPropertyAdapter();
      }
      @Override
      public Adapter caseArithmeticValue(ArithmeticValue object)
      {
        return createArithmeticValueAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseStates(States object)
      {
        return createStatesAdapter();
      }
      @Override
      public Adapter caseSite(Site object)
      {
        return createSiteAdapter();
      }
      @Override
      public Adapter caseSites(Sites object)
      {
        return createSitesAdapter();
      }
      @Override
      public Adapter caseAgent(Agent object)
      {
        return createAgentAdapter();
      }
      @Override
      public Adapter casePatternVariable(PatternVariable object)
      {
        return createPatternVariableAdapter();
      }
      @Override
      public Adapter caseArithmeticVariable(ArithmeticVariable object)
      {
        return createArithmeticVariableAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseLinkState(LinkState object)
      {
        return createLinkStateAdapter();
      }
      @Override
      public Adapter caseBoundAnyOfTypeLinkAgent(BoundAnyOfTypeLinkAgent object)
      {
        return createBoundAnyOfTypeLinkAgentAdapter();
      }
      @Override
      public Adapter caseBoundAnyOfTypeLinkSite(BoundAnyOfTypeLinkSite object)
      {
        return createBoundAnyOfTypeLinkSiteAdapter();
      }
      @Override
      public Adapter caseSiteState(SiteState object)
      {
        return createSiteStateAdapter();
      }
      @Override
      public Adapter caseMultiLinkState(MultiLinkState object)
      {
        return createMultiLinkStateAdapter();
      }
      @Override
      public Adapter caseSitePattern(SitePattern object)
      {
        return createSitePatternAdapter();
      }
      @Override
      public Adapter caseSitePatterns(SitePatterns object)
      {
        return createSitePatternsAdapter();
      }
      @Override
      public Adapter caseValidAgentPattern(ValidAgentPattern object)
      {
        return createValidAgentPatternAdapter();
      }
      @Override
      public Adapter caseVoidAgentPattern(VoidAgentPattern object)
      {
        return createVoidAgentPatternAdapter();
      }
      @Override
      public Adapter caseAgentPattern(AgentPattern object)
      {
        return createAgentPatternAdapter();
      }
      @Override
      public Adapter casePattern(Pattern object)
      {
        return createPatternAdapter();
      }
      @Override
      public Adapter caseObservation(Observation object)
      {
        return createObservationAdapter();
      }
      @Override
      public Adapter caseNumericFromLiteral(NumericFromLiteral object)
      {
        return createNumericFromLiteralAdapter();
      }
      @Override
      public Adapter caseNumericFromVariable(NumericFromVariable object)
      {
        return createNumericFromVariableAdapter();
      }
      @Override
      public Adapter caseNumericAssignment(NumericAssignment object)
      {
        return createNumericAssignmentAdapter();
      }
      @Override
      public Adapter caseInitial(Initial object)
      {
        return createInitialAdapter();
      }
      @Override
      public Adapter caseAssignFromPattern(AssignFromPattern object)
      {
        return createAssignFromPatternAdapter();
      }
      @Override
      public Adapter caseAssignFromVariable(AssignFromVariable object)
      {
        return createAssignFromVariableAdapter();
      }
      @Override
      public Adapter casePatternAssignment(PatternAssignment object)
      {
        return createPatternAssignmentAdapter();
      }
      @Override
      public Adapter caseRuleVariables(RuleVariables object)
      {
        return createRuleVariablesAdapter();
      }
      @Override
      public Adapter caseRuleBody(RuleBody object)
      {
        return createRuleBodyAdapter();
      }
      @Override
      public Adapter caseRule(Rule object)
      {
        return createRuleAdapter();
      }
      @Override
      public Adapter caseIterations(Iterations object)
      {
        return createIterationsAdapter();
      }
      @Override
      public Adapter caseTime(Time object)
      {
        return createTimeAdapter();
      }
      @Override
      public Adapter casePopulation(Population object)
      {
        return createPopulationAdapter();
      }
      @Override
      public Adapter caseTerminationCondition(TerminationCondition object)
      {
        return createTerminationConditionAdapter();
      }
      @Override
      public Adapter caseTerminate(Terminate object)
      {
        return createTerminateAdapter();
      }
      @Override
      public Adapter caseSingleSite(SingleSite object)
      {
        return createSingleSiteAdapter();
      }
      @Override
      public Adapter caseMultiSite(MultiSite object)
      {
        return createMultiSiteAdapter();
      }
      @Override
      public Adapter caseBoundAnyLink(BoundAnyLink object)
      {
        return createBoundAnyLinkAdapter();
      }
      @Override
      public Adapter caseFreeLink(FreeLink object)
      {
        return createFreeLinkAdapter();
      }
      @Override
      public Adapter caseIndexedFreeLink(IndexedFreeLink object)
      {
        return createIndexedFreeLinkAdapter();
      }
      @Override
      public Adapter caseTypedFreeLink(TypedFreeLink object)
      {
        return createTypedFreeLinkAdapter();
      }
      @Override
      public Adapter caseWhatEver(WhatEver object)
      {
        return createWhatEverAdapter();
      }
      @Override
      public Adapter caseBoundLink(BoundLink object)
      {
        return createBoundLinkAdapter();
      }
      @Override
      public Adapter caseMultiLink(MultiLink object)
      {
        return createMultiLinkAdapter();
      }
      @Override
      public Adapter caseBoundAnyOfTypeLink(BoundAnyOfTypeLink object)
      {
        return createBoundAnyOfTypeLinkAdapter();
      }
      @Override
      public Adapter caseSingleSitePattern(SingleSitePattern object)
      {
        return createSingleSitePatternAdapter();
      }
      @Override
      public Adapter caseMultiLinkSitePattern(MultiLinkSitePattern object)
      {
        return createMultiLinkSitePatternAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.SimSGLModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.SimSGLModel
   * @generated
   */
  public Adapter createSimSGLModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.SimSGLProperty <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.SimSGLProperty
   * @generated
   */
  public Adapter createSimSGLPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.ArithmeticValue <em>Arithmetic Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.ArithmeticValue
   * @generated
   */
  public Adapter createArithmeticValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.States <em>States</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.States
   * @generated
   */
  public Adapter createStatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Site <em>Site</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Site
   * @generated
   */
  public Adapter createSiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Sites <em>Sites</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Sites
   * @generated
   */
  public Adapter createSitesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Agent <em>Agent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Agent
   * @generated
   */
  public Adapter createAgentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.PatternVariable <em>Pattern Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.PatternVariable
   * @generated
   */
  public Adapter createPatternVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.ArithmeticVariable <em>Arithmetic Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.ArithmeticVariable
   * @generated
   */
  public Adapter createArithmeticVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.LinkState <em>Link State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.LinkState
   * @generated
   */
  public Adapter createLinkStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.BoundAnyOfTypeLinkAgent <em>Bound Any Of Type Link Agent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.BoundAnyOfTypeLinkAgent
   * @generated
   */
  public Adapter createBoundAnyOfTypeLinkAgentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.BoundAnyOfTypeLinkSite <em>Bound Any Of Type Link Site</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.BoundAnyOfTypeLinkSite
   * @generated
   */
  public Adapter createBoundAnyOfTypeLinkSiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.SiteState <em>Site State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.SiteState
   * @generated
   */
  public Adapter createSiteStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.MultiLinkState <em>Multi Link State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.MultiLinkState
   * @generated
   */
  public Adapter createMultiLinkStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.SitePattern <em>Site Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.SitePattern
   * @generated
   */
  public Adapter createSitePatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.SitePatterns <em>Site Patterns</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.SitePatterns
   * @generated
   */
  public Adapter createSitePatternsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.ValidAgentPattern <em>Valid Agent Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.ValidAgentPattern
   * @generated
   */
  public Adapter createValidAgentPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.VoidAgentPattern <em>Void Agent Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.VoidAgentPattern
   * @generated
   */
  public Adapter createVoidAgentPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.AgentPattern <em>Agent Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.AgentPattern
   * @generated
   */
  public Adapter createAgentPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Pattern <em>Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Pattern
   * @generated
   */
  public Adapter createPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Observation <em>Observation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Observation
   * @generated
   */
  public Adapter createObservationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.NumericFromLiteral <em>Numeric From Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.NumericFromLiteral
   * @generated
   */
  public Adapter createNumericFromLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.NumericFromVariable <em>Numeric From Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.NumericFromVariable
   * @generated
   */
  public Adapter createNumericFromVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.NumericAssignment <em>Numeric Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.NumericAssignment
   * @generated
   */
  public Adapter createNumericAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Initial <em>Initial</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Initial
   * @generated
   */
  public Adapter createInitialAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.AssignFromPattern <em>Assign From Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.AssignFromPattern
   * @generated
   */
  public Adapter createAssignFromPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.AssignFromVariable <em>Assign From Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.AssignFromVariable
   * @generated
   */
  public Adapter createAssignFromVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.PatternAssignment <em>Pattern Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.PatternAssignment
   * @generated
   */
  public Adapter createPatternAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.RuleVariables <em>Rule Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.RuleVariables
   * @generated
   */
  public Adapter createRuleVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.RuleBody <em>Rule Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.RuleBody
   * @generated
   */
  public Adapter createRuleBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Rule
   * @generated
   */
  public Adapter createRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Iterations <em>Iterations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Iterations
   * @generated
   */
  public Adapter createIterationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Time <em>Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Time
   * @generated
   */
  public Adapter createTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Population <em>Population</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Population
   * @generated
   */
  public Adapter createPopulationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.TerminationCondition <em>Termination Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.TerminationCondition
   * @generated
   */
  public Adapter createTerminationConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.Terminate <em>Terminate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.Terminate
   * @generated
   */
  public Adapter createTerminateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.SingleSite <em>Single Site</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.SingleSite
   * @generated
   */
  public Adapter createSingleSiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.MultiSite <em>Multi Site</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.MultiSite
   * @generated
   */
  public Adapter createMultiSiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.BoundAnyLink <em>Bound Any Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.BoundAnyLink
   * @generated
   */
  public Adapter createBoundAnyLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.FreeLink <em>Free Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.FreeLink
   * @generated
   */
  public Adapter createFreeLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.IndexedFreeLink <em>Indexed Free Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.IndexedFreeLink
   * @generated
   */
  public Adapter createIndexedFreeLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.TypedFreeLink <em>Typed Free Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.TypedFreeLink
   * @generated
   */
  public Adapter createTypedFreeLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.WhatEver <em>What Ever</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.WhatEver
   * @generated
   */
  public Adapter createWhatEverAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.BoundLink <em>Bound Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.BoundLink
   * @generated
   */
  public Adapter createBoundLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.MultiLink <em>Multi Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.MultiLink
   * @generated
   */
  public Adapter createMultiLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.BoundAnyOfTypeLink <em>Bound Any Of Type Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.BoundAnyOfTypeLink
   * @generated
   */
  public Adapter createBoundAnyOfTypeLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.SingleSitePattern <em>Single Site Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.SingleSitePattern
   * @generated
   */
  public Adapter createSingleSitePatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.simsg.simsgl.simSGL.MultiLinkSitePattern <em>Multi Link Site Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.simsg.simsgl.simSGL.MultiLinkSitePattern
   * @generated
   */
  public Adapter createMultiLinkSitePatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SimSGLAdapterFactory
