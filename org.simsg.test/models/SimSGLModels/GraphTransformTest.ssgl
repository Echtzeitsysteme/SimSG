ModelID GraphTransformTest

agent A(a, b{r,s}, c{q, p})
agent B(d, e, f{l, m})
agent C(g, h{n, o})
agent A1(a, b{r,s}, c{q, p}) 
agent B1(d, e, f{l, m})
agent C1(g, h{n, o})
agent A3(a, b{r,s}, c{q, p})
agent B3(d, e, f{l, m})
agent C2(g, h{n, o}) 
agent A8(x, y) 
agent A9(x, y)

// multi-edges
agent mA(*x)
agent mB(*y)
agent mC(*z)
agent mQ(*b)

var mockup_rate = 0.4 

var p1 = {A8(x[1]), A8(x[1], y[2]), A8(y[2]), A8(x[3]), A8(x[3], y[4]), A8(y[4])}
var p2 = {A9(x[1]), A9(x[1]), A9(x[2]), A9(x[2]), A9(x[3]), A9(x[3])}
var p3 = {mA(x*[1]), mB(y*[1])}
var p4 = {mA(x*[1]), mB(y*[1, free(mC)]), mA(x*[2]), mC(z*[2, free(mB)])}
var p5 = {mQ(b*[1]), mQ(b*[1,2]), mQ(b*[2])}

init i1 2 {A(a[free], c[1]), B(d[free], e[free], f[1]), A(b[free])}
init i2 3 {A(a[free], c{p}[1]), B(d[free], e[free], f{m}[1]), A(b{s}[free])}
init i3 2 {A(a[free], c{p}[1]), B(d[free], e[2], f{m}[1]), C(h{o}[2])}
init i4 4 {A1(a[free], c[1]), B1(d[free], e[free], f[1]), A1(b[free])}
init i5 2 {A1(a[free], c{p}[1]), B1(d[free], e[free], f{m}[1]), A1(b{s}[free])}
init i6 2 {A3(a[free], c[1]), B3(d[free], e[free], f[1]), A3(b[free])}
init i7 3 {A3(a[free], c{p}[1]), B3(d[free], e[free], f{m}[1]), A3(b{s}[free])}
init i8 2 {A3(a[free], c{p}[1]), B3(d[free], e[2], f{m}[1]), C2(h{o}[2])}
init i9 2 p1
init i10 2 p2
init i11 3 p3
init i12 2 {mA(x*[2]), mC(z*[2])}
init i13 3 p5

//rule createAndDestroy_rule {A1(a[free]), void, void} <-> {A1(a[1]), B1(d[1], e[2]), B1(f[2])} @ [mockup_rate, mockup_rate] // lhs: 5*3*3 = 45 -> 4*2*2 = 16, rhs: 0 -> 1
//rule createAndDestroyFullVoidInjectivity_rule p1 <-> {void, void, void, void, void, void} @ [mockup_rate, mockup_rate] // lhs: 4*3 = 12 -> 2*1 = 2, rhs: 1 -> 1

// bind and breakup tests
rule disjuncToBound_rule {A3(a[free]), B3(d[free], e[free]), A3(b[free])} <-> {A3(a[1]), B3(d[1], e[2]), A3(b[2])} @ [mockup_rate, mockup_rate] // lhs: 12*5*11 = 660 -> 11*4*10 = 444, rhs: 0 -> 1 
// change states tests
rule changeStates_rule {A(c{p}[1]), B(f{m}[1])} <-> {A(c{q}[1]), B(f{l}[1])} @ [mockup_rate, mockup_rate] // lhs: 5 -> 6, rhs: 2 -> 3
// breakup with states
rule breakUpWithStates_rule {A(c{p}[1]), B(f{m}[1], e[2]), C(h{o}[2])} <-> {A(c{p}[1]), B(f{m}[1], e[free]), C(h{o}[free])} @ [mockup_rate, mockup_rate] // lhs: 2 -> 1, rhs: 0 -> 2*2 = 4
// bind and change states
rule bindAndChangeStates_rule {A(a[free], c{p}[?], b{r}[?]), B(d[free], e[free], f{m}[?]), A(b{s}[free])} <-> {A(a[1], c{q}[?], b{r}[?]), B(d[1], e[2], f{l}[?]), A(b{s}[2])} @ [mockup_rate, mockup_rate] // lhs: 5*3*3 = 45 -> 4*2*2 = 16, rhs: 0 -> 1
// create and destroy
rule createAndDestroy_rule {A1(a[free]), void, void} <-> {A1(a[1]), B1(d[1], e[2]), B1(f[2])} @ [mockup_rate, mockup_rate] // lhs: 5*3*3 = 45 -> 4*2*2 = 16, rhs: 0 -> 1
// create and destroy full void pattern
rule createAndDestroyFullVoid_rule {A1(a[free]), B1(d[free])} <-> {void, void} @ [mockup_rate, mockup_rate] // lhs: 12*6 = 72 -> 11*5 = 55, rhs: 1 -> 1
// create and destroy full void injectivtiy
rule createAndDestroyFullVoidInjectivity_rule p1 <-> {void, void, void, void, void, void} @ [mockup_rate, mockup_rate] // lhs: 4*3 = 12 -> 2*1 = 2, rhs: 1 -> 1
rule createAndDestroyFullVoidInjectivity2_rule p2 <-> {void, void, void, void, void, void} @ [mockup_rate, mockup_rate] // lhs: 12*10*8 = 960 -> 6*4*2 = 48, rhs: 1 -> 1
// breakup and bind many edge
rule manyEdgeBoundToDisjunct_rule p3 <-> {mA(x*[free]), mB(y*[free])} @ [mockup_rate, mockup_rate] // lhs: 3 -> 2, rhs: 0 -> 1
rule manyEdgeDisjunctToBound_rule p4 <-> {mA(x*[1]), mB(y*[1, 3]), mA(x*[2]), mC(z*[2, 3])} @ [mockup_rate, mockup_rate] // lhs: 6 -> 2, rhs: 0 -> 1
rule manyEdgeTriangle_rule {mQ(b*[1,free(3)]), mQ(b*[1,2]), mQ(b*[2, free(3)])} <-> {mQ(b*[1,3]), mQ(b*[1,2]), mQ(b*[2, 3])} @ [mockup_rate, mockup_rate] // lhs: 6 -> 4, rhs: 0 -> 6